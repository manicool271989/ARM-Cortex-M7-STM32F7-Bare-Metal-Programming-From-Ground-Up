
17_ADC_Interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001448  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08001648  08001648  00011648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001690  08001690  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08001690  08001690  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001690  08001690  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001690  08001690  00011690  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001694  08001694  00011694  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08001698  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  2000005c  080016f4  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  080016f4  000201cc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008a  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001b73  00000000  00000000  000200cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000090e  00000000  00000000  00021c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000218  00000000  00000000  00022550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000016d  00000000  00000000  00022768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f0eb  00000000  00000000  000228d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002f35  00000000  00000000  000419c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a9962  00000000  00000000  000448f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000e0c  00000000  00000000  000ee258  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a5  00000000  00000000  000ef064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000005c 	.word	0x2000005c
 800021c:	00000000 	.word	0x00000000
 8000220:	08001630 	.word	0x08001630

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000060 	.word	0x20000060
 800023c:	08001630 	.word	0x08001630

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002e0:	b480      	push	{r7}
 80002e2:	b083      	sub	sp, #12
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	4603      	mov	r3, r0
 80002e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	db0b      	blt.n	800030a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002f2:	79fb      	ldrb	r3, [r7, #7]
 80002f4:	f003 021f 	and.w	r2, r3, #31
 80002f8:	4907      	ldr	r1, [pc, #28]	; (8000318 <__NVIC_EnableIRQ+0x38>)
 80002fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002fe:	095b      	lsrs	r3, r3, #5
 8000300:	2001      	movs	r0, #1
 8000302:	fa00 f202 	lsl.w	r2, r0, r2
 8000306:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800030a:	bf00      	nop
 800030c:	370c      	adds	r7, #12
 800030e:	46bd      	mov	sp, r7
 8000310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000314:	4770      	bx	lr
 8000316:	bf00      	nop
 8000318:	e000e100 	.word	0xe000e100

0800031c <pa4_adc_interrupt_init>:
	// Start conversion
	ADC1->CR2 |= SWSTART;
}

void pa4_adc_interrupt_init(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	af00      	add	r7, sp, #0
	// Enable clock access to GPIOA
	RCC->AHB1ENR |= GPIOAEN;
 8000320:	4b1b      	ldr	r3, [pc, #108]	; (8000390 <pa4_adc_interrupt_init+0x74>)
 8000322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000324:	4a1a      	ldr	r2, [pc, #104]	; (8000390 <pa4_adc_interrupt_init+0x74>)
 8000326:	f043 0301 	orr.w	r3, r3, #1
 800032a:	6313      	str	r3, [r2, #48]	; 0x30

	// Configure GPIOA pin (PA4) mode to analog mode
	GPIOA->MODER |= (1U<<9) | (1U<<8);
 800032c:	4b19      	ldr	r3, [pc, #100]	; (8000394 <pa4_adc_interrupt_init+0x78>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	4a18      	ldr	r2, [pc, #96]	; (8000394 <pa4_adc_interrupt_init+0x78>)
 8000332:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000336:	6013      	str	r3, [r2, #0]

	// Enable clock access to ADC1
	RCC->APB2ENR |= ADC1EN;
 8000338:	4b15      	ldr	r3, [pc, #84]	; (8000390 <pa4_adc_interrupt_init+0x74>)
 800033a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800033c:	4a14      	ldr	r2, [pc, #80]	; (8000390 <pa4_adc_interrupt_init+0x74>)
 800033e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000342:	6453      	str	r3, [r2, #68]	; 0x44

	// Configure ADC1
	// Set conversion mode
	ADC1->CR2 |= ADC1CONT;
 8000344:	4b14      	ldr	r3, [pc, #80]	; (8000398 <pa4_adc_interrupt_init+0x7c>)
 8000346:	689b      	ldr	r3, [r3, #8]
 8000348:	4a13      	ldr	r2, [pc, #76]	; (8000398 <pa4_adc_interrupt_init+0x7c>)
 800034a:	f043 0302 	orr.w	r3, r3, #2
 800034e:	6093      	str	r3, [r2, #8]

	// Set sequencer length
	ADC1->SQR1 = 0;
 8000350:	4b11      	ldr	r3, [pc, #68]	; (8000398 <pa4_adc_interrupt_init+0x7c>)
 8000352:	2200      	movs	r2, #0
 8000354:	62da      	str	r2, [r3, #44]	; 0x2c

	// Set ADC channel
	ADC1->SQR3 |= CH4_RANK1;
 8000356:	4b10      	ldr	r3, [pc, #64]	; (8000398 <pa4_adc_interrupt_init+0x7c>)
 8000358:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800035a:	4a0f      	ldr	r2, [pc, #60]	; (8000398 <pa4_adc_interrupt_init+0x7c>)
 800035c:	f043 0304 	orr.w	r3, r3, #4
 8000360:	6353      	str	r3, [r2, #52]	; 0x34

	// Enable ADC
	ADC1->CR2 |= ADCON;
 8000362:	4b0d      	ldr	r3, [pc, #52]	; (8000398 <pa4_adc_interrupt_init+0x7c>)
 8000364:	689b      	ldr	r3, [r3, #8]
 8000366:	4a0c      	ldr	r2, [pc, #48]	; (8000398 <pa4_adc_interrupt_init+0x7c>)
 8000368:	f043 0301 	orr.w	r3, r3, #1
 800036c:	6093      	str	r3, [r2, #8]

	// Enable ADC End of Conversion Interrupt.
	ADC1->CR1 |= CR1_EOCIE;
 800036e:	4b0a      	ldr	r3, [pc, #40]	; (8000398 <pa4_adc_interrupt_init+0x7c>)
 8000370:	685b      	ldr	r3, [r3, #4]
 8000372:	4a09      	ldr	r2, [pc, #36]	; (8000398 <pa4_adc_interrupt_init+0x7c>)
 8000374:	f043 0320 	orr.w	r3, r3, #32
 8000378:	6053      	str	r3, [r2, #4]

	// Enable ADC Interrupt in NVIC.
	NVIC_EnableIRQ(ADC_IRQn);
 800037a:	2012      	movs	r0, #18
 800037c:	f7ff ffb0 	bl	80002e0 <__NVIC_EnableIRQ>

	// Start conversion
	ADC1->CR2 |= SWSTART;
 8000380:	4b05      	ldr	r3, [pc, #20]	; (8000398 <pa4_adc_interrupt_init+0x7c>)
 8000382:	689b      	ldr	r3, [r3, #8]
 8000384:	4a04      	ldr	r2, [pc, #16]	; (8000398 <pa4_adc_interrupt_init+0x7c>)
 8000386:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800038a:	6093      	str	r3, [r2, #8]
}
 800038c:	bf00      	nop
 800038e:	bd80      	pop	{r7, pc}
 8000390:	40023800 	.word	0x40023800
 8000394:	40020000 	.word	0x40020000
 8000398:	40012000 	.word	0x40012000

0800039c <set_pin_mode>:
 */

#include "gpio.h"

void set_pin_mode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800039c:	b480      	push	{r7}
 800039e:	b089      	sub	sp, #36	; 0x24
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	60f8      	str	r0, [r7, #12]
 80003a4:	60b9      	str	r1, [r7, #8]
 80003a6:	607a      	str	r2, [r7, #4]
	// set the relevant bit in the mode register
	// CLEARMASK explanation:
	// 0b 11 << 16 (shift 0b11 to position 16 (LSB occupies bit 16, MSB occupies bit 17))
	MODIFY_REG(GPIOx->MODER, (0x3 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80003a8:	68fb      	ldr	r3, [r7, #12]
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	68ba      	ldr	r2, [r7, #8]
 80003ae:	617a      	str	r2, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80003b0:	697a      	ldr	r2, [r7, #20]
 80003b2:	fa92 f2a2 	rbit	r2, r2
 80003b6:	613a      	str	r2, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80003b8:	693a      	ldr	r2, [r7, #16]
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	b2d2      	uxtb	r2, r2
 80003c0:	0052      	lsls	r2, r2, #1
 80003c2:	2103      	movs	r1, #3
 80003c4:	fa01 f202 	lsl.w	r2, r1, r2
 80003c8:	43d2      	mvns	r2, r2
 80003ca:	401a      	ands	r2, r3
 80003cc:	68bb      	ldr	r3, [r7, #8]
 80003ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80003d0:	69fb      	ldr	r3, [r7, #28]
 80003d2:	fa93 f3a3 	rbit	r3, r3
 80003d6:	61bb      	str	r3, [r7, #24]
  return result;
 80003d8:	69bb      	ldr	r3, [r7, #24]
 80003da:	fab3 f383 	clz	r3, r3
 80003de:	b2db      	uxtb	r3, r3
 80003e0:	005b      	lsls	r3, r3, #1
 80003e2:	6879      	ldr	r1, [r7, #4]
 80003e4:	fa01 f303 	lsl.w	r3, r1, r3
 80003e8:	431a      	orrs	r2, r3
 80003ea:	68fb      	ldr	r3, [r7, #12]
 80003ec:	601a      	str	r2, [r3, #0]
}
 80003ee:	bf00      	nop
 80003f0:	3724      	adds	r7, #36	; 0x24
 80003f2:	46bd      	mov	sp, r7
 80003f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f8:	4770      	bx	lr

080003fa <main>:
static void adc_conversion_complete_callback(void);

int sensor_value;

int main(void)
{
 80003fa:	b580      	push	{r7, lr}
 80003fc:	af00      	add	r7, sp, #0
	uart3_tx_init();
 80003fe:	f000 f987 	bl	8000710 <uart3_tx_init>

	pa4_adc_interrupt_init();
 8000402:	f7ff ff8b 	bl	800031c <pa4_adc_interrupt_init>


	while(1)
 8000406:	e7fe      	b.n	8000406 <main+0xc>

08000408 <adc_conversion_complete_callback>:
	}

}

static void adc_conversion_complete_callback(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	af00      	add	r7, sp, #0
	sensor_value = ADC1->DR;
 800040c:	4b06      	ldr	r3, [pc, #24]	; (8000428 <adc_conversion_complete_callback+0x20>)
 800040e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000410:	461a      	mov	r2, r3
 8000412:	4b06      	ldr	r3, [pc, #24]	; (800042c <adc_conversion_complete_callback+0x24>)
 8000414:	601a      	str	r2, [r3, #0]
	printf("sensor value : %d \n\r", sensor_value);
 8000416:	4b05      	ldr	r3, [pc, #20]	; (800042c <adc_conversion_complete_callback+0x24>)
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	4619      	mov	r1, r3
 800041c:	4804      	ldr	r0, [pc, #16]	; (8000430 <adc_conversion_complete_callback+0x28>)
 800041e:	f000 fa93 	bl	8000948 <iprintf>
}
 8000422:	bf00      	nop
 8000424:	bd80      	pop	{r7, pc}
 8000426:	bf00      	nop
 8000428:	40012000 	.word	0x40012000
 800042c:	20000078 	.word	0x20000078
 8000430:	08001648 	.word	0x08001648

08000434 <ADC_IRQHandler>:

void ADC_IRQHandler(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	af00      	add	r7, sp, #0
	// Check if End-of-Conversion Interrupt occurred by checking the End-of-Conversion flag in the ADC Status Register.
	if((ADC1->SR & EOC) == EOC)
 8000438:	4b07      	ldr	r3, [pc, #28]	; (8000458 <ADC_IRQHandler+0x24>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	f003 0302 	and.w	r3, r3, #2
 8000440:	2b02      	cmp	r3, #2
 8000442:	d107      	bne.n	8000454 <ADC_IRQHandler+0x20>
	{
		// Clear the flag.
		ADC1->SR &= ~EOC;
 8000444:	4b04      	ldr	r3, [pc, #16]	; (8000458 <ADC_IRQHandler+0x24>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	4a03      	ldr	r2, [pc, #12]	; (8000458 <ADC_IRQHandler+0x24>)
 800044a:	f023 0302 	bic.w	r3, r3, #2
 800044e:	6013      	str	r3, [r2, #0]
		// Do something.
		adc_conversion_complete_callback();
 8000450:	f7ff ffda 	bl	8000408 <adc_conversion_complete_callback>
	}
}
 8000454:	bf00      	nop
 8000456:	bd80      	pop	{r7, pc}
 8000458:	40012000 	.word	0x40012000

0800045c <set_ahb1_periph_clock>:
 */

#include "rcc.h"

void set_ahb1_periph_clock(uint32_t periphs)
{
 800045c:	b480      	push	{r7}
 800045e:	b083      	sub	sp, #12
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
	SET_BIT(RCC->AHB1ENR, periphs);
 8000464:	4b05      	ldr	r3, [pc, #20]	; (800047c <set_ahb1_periph_clock+0x20>)
 8000466:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000468:	4904      	ldr	r1, [pc, #16]	; (800047c <set_ahb1_periph_clock+0x20>)
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	4313      	orrs	r3, r2
 800046e:	630b      	str	r3, [r1, #48]	; 0x30
}
 8000470:	bf00      	nop
 8000472:	370c      	adds	r7, #12
 8000474:	46bd      	mov	sp, r7
 8000476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047a:	4770      	bx	lr
 800047c:	40023800 	.word	0x40023800

08000480 <set_apb1_periph_clock>:
{
	SET_BIT(RCC->AHB2ENR, periphs);
}

void set_apb1_periph_clock(uint32_t periphs)
{
 8000480:	b480      	push	{r7}
 8000482:	b083      	sub	sp, #12
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
	SET_BIT(RCC->APB1ENR, periphs);
 8000488:	4b05      	ldr	r3, [pc, #20]	; (80004a0 <set_apb1_periph_clock+0x20>)
 800048a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800048c:	4904      	ldr	r1, [pc, #16]	; (80004a0 <set_apb1_periph_clock+0x20>)
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	4313      	orrs	r3, r2
 8000492:	640b      	str	r3, [r1, #64]	; 0x40
}
 8000494:	bf00      	nop
 8000496:	370c      	adds	r7, #12
 8000498:	46bd      	mov	sp, r7
 800049a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049e:	4770      	bx	lr
 80004a0:	40023800 	.word	0x40023800

080004a4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b086      	sub	sp, #24
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	60f8      	str	r0, [r7, #12]
 80004ac:	60b9      	str	r1, [r7, #8]
 80004ae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004b0:	2300      	movs	r3, #0
 80004b2:	617b      	str	r3, [r7, #20]
 80004b4:	e00a      	b.n	80004cc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80004b6:	f3af 8000 	nop.w
 80004ba:	4601      	mov	r1, r0
 80004bc:	68bb      	ldr	r3, [r7, #8]
 80004be:	1c5a      	adds	r2, r3, #1
 80004c0:	60ba      	str	r2, [r7, #8]
 80004c2:	b2ca      	uxtb	r2, r1
 80004c4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004c6:	697b      	ldr	r3, [r7, #20]
 80004c8:	3301      	adds	r3, #1
 80004ca:	617b      	str	r3, [r7, #20]
 80004cc:	697a      	ldr	r2, [r7, #20]
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	429a      	cmp	r2, r3
 80004d2:	dbf0      	blt.n	80004b6 <_read+0x12>
  }

  return len;
 80004d4:	687b      	ldr	r3, [r7, #4]
}
 80004d6:	4618      	mov	r0, r3
 80004d8:	3718      	adds	r7, #24
 80004da:	46bd      	mov	sp, r7
 80004dc:	bd80      	pop	{r7, pc}

080004de <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80004de:	b580      	push	{r7, lr}
 80004e0:	b086      	sub	sp, #24
 80004e2:	af00      	add	r7, sp, #0
 80004e4:	60f8      	str	r0, [r7, #12]
 80004e6:	60b9      	str	r1, [r7, #8]
 80004e8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004ea:	2300      	movs	r3, #0
 80004ec:	617b      	str	r3, [r7, #20]
 80004ee:	e009      	b.n	8000504 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80004f0:	68bb      	ldr	r3, [r7, #8]
 80004f2:	1c5a      	adds	r2, r3, #1
 80004f4:	60ba      	str	r2, [r7, #8]
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	4618      	mov	r0, r3
 80004fa:	f000 f88d 	bl	8000618 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004fe:	697b      	ldr	r3, [r7, #20]
 8000500:	3301      	adds	r3, #1
 8000502:	617b      	str	r3, [r7, #20]
 8000504:	697a      	ldr	r2, [r7, #20]
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	429a      	cmp	r2, r3
 800050a:	dbf1      	blt.n	80004f0 <_write+0x12>
  }
  return len;
 800050c:	687b      	ldr	r3, [r7, #4]
}
 800050e:	4618      	mov	r0, r3
 8000510:	3718      	adds	r7, #24
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}

08000516 <_close>:

int _close(int file)
{
 8000516:	b480      	push	{r7}
 8000518:	b083      	sub	sp, #12
 800051a:	af00      	add	r7, sp, #0
 800051c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800051e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000522:	4618      	mov	r0, r3
 8000524:	370c      	adds	r7, #12
 8000526:	46bd      	mov	sp, r7
 8000528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052c:	4770      	bx	lr

0800052e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800052e:	b480      	push	{r7}
 8000530:	b083      	sub	sp, #12
 8000532:	af00      	add	r7, sp, #0
 8000534:	6078      	str	r0, [r7, #4]
 8000536:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000538:	683b      	ldr	r3, [r7, #0]
 800053a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800053e:	605a      	str	r2, [r3, #4]
  return 0;
 8000540:	2300      	movs	r3, #0
}
 8000542:	4618      	mov	r0, r3
 8000544:	370c      	adds	r7, #12
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr

0800054e <_isatty>:

int _isatty(int file)
{
 800054e:	b480      	push	{r7}
 8000550:	b083      	sub	sp, #12
 8000552:	af00      	add	r7, sp, #0
 8000554:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000556:	2301      	movs	r3, #1
}
 8000558:	4618      	mov	r0, r3
 800055a:	370c      	adds	r7, #12
 800055c:	46bd      	mov	sp, r7
 800055e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000562:	4770      	bx	lr

08000564 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000564:	b480      	push	{r7}
 8000566:	b085      	sub	sp, #20
 8000568:	af00      	add	r7, sp, #0
 800056a:	60f8      	str	r0, [r7, #12]
 800056c:	60b9      	str	r1, [r7, #8]
 800056e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000570:	2300      	movs	r3, #0
}
 8000572:	4618      	mov	r0, r3
 8000574:	3714      	adds	r7, #20
 8000576:	46bd      	mov	sp, r7
 8000578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057c:	4770      	bx	lr
	...

08000580 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b086      	sub	sp, #24
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000588:	4a14      	ldr	r2, [pc, #80]	; (80005dc <_sbrk+0x5c>)
 800058a:	4b15      	ldr	r3, [pc, #84]	; (80005e0 <_sbrk+0x60>)
 800058c:	1ad3      	subs	r3, r2, r3
 800058e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000590:	697b      	ldr	r3, [r7, #20]
 8000592:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000594:	4b13      	ldr	r3, [pc, #76]	; (80005e4 <_sbrk+0x64>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	2b00      	cmp	r3, #0
 800059a:	d102      	bne.n	80005a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800059c:	4b11      	ldr	r3, [pc, #68]	; (80005e4 <_sbrk+0x64>)
 800059e:	4a12      	ldr	r2, [pc, #72]	; (80005e8 <_sbrk+0x68>)
 80005a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005a2:	4b10      	ldr	r3, [pc, #64]	; (80005e4 <_sbrk+0x64>)
 80005a4:	681a      	ldr	r2, [r3, #0]
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	4413      	add	r3, r2
 80005aa:	693a      	ldr	r2, [r7, #16]
 80005ac:	429a      	cmp	r2, r3
 80005ae:	d207      	bcs.n	80005c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005b0:	f000 fa6e 	bl	8000a90 <__errno>
 80005b4:	4603      	mov	r3, r0
 80005b6:	220c      	movs	r2, #12
 80005b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005ba:	f04f 33ff 	mov.w	r3, #4294967295
 80005be:	e009      	b.n	80005d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005c0:	4b08      	ldr	r3, [pc, #32]	; (80005e4 <_sbrk+0x64>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005c6:	4b07      	ldr	r3, [pc, #28]	; (80005e4 <_sbrk+0x64>)
 80005c8:	681a      	ldr	r2, [r3, #0]
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	4413      	add	r3, r2
 80005ce:	4a05      	ldr	r2, [pc, #20]	; (80005e4 <_sbrk+0x64>)
 80005d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005d2:	68fb      	ldr	r3, [r7, #12]
}
 80005d4:	4618      	mov	r0, r3
 80005d6:	3718      	adds	r7, #24
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	20080000 	.word	0x20080000
 80005e0:	00000400 	.word	0x00000400
 80005e4:	2000007c 	.word	0x2000007c
 80005e8:	200001d0 	.word	0x200001d0

080005ec <uart_write>:

#define		GPIODEN					(1U<<3)
#define		GPIO_ALTERNATE_MODE 	0x2

void uart_write(USART_TypeDef *USARTx, uint8_t value)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b083      	sub	sp, #12
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
 80005f4:	460b      	mov	r3, r1
 80005f6:	70fb      	strb	r3, [r7, #3]
	// Make sure transmit data register is empty
	while (!(USARTx->ISR & USART_ISR_TXE)) {}
 80005f8:	bf00      	nop
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	69db      	ldr	r3, [r3, #28]
 80005fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000602:	2b00      	cmp	r3, #0
 8000604:	d0f9      	beq.n	80005fa <uart_write+0xe>

	// Write value into transmit data register
	USARTx->TDR = value;
 8000606:	78fa      	ldrb	r2, [r7, #3]
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	629a      	str	r2, [r3, #40]	; 0x28

}
 800060c:	bf00      	nop
 800060e:	370c      	adds	r7, #12
 8000610:	46bd      	mov	sp, r7
 8000612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000616:	4770      	bx	lr

08000618 <__io_putchar>:

	// Read value out of receive data register
	return (READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
}

int __io_putchar(int ch) {
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
	uart_write(USART3, ch);
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	b2db      	uxtb	r3, r3
 8000624:	4619      	mov	r1, r3
 8000626:	4804      	ldr	r0, [pc, #16]	; (8000638 <__io_putchar+0x20>)
 8000628:	f7ff ffe0 	bl	80005ec <uart_write>
	return ch;
 800062c:	687b      	ldr	r3, [r7, #4]
}
 800062e:	4618      	mov	r0, r3
 8000630:	3708      	adds	r7, #8
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	40004800 	.word	0x40004800

0800063c <uart_enable>:

static void uart_enable(USART_TypeDef *USARTx)
{
 800063c:	b480      	push	{r7}
 800063e:	b083      	sub	sp, #12
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
	SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	f043 0201 	orr.w	r2, r3, #1
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	601a      	str	r2, [r3, #0]
}
 8000650:	bf00      	nop
 8000652:	370c      	adds	r7, #12
 8000654:	46bd      	mov	sp, r7
 8000656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065a:	4770      	bx	lr

0800065c <set_uart_transfer_direction>:

static void set_uart_transfer_direction(USART_TypeDef *USARTx, uint32_t TransferDirection)
{
 800065c:	b480      	push	{r7}
 800065e:	b083      	sub	sp, #12
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
 8000664:	6039      	str	r1, [r7, #0]
	MODIFY_REG(USARTx->CR1, (USART_CR1_RE |USART_CR1_TE), TransferDirection);
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	f023 020c 	bic.w	r2, r3, #12
 800066e:	683b      	ldr	r3, [r7, #0]
 8000670:	431a      	orrs	r2, r3
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	601a      	str	r2, [r3, #0]
}
 8000676:	bf00      	nop
 8000678:	370c      	adds	r7, #12
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr

08000682 <compute_uart_div>:

static uint16_t compute_uart_div(uint32_t PeriphClk, uint32_t BaudRate)
{
 8000682:	b480      	push	{r7}
 8000684:	b083      	sub	sp, #12
 8000686:	af00      	add	r7, sp, #0
 8000688:	6078      	str	r0, [r7, #4]
 800068a:	6039      	str	r1, [r7, #0]
	return (PeriphClk + (BaudRate/2U))/BaudRate;
 800068c:	683b      	ldr	r3, [r7, #0]
 800068e:	085a      	lsrs	r2, r3, #1
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	441a      	add	r2, r3
 8000694:	683b      	ldr	r3, [r7, #0]
 8000696:	fbb2 f3f3 	udiv	r3, r2, r3
 800069a:	b29b      	uxth	r3, r3
}
 800069c:	4618      	mov	r0, r3
 800069e:	370c      	adds	r7, #12
 80006a0:	46bd      	mov	sp, r7
 80006a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a6:	4770      	bx	lr

080006a8 <uart_set_baudrate>:

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	60f8      	str	r0, [r7, #12]
 80006b0:	60b9      	str	r1, [r7, #8]
 80006b2:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_div(PeriphClk, BaudRate);
 80006b4:	6879      	ldr	r1, [r7, #4]
 80006b6:	68b8      	ldr	r0, [r7, #8]
 80006b8:	f7ff ffe3 	bl	8000682 <compute_uart_div>
 80006bc:	4603      	mov	r3, r0
 80006be:	461a      	mov	r2, r3
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	60da      	str	r2, [r3, #12]
}
 80006c4:	bf00      	nop
 80006c6:	3710      	adds	r7, #16
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}

080006cc <config_uart_parameters>:

static void config_uart_parameters(USART_TypeDef *USARTx, uint32_t DataWidth, uint32_t Parity, uint32_t StopBits)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b085      	sub	sp, #20
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	60f8      	str	r0, [r7, #12]
 80006d4:	60b9      	str	r1, [r7, #8]
 80006d6:	607a      	str	r2, [r7, #4]
 80006d8:	603b      	str	r3, [r7, #0]
	MODIFY_REG(USARTx->CR1, (USART_CR1_PS | USART_CR1_PCE | USART_CR1_M), Parity | DataWidth);
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	681a      	ldr	r2, [r3, #0]
 80006de:	4b0b      	ldr	r3, [pc, #44]	; (800070c <config_uart_parameters+0x40>)
 80006e0:	4013      	ands	r3, r2
 80006e2:	6879      	ldr	r1, [r7, #4]
 80006e4:	68ba      	ldr	r2, [r7, #8]
 80006e6:	430a      	orrs	r2, r1
 80006e8:	431a      	orrs	r2, r3
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	601a      	str	r2, [r3, #0]
	MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	685b      	ldr	r3, [r3, #4]
 80006f2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80006f6:	683b      	ldr	r3, [r7, #0]
 80006f8:	431a      	orrs	r2, r3
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	605a      	str	r2, [r3, #4]
}
 80006fe:	bf00      	nop
 8000700:	3714      	adds	r7, #20
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	efffe9ff 	.word	0xefffe9ff

08000710 <uart3_tx_init>:

void uart3_tx_init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
	// To get pin ready as USART pin:
	// 1. Enable clock access to GPIOD
	set_ahb1_periph_clock(GPIODEN);
 8000714:	2008      	movs	r0, #8
 8000716:	f7ff fea1 	bl	800045c <set_ahb1_periph_clock>

	// 2. Set PD8 mode to alternate function
	set_pin_mode(GPIOD, UART3_TX, GPIO_ALTERNATE_MODE);
 800071a:	2202      	movs	r2, #2
 800071c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000720:	4819      	ldr	r0, [pc, #100]	; (8000788 <uart3_tx_init+0x78>)
 8000722:	f7ff fe3b 	bl	800039c <set_pin_mode>

	// 3. Set alternate function type to USART for PD8
	GPIOD->AFR[1] |= (1U<<0);
 8000726:	4b18      	ldr	r3, [pc, #96]	; (8000788 <uart3_tx_init+0x78>)
 8000728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800072a:	4a17      	ldr	r2, [pc, #92]	; (8000788 <uart3_tx_init+0x78>)
 800072c:	f043 0301 	orr.w	r3, r3, #1
 8000730:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOD->AFR[1] |= (1U<<1);
 8000732:	4b15      	ldr	r3, [pc, #84]	; (8000788 <uart3_tx_init+0x78>)
 8000734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000736:	4a14      	ldr	r2, [pc, #80]	; (8000788 <uart3_tx_init+0x78>)
 8000738:	f043 0302 	orr.w	r3, r3, #2
 800073c:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOD->AFR[1] |= (1U<<2);
 800073e:	4b12      	ldr	r3, [pc, #72]	; (8000788 <uart3_tx_init+0x78>)
 8000740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000742:	4a11      	ldr	r2, [pc, #68]	; (8000788 <uart3_tx_init+0x78>)
 8000744:	f043 0304 	orr.w	r3, r3, #4
 8000748:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOD->AFR[1] &= ~(1U<<3);
 800074a:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <uart3_tx_init+0x78>)
 800074c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800074e:	4a0e      	ldr	r2, [pc, #56]	; (8000788 <uart3_tx_init+0x78>)
 8000750:	f023 0308 	bic.w	r3, r3, #8
 8000754:	6253      	str	r3, [r2, #36]	; 0x24

	// To get USART/UART peripheral ready:
	// Enable clock to USART3 module
	set_apb1_periph_clock(USART3EN);
 8000756:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800075a:	f7ff fe91 	bl	8000480 <set_apb1_periph_clock>

	// Configure USART parameters
	config_uart_parameters(USART3, UART_DATAWIDTH_8B, UART_PARITY_NONE, UART_STOPBITS_1);
 800075e:	2300      	movs	r3, #0
 8000760:	2200      	movs	r2, #0
 8000762:	2100      	movs	r1, #0
 8000764:	4809      	ldr	r0, [pc, #36]	; (800078c <uart3_tx_init+0x7c>)
 8000766:	f7ff ffb1 	bl	80006cc <config_uart_parameters>
	set_uart_transfer_direction(USART3, USART_CR1_TE);
 800076a:	2108      	movs	r1, #8
 800076c:	4807      	ldr	r0, [pc, #28]	; (800078c <uart3_tx_init+0x7c>)
 800076e:	f7ff ff75 	bl	800065c <set_uart_transfer_direction>

	// Set baudrate
	uart_set_baudrate(USART3, 16000000, 57600);
 8000772:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000776:	4906      	ldr	r1, [pc, #24]	; (8000790 <uart3_tx_init+0x80>)
 8000778:	4804      	ldr	r0, [pc, #16]	; (800078c <uart3_tx_init+0x7c>)
 800077a:	f7ff ff95 	bl	80006a8 <uart_set_baudrate>

	// Enable USART
	//USART3->CR1 |= USART_CR1_UE;
	uart_enable(USART3);
 800077e:	4803      	ldr	r0, [pc, #12]	; (800078c <uart3_tx_init+0x7c>)
 8000780:	f7ff ff5c 	bl	800063c <uart_enable>
}
 8000784:	bf00      	nop
 8000786:	bd80      	pop	{r7, pc}
 8000788:	40020c00 	.word	0x40020c00
 800078c:	40004800 	.word	0x40004800
 8000790:	00f42400 	.word	0x00f42400

08000794 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000794:	480d      	ldr	r0, [pc, #52]	; (80007cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000796:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000798:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800079c:	480c      	ldr	r0, [pc, #48]	; (80007d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800079e:	490d      	ldr	r1, [pc, #52]	; (80007d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007a0:	4a0d      	ldr	r2, [pc, #52]	; (80007d8 <LoopForever+0xe>)
  movs r3, #0
 80007a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007a4:	e002      	b.n	80007ac <LoopCopyDataInit>

080007a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007aa:	3304      	adds	r3, #4

080007ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007b0:	d3f9      	bcc.n	80007a6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007b2:	4a0a      	ldr	r2, [pc, #40]	; (80007dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80007b4:	4c0a      	ldr	r4, [pc, #40]	; (80007e0 <LoopForever+0x16>)
  movs r3, #0
 80007b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007b8:	e001      	b.n	80007be <LoopFillZerobss>

080007ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007bc:	3204      	adds	r2, #4

080007be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007c0:	d3fb      	bcc.n	80007ba <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80007c2:	f000 f96b 	bl	8000a9c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007c6:	f7ff fe18 	bl	80003fa <main>

080007ca <LoopForever>:

LoopForever:
  b LoopForever
 80007ca:	e7fe      	b.n	80007ca <LoopForever>
  ldr   r0, =_estack
 80007cc:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80007d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007d4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80007d8:	08001698 	.word	0x08001698
  ldr r2, =_sbss
 80007dc:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80007e0:	200001cc 	.word	0x200001cc

080007e4 <BusFault_Handler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007e4:	e7fe      	b.n	80007e4 <BusFault_Handler>
	...

080007e8 <std>:
 80007e8:	2300      	movs	r3, #0
 80007ea:	b510      	push	{r4, lr}
 80007ec:	4604      	mov	r4, r0
 80007ee:	e9c0 3300 	strd	r3, r3, [r0]
 80007f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80007f6:	6083      	str	r3, [r0, #8]
 80007f8:	8181      	strh	r1, [r0, #12]
 80007fa:	6643      	str	r3, [r0, #100]	; 0x64
 80007fc:	81c2      	strh	r2, [r0, #14]
 80007fe:	6183      	str	r3, [r0, #24]
 8000800:	4619      	mov	r1, r3
 8000802:	2208      	movs	r2, #8
 8000804:	305c      	adds	r0, #92	; 0x5c
 8000806:	f000 f8f4 	bl	80009f2 <memset>
 800080a:	4b05      	ldr	r3, [pc, #20]	; (8000820 <std+0x38>)
 800080c:	6263      	str	r3, [r4, #36]	; 0x24
 800080e:	4b05      	ldr	r3, [pc, #20]	; (8000824 <std+0x3c>)
 8000810:	62a3      	str	r3, [r4, #40]	; 0x28
 8000812:	4b05      	ldr	r3, [pc, #20]	; (8000828 <std+0x40>)
 8000814:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000816:	4b05      	ldr	r3, [pc, #20]	; (800082c <std+0x44>)
 8000818:	6224      	str	r4, [r4, #32]
 800081a:	6323      	str	r3, [r4, #48]	; 0x30
 800081c:	bd10      	pop	{r4, pc}
 800081e:	bf00      	nop
 8000820:	0800096d 	.word	0x0800096d
 8000824:	0800098f 	.word	0x0800098f
 8000828:	080009c7 	.word	0x080009c7
 800082c:	080009eb 	.word	0x080009eb

08000830 <stdio_exit_handler>:
 8000830:	4a02      	ldr	r2, [pc, #8]	; (800083c <stdio_exit_handler+0xc>)
 8000832:	4903      	ldr	r1, [pc, #12]	; (8000840 <stdio_exit_handler+0x10>)
 8000834:	4803      	ldr	r0, [pc, #12]	; (8000844 <stdio_exit_handler+0x14>)
 8000836:	f000 b869 	b.w	800090c <_fwalk_sglue>
 800083a:	bf00      	nop
 800083c:	20000000 	.word	0x20000000
 8000840:	0800138d 	.word	0x0800138d
 8000844:	2000000c 	.word	0x2000000c

08000848 <cleanup_stdio>:
 8000848:	6841      	ldr	r1, [r0, #4]
 800084a:	4b0c      	ldr	r3, [pc, #48]	; (800087c <cleanup_stdio+0x34>)
 800084c:	4299      	cmp	r1, r3
 800084e:	b510      	push	{r4, lr}
 8000850:	4604      	mov	r4, r0
 8000852:	d001      	beq.n	8000858 <cleanup_stdio+0x10>
 8000854:	f000 fd9a 	bl	800138c <_fflush_r>
 8000858:	68a1      	ldr	r1, [r4, #8]
 800085a:	4b09      	ldr	r3, [pc, #36]	; (8000880 <cleanup_stdio+0x38>)
 800085c:	4299      	cmp	r1, r3
 800085e:	d002      	beq.n	8000866 <cleanup_stdio+0x1e>
 8000860:	4620      	mov	r0, r4
 8000862:	f000 fd93 	bl	800138c <_fflush_r>
 8000866:	68e1      	ldr	r1, [r4, #12]
 8000868:	4b06      	ldr	r3, [pc, #24]	; (8000884 <cleanup_stdio+0x3c>)
 800086a:	4299      	cmp	r1, r3
 800086c:	d004      	beq.n	8000878 <cleanup_stdio+0x30>
 800086e:	4620      	mov	r0, r4
 8000870:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000874:	f000 bd8a 	b.w	800138c <_fflush_r>
 8000878:	bd10      	pop	{r4, pc}
 800087a:	bf00      	nop
 800087c:	20000080 	.word	0x20000080
 8000880:	200000e8 	.word	0x200000e8
 8000884:	20000150 	.word	0x20000150

08000888 <global_stdio_init.part.0>:
 8000888:	b510      	push	{r4, lr}
 800088a:	4b0b      	ldr	r3, [pc, #44]	; (80008b8 <global_stdio_init.part.0+0x30>)
 800088c:	4c0b      	ldr	r4, [pc, #44]	; (80008bc <global_stdio_init.part.0+0x34>)
 800088e:	4a0c      	ldr	r2, [pc, #48]	; (80008c0 <global_stdio_init.part.0+0x38>)
 8000890:	601a      	str	r2, [r3, #0]
 8000892:	4620      	mov	r0, r4
 8000894:	2200      	movs	r2, #0
 8000896:	2104      	movs	r1, #4
 8000898:	f7ff ffa6 	bl	80007e8 <std>
 800089c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80008a0:	2201      	movs	r2, #1
 80008a2:	2109      	movs	r1, #9
 80008a4:	f7ff ffa0 	bl	80007e8 <std>
 80008a8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80008ac:	2202      	movs	r2, #2
 80008ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80008b2:	2112      	movs	r1, #18
 80008b4:	f7ff bf98 	b.w	80007e8 <std>
 80008b8:	200001b8 	.word	0x200001b8
 80008bc:	20000080 	.word	0x20000080
 80008c0:	08000831 	.word	0x08000831

080008c4 <__sfp_lock_acquire>:
 80008c4:	4801      	ldr	r0, [pc, #4]	; (80008cc <__sfp_lock_acquire+0x8>)
 80008c6:	f000 b90d 	b.w	8000ae4 <__retarget_lock_acquire_recursive>
 80008ca:	bf00      	nop
 80008cc:	200001c1 	.word	0x200001c1

080008d0 <__sfp_lock_release>:
 80008d0:	4801      	ldr	r0, [pc, #4]	; (80008d8 <__sfp_lock_release+0x8>)
 80008d2:	f000 b908 	b.w	8000ae6 <__retarget_lock_release_recursive>
 80008d6:	bf00      	nop
 80008d8:	200001c1 	.word	0x200001c1

080008dc <__sinit>:
 80008dc:	b510      	push	{r4, lr}
 80008de:	4604      	mov	r4, r0
 80008e0:	f7ff fff0 	bl	80008c4 <__sfp_lock_acquire>
 80008e4:	6a23      	ldr	r3, [r4, #32]
 80008e6:	b11b      	cbz	r3, 80008f0 <__sinit+0x14>
 80008e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80008ec:	f7ff bff0 	b.w	80008d0 <__sfp_lock_release>
 80008f0:	4b04      	ldr	r3, [pc, #16]	; (8000904 <__sinit+0x28>)
 80008f2:	6223      	str	r3, [r4, #32]
 80008f4:	4b04      	ldr	r3, [pc, #16]	; (8000908 <__sinit+0x2c>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d1f5      	bne.n	80008e8 <__sinit+0xc>
 80008fc:	f7ff ffc4 	bl	8000888 <global_stdio_init.part.0>
 8000900:	e7f2      	b.n	80008e8 <__sinit+0xc>
 8000902:	bf00      	nop
 8000904:	08000849 	.word	0x08000849
 8000908:	200001b8 	.word	0x200001b8

0800090c <_fwalk_sglue>:
 800090c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000910:	4607      	mov	r7, r0
 8000912:	4688      	mov	r8, r1
 8000914:	4614      	mov	r4, r2
 8000916:	2600      	movs	r6, #0
 8000918:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800091c:	f1b9 0901 	subs.w	r9, r9, #1
 8000920:	d505      	bpl.n	800092e <_fwalk_sglue+0x22>
 8000922:	6824      	ldr	r4, [r4, #0]
 8000924:	2c00      	cmp	r4, #0
 8000926:	d1f7      	bne.n	8000918 <_fwalk_sglue+0xc>
 8000928:	4630      	mov	r0, r6
 800092a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800092e:	89ab      	ldrh	r3, [r5, #12]
 8000930:	2b01      	cmp	r3, #1
 8000932:	d907      	bls.n	8000944 <_fwalk_sglue+0x38>
 8000934:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000938:	3301      	adds	r3, #1
 800093a:	d003      	beq.n	8000944 <_fwalk_sglue+0x38>
 800093c:	4629      	mov	r1, r5
 800093e:	4638      	mov	r0, r7
 8000940:	47c0      	blx	r8
 8000942:	4306      	orrs	r6, r0
 8000944:	3568      	adds	r5, #104	; 0x68
 8000946:	e7e9      	b.n	800091c <_fwalk_sglue+0x10>

08000948 <iprintf>:
 8000948:	b40f      	push	{r0, r1, r2, r3}
 800094a:	b507      	push	{r0, r1, r2, lr}
 800094c:	4906      	ldr	r1, [pc, #24]	; (8000968 <iprintf+0x20>)
 800094e:	ab04      	add	r3, sp, #16
 8000950:	6808      	ldr	r0, [r1, #0]
 8000952:	f853 2b04 	ldr.w	r2, [r3], #4
 8000956:	6881      	ldr	r1, [r0, #8]
 8000958:	9301      	str	r3, [sp, #4]
 800095a:	f000 f9e7 	bl	8000d2c <_vfiprintf_r>
 800095e:	b003      	add	sp, #12
 8000960:	f85d eb04 	ldr.w	lr, [sp], #4
 8000964:	b004      	add	sp, #16
 8000966:	4770      	bx	lr
 8000968:	20000058 	.word	0x20000058

0800096c <__sread>:
 800096c:	b510      	push	{r4, lr}
 800096e:	460c      	mov	r4, r1
 8000970:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000974:	f000 f868 	bl	8000a48 <_read_r>
 8000978:	2800      	cmp	r0, #0
 800097a:	bfab      	itete	ge
 800097c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800097e:	89a3      	ldrhlt	r3, [r4, #12]
 8000980:	181b      	addge	r3, r3, r0
 8000982:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000986:	bfac      	ite	ge
 8000988:	6563      	strge	r3, [r4, #84]	; 0x54
 800098a:	81a3      	strhlt	r3, [r4, #12]
 800098c:	bd10      	pop	{r4, pc}

0800098e <__swrite>:
 800098e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000992:	461f      	mov	r7, r3
 8000994:	898b      	ldrh	r3, [r1, #12]
 8000996:	05db      	lsls	r3, r3, #23
 8000998:	4605      	mov	r5, r0
 800099a:	460c      	mov	r4, r1
 800099c:	4616      	mov	r6, r2
 800099e:	d505      	bpl.n	80009ac <__swrite+0x1e>
 80009a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80009a4:	2302      	movs	r3, #2
 80009a6:	2200      	movs	r2, #0
 80009a8:	f000 f83c 	bl	8000a24 <_lseek_r>
 80009ac:	89a3      	ldrh	r3, [r4, #12]
 80009ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80009b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80009b6:	81a3      	strh	r3, [r4, #12]
 80009b8:	4632      	mov	r2, r6
 80009ba:	463b      	mov	r3, r7
 80009bc:	4628      	mov	r0, r5
 80009be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80009c2:	f000 b853 	b.w	8000a6c <_write_r>

080009c6 <__sseek>:
 80009c6:	b510      	push	{r4, lr}
 80009c8:	460c      	mov	r4, r1
 80009ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80009ce:	f000 f829 	bl	8000a24 <_lseek_r>
 80009d2:	1c43      	adds	r3, r0, #1
 80009d4:	89a3      	ldrh	r3, [r4, #12]
 80009d6:	bf15      	itete	ne
 80009d8:	6560      	strne	r0, [r4, #84]	; 0x54
 80009da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80009de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80009e2:	81a3      	strheq	r3, [r4, #12]
 80009e4:	bf18      	it	ne
 80009e6:	81a3      	strhne	r3, [r4, #12]
 80009e8:	bd10      	pop	{r4, pc}

080009ea <__sclose>:
 80009ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80009ee:	f000 b809 	b.w	8000a04 <_close_r>

080009f2 <memset>:
 80009f2:	4402      	add	r2, r0
 80009f4:	4603      	mov	r3, r0
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d100      	bne.n	80009fc <memset+0xa>
 80009fa:	4770      	bx	lr
 80009fc:	f803 1b01 	strb.w	r1, [r3], #1
 8000a00:	e7f9      	b.n	80009f6 <memset+0x4>
	...

08000a04 <_close_r>:
 8000a04:	b538      	push	{r3, r4, r5, lr}
 8000a06:	4d06      	ldr	r5, [pc, #24]	; (8000a20 <_close_r+0x1c>)
 8000a08:	2300      	movs	r3, #0
 8000a0a:	4604      	mov	r4, r0
 8000a0c:	4608      	mov	r0, r1
 8000a0e:	602b      	str	r3, [r5, #0]
 8000a10:	f7ff fd81 	bl	8000516 <_close>
 8000a14:	1c43      	adds	r3, r0, #1
 8000a16:	d102      	bne.n	8000a1e <_close_r+0x1a>
 8000a18:	682b      	ldr	r3, [r5, #0]
 8000a1a:	b103      	cbz	r3, 8000a1e <_close_r+0x1a>
 8000a1c:	6023      	str	r3, [r4, #0]
 8000a1e:	bd38      	pop	{r3, r4, r5, pc}
 8000a20:	200001bc 	.word	0x200001bc

08000a24 <_lseek_r>:
 8000a24:	b538      	push	{r3, r4, r5, lr}
 8000a26:	4d07      	ldr	r5, [pc, #28]	; (8000a44 <_lseek_r+0x20>)
 8000a28:	4604      	mov	r4, r0
 8000a2a:	4608      	mov	r0, r1
 8000a2c:	4611      	mov	r1, r2
 8000a2e:	2200      	movs	r2, #0
 8000a30:	602a      	str	r2, [r5, #0]
 8000a32:	461a      	mov	r2, r3
 8000a34:	f7ff fd96 	bl	8000564 <_lseek>
 8000a38:	1c43      	adds	r3, r0, #1
 8000a3a:	d102      	bne.n	8000a42 <_lseek_r+0x1e>
 8000a3c:	682b      	ldr	r3, [r5, #0]
 8000a3e:	b103      	cbz	r3, 8000a42 <_lseek_r+0x1e>
 8000a40:	6023      	str	r3, [r4, #0]
 8000a42:	bd38      	pop	{r3, r4, r5, pc}
 8000a44:	200001bc 	.word	0x200001bc

08000a48 <_read_r>:
 8000a48:	b538      	push	{r3, r4, r5, lr}
 8000a4a:	4d07      	ldr	r5, [pc, #28]	; (8000a68 <_read_r+0x20>)
 8000a4c:	4604      	mov	r4, r0
 8000a4e:	4608      	mov	r0, r1
 8000a50:	4611      	mov	r1, r2
 8000a52:	2200      	movs	r2, #0
 8000a54:	602a      	str	r2, [r5, #0]
 8000a56:	461a      	mov	r2, r3
 8000a58:	f7ff fd24 	bl	80004a4 <_read>
 8000a5c:	1c43      	adds	r3, r0, #1
 8000a5e:	d102      	bne.n	8000a66 <_read_r+0x1e>
 8000a60:	682b      	ldr	r3, [r5, #0]
 8000a62:	b103      	cbz	r3, 8000a66 <_read_r+0x1e>
 8000a64:	6023      	str	r3, [r4, #0]
 8000a66:	bd38      	pop	{r3, r4, r5, pc}
 8000a68:	200001bc 	.word	0x200001bc

08000a6c <_write_r>:
 8000a6c:	b538      	push	{r3, r4, r5, lr}
 8000a6e:	4d07      	ldr	r5, [pc, #28]	; (8000a8c <_write_r+0x20>)
 8000a70:	4604      	mov	r4, r0
 8000a72:	4608      	mov	r0, r1
 8000a74:	4611      	mov	r1, r2
 8000a76:	2200      	movs	r2, #0
 8000a78:	602a      	str	r2, [r5, #0]
 8000a7a:	461a      	mov	r2, r3
 8000a7c:	f7ff fd2f 	bl	80004de <_write>
 8000a80:	1c43      	adds	r3, r0, #1
 8000a82:	d102      	bne.n	8000a8a <_write_r+0x1e>
 8000a84:	682b      	ldr	r3, [r5, #0]
 8000a86:	b103      	cbz	r3, 8000a8a <_write_r+0x1e>
 8000a88:	6023      	str	r3, [r4, #0]
 8000a8a:	bd38      	pop	{r3, r4, r5, pc}
 8000a8c:	200001bc 	.word	0x200001bc

08000a90 <__errno>:
 8000a90:	4b01      	ldr	r3, [pc, #4]	; (8000a98 <__errno+0x8>)
 8000a92:	6818      	ldr	r0, [r3, #0]
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	20000058 	.word	0x20000058

08000a9c <__libc_init_array>:
 8000a9c:	b570      	push	{r4, r5, r6, lr}
 8000a9e:	4d0d      	ldr	r5, [pc, #52]	; (8000ad4 <__libc_init_array+0x38>)
 8000aa0:	4c0d      	ldr	r4, [pc, #52]	; (8000ad8 <__libc_init_array+0x3c>)
 8000aa2:	1b64      	subs	r4, r4, r5
 8000aa4:	10a4      	asrs	r4, r4, #2
 8000aa6:	2600      	movs	r6, #0
 8000aa8:	42a6      	cmp	r6, r4
 8000aaa:	d109      	bne.n	8000ac0 <__libc_init_array+0x24>
 8000aac:	4d0b      	ldr	r5, [pc, #44]	; (8000adc <__libc_init_array+0x40>)
 8000aae:	4c0c      	ldr	r4, [pc, #48]	; (8000ae0 <__libc_init_array+0x44>)
 8000ab0:	f000 fdbe 	bl	8001630 <_init>
 8000ab4:	1b64      	subs	r4, r4, r5
 8000ab6:	10a4      	asrs	r4, r4, #2
 8000ab8:	2600      	movs	r6, #0
 8000aba:	42a6      	cmp	r6, r4
 8000abc:	d105      	bne.n	8000aca <__libc_init_array+0x2e>
 8000abe:	bd70      	pop	{r4, r5, r6, pc}
 8000ac0:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ac4:	4798      	blx	r3
 8000ac6:	3601      	adds	r6, #1
 8000ac8:	e7ee      	b.n	8000aa8 <__libc_init_array+0xc>
 8000aca:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ace:	4798      	blx	r3
 8000ad0:	3601      	adds	r6, #1
 8000ad2:	e7f2      	b.n	8000aba <__libc_init_array+0x1e>
 8000ad4:	08001690 	.word	0x08001690
 8000ad8:	08001690 	.word	0x08001690
 8000adc:	08001690 	.word	0x08001690
 8000ae0:	08001694 	.word	0x08001694

08000ae4 <__retarget_lock_acquire_recursive>:
 8000ae4:	4770      	bx	lr

08000ae6 <__retarget_lock_release_recursive>:
 8000ae6:	4770      	bx	lr

08000ae8 <_free_r>:
 8000ae8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000aea:	2900      	cmp	r1, #0
 8000aec:	d044      	beq.n	8000b78 <_free_r+0x90>
 8000aee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000af2:	9001      	str	r0, [sp, #4]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	f1a1 0404 	sub.w	r4, r1, #4
 8000afa:	bfb8      	it	lt
 8000afc:	18e4      	addlt	r4, r4, r3
 8000afe:	f000 f8df 	bl	8000cc0 <__malloc_lock>
 8000b02:	4a1e      	ldr	r2, [pc, #120]	; (8000b7c <_free_r+0x94>)
 8000b04:	9801      	ldr	r0, [sp, #4]
 8000b06:	6813      	ldr	r3, [r2, #0]
 8000b08:	b933      	cbnz	r3, 8000b18 <_free_r+0x30>
 8000b0a:	6063      	str	r3, [r4, #4]
 8000b0c:	6014      	str	r4, [r2, #0]
 8000b0e:	b003      	add	sp, #12
 8000b10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000b14:	f000 b8da 	b.w	8000ccc <__malloc_unlock>
 8000b18:	42a3      	cmp	r3, r4
 8000b1a:	d908      	bls.n	8000b2e <_free_r+0x46>
 8000b1c:	6825      	ldr	r5, [r4, #0]
 8000b1e:	1961      	adds	r1, r4, r5
 8000b20:	428b      	cmp	r3, r1
 8000b22:	bf01      	itttt	eq
 8000b24:	6819      	ldreq	r1, [r3, #0]
 8000b26:	685b      	ldreq	r3, [r3, #4]
 8000b28:	1949      	addeq	r1, r1, r5
 8000b2a:	6021      	streq	r1, [r4, #0]
 8000b2c:	e7ed      	b.n	8000b0a <_free_r+0x22>
 8000b2e:	461a      	mov	r2, r3
 8000b30:	685b      	ldr	r3, [r3, #4]
 8000b32:	b10b      	cbz	r3, 8000b38 <_free_r+0x50>
 8000b34:	42a3      	cmp	r3, r4
 8000b36:	d9fa      	bls.n	8000b2e <_free_r+0x46>
 8000b38:	6811      	ldr	r1, [r2, #0]
 8000b3a:	1855      	adds	r5, r2, r1
 8000b3c:	42a5      	cmp	r5, r4
 8000b3e:	d10b      	bne.n	8000b58 <_free_r+0x70>
 8000b40:	6824      	ldr	r4, [r4, #0]
 8000b42:	4421      	add	r1, r4
 8000b44:	1854      	adds	r4, r2, r1
 8000b46:	42a3      	cmp	r3, r4
 8000b48:	6011      	str	r1, [r2, #0]
 8000b4a:	d1e0      	bne.n	8000b0e <_free_r+0x26>
 8000b4c:	681c      	ldr	r4, [r3, #0]
 8000b4e:	685b      	ldr	r3, [r3, #4]
 8000b50:	6053      	str	r3, [r2, #4]
 8000b52:	440c      	add	r4, r1
 8000b54:	6014      	str	r4, [r2, #0]
 8000b56:	e7da      	b.n	8000b0e <_free_r+0x26>
 8000b58:	d902      	bls.n	8000b60 <_free_r+0x78>
 8000b5a:	230c      	movs	r3, #12
 8000b5c:	6003      	str	r3, [r0, #0]
 8000b5e:	e7d6      	b.n	8000b0e <_free_r+0x26>
 8000b60:	6825      	ldr	r5, [r4, #0]
 8000b62:	1961      	adds	r1, r4, r5
 8000b64:	428b      	cmp	r3, r1
 8000b66:	bf04      	itt	eq
 8000b68:	6819      	ldreq	r1, [r3, #0]
 8000b6a:	685b      	ldreq	r3, [r3, #4]
 8000b6c:	6063      	str	r3, [r4, #4]
 8000b6e:	bf04      	itt	eq
 8000b70:	1949      	addeq	r1, r1, r5
 8000b72:	6021      	streq	r1, [r4, #0]
 8000b74:	6054      	str	r4, [r2, #4]
 8000b76:	e7ca      	b.n	8000b0e <_free_r+0x26>
 8000b78:	b003      	add	sp, #12
 8000b7a:	bd30      	pop	{r4, r5, pc}
 8000b7c:	200001c4 	.word	0x200001c4

08000b80 <sbrk_aligned>:
 8000b80:	b570      	push	{r4, r5, r6, lr}
 8000b82:	4e0e      	ldr	r6, [pc, #56]	; (8000bbc <sbrk_aligned+0x3c>)
 8000b84:	460c      	mov	r4, r1
 8000b86:	6831      	ldr	r1, [r6, #0]
 8000b88:	4605      	mov	r5, r0
 8000b8a:	b911      	cbnz	r1, 8000b92 <sbrk_aligned+0x12>
 8000b8c:	f000 fcbc 	bl	8001508 <_sbrk_r>
 8000b90:	6030      	str	r0, [r6, #0]
 8000b92:	4621      	mov	r1, r4
 8000b94:	4628      	mov	r0, r5
 8000b96:	f000 fcb7 	bl	8001508 <_sbrk_r>
 8000b9a:	1c43      	adds	r3, r0, #1
 8000b9c:	d00a      	beq.n	8000bb4 <sbrk_aligned+0x34>
 8000b9e:	1cc4      	adds	r4, r0, #3
 8000ba0:	f024 0403 	bic.w	r4, r4, #3
 8000ba4:	42a0      	cmp	r0, r4
 8000ba6:	d007      	beq.n	8000bb8 <sbrk_aligned+0x38>
 8000ba8:	1a21      	subs	r1, r4, r0
 8000baa:	4628      	mov	r0, r5
 8000bac:	f000 fcac 	bl	8001508 <_sbrk_r>
 8000bb0:	3001      	adds	r0, #1
 8000bb2:	d101      	bne.n	8000bb8 <sbrk_aligned+0x38>
 8000bb4:	f04f 34ff 	mov.w	r4, #4294967295
 8000bb8:	4620      	mov	r0, r4
 8000bba:	bd70      	pop	{r4, r5, r6, pc}
 8000bbc:	200001c8 	.word	0x200001c8

08000bc0 <_malloc_r>:
 8000bc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000bc4:	1ccd      	adds	r5, r1, #3
 8000bc6:	f025 0503 	bic.w	r5, r5, #3
 8000bca:	3508      	adds	r5, #8
 8000bcc:	2d0c      	cmp	r5, #12
 8000bce:	bf38      	it	cc
 8000bd0:	250c      	movcc	r5, #12
 8000bd2:	2d00      	cmp	r5, #0
 8000bd4:	4607      	mov	r7, r0
 8000bd6:	db01      	blt.n	8000bdc <_malloc_r+0x1c>
 8000bd8:	42a9      	cmp	r1, r5
 8000bda:	d905      	bls.n	8000be8 <_malloc_r+0x28>
 8000bdc:	230c      	movs	r3, #12
 8000bde:	603b      	str	r3, [r7, #0]
 8000be0:	2600      	movs	r6, #0
 8000be2:	4630      	mov	r0, r6
 8000be4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000be8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8000cbc <_malloc_r+0xfc>
 8000bec:	f000 f868 	bl	8000cc0 <__malloc_lock>
 8000bf0:	f8d8 3000 	ldr.w	r3, [r8]
 8000bf4:	461c      	mov	r4, r3
 8000bf6:	bb5c      	cbnz	r4, 8000c50 <_malloc_r+0x90>
 8000bf8:	4629      	mov	r1, r5
 8000bfa:	4638      	mov	r0, r7
 8000bfc:	f7ff ffc0 	bl	8000b80 <sbrk_aligned>
 8000c00:	1c43      	adds	r3, r0, #1
 8000c02:	4604      	mov	r4, r0
 8000c04:	d155      	bne.n	8000cb2 <_malloc_r+0xf2>
 8000c06:	f8d8 4000 	ldr.w	r4, [r8]
 8000c0a:	4626      	mov	r6, r4
 8000c0c:	2e00      	cmp	r6, #0
 8000c0e:	d145      	bne.n	8000c9c <_malloc_r+0xdc>
 8000c10:	2c00      	cmp	r4, #0
 8000c12:	d048      	beq.n	8000ca6 <_malloc_r+0xe6>
 8000c14:	6823      	ldr	r3, [r4, #0]
 8000c16:	4631      	mov	r1, r6
 8000c18:	4638      	mov	r0, r7
 8000c1a:	eb04 0903 	add.w	r9, r4, r3
 8000c1e:	f000 fc73 	bl	8001508 <_sbrk_r>
 8000c22:	4581      	cmp	r9, r0
 8000c24:	d13f      	bne.n	8000ca6 <_malloc_r+0xe6>
 8000c26:	6821      	ldr	r1, [r4, #0]
 8000c28:	1a6d      	subs	r5, r5, r1
 8000c2a:	4629      	mov	r1, r5
 8000c2c:	4638      	mov	r0, r7
 8000c2e:	f7ff ffa7 	bl	8000b80 <sbrk_aligned>
 8000c32:	3001      	adds	r0, #1
 8000c34:	d037      	beq.n	8000ca6 <_malloc_r+0xe6>
 8000c36:	6823      	ldr	r3, [r4, #0]
 8000c38:	442b      	add	r3, r5
 8000c3a:	6023      	str	r3, [r4, #0]
 8000c3c:	f8d8 3000 	ldr.w	r3, [r8]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d038      	beq.n	8000cb6 <_malloc_r+0xf6>
 8000c44:	685a      	ldr	r2, [r3, #4]
 8000c46:	42a2      	cmp	r2, r4
 8000c48:	d12b      	bne.n	8000ca2 <_malloc_r+0xe2>
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	605a      	str	r2, [r3, #4]
 8000c4e:	e00f      	b.n	8000c70 <_malloc_r+0xb0>
 8000c50:	6822      	ldr	r2, [r4, #0]
 8000c52:	1b52      	subs	r2, r2, r5
 8000c54:	d41f      	bmi.n	8000c96 <_malloc_r+0xd6>
 8000c56:	2a0b      	cmp	r2, #11
 8000c58:	d917      	bls.n	8000c8a <_malloc_r+0xca>
 8000c5a:	1961      	adds	r1, r4, r5
 8000c5c:	42a3      	cmp	r3, r4
 8000c5e:	6025      	str	r5, [r4, #0]
 8000c60:	bf18      	it	ne
 8000c62:	6059      	strne	r1, [r3, #4]
 8000c64:	6863      	ldr	r3, [r4, #4]
 8000c66:	bf08      	it	eq
 8000c68:	f8c8 1000 	streq.w	r1, [r8]
 8000c6c:	5162      	str	r2, [r4, r5]
 8000c6e:	604b      	str	r3, [r1, #4]
 8000c70:	4638      	mov	r0, r7
 8000c72:	f104 060b 	add.w	r6, r4, #11
 8000c76:	f000 f829 	bl	8000ccc <__malloc_unlock>
 8000c7a:	f026 0607 	bic.w	r6, r6, #7
 8000c7e:	1d23      	adds	r3, r4, #4
 8000c80:	1af2      	subs	r2, r6, r3
 8000c82:	d0ae      	beq.n	8000be2 <_malloc_r+0x22>
 8000c84:	1b9b      	subs	r3, r3, r6
 8000c86:	50a3      	str	r3, [r4, r2]
 8000c88:	e7ab      	b.n	8000be2 <_malloc_r+0x22>
 8000c8a:	42a3      	cmp	r3, r4
 8000c8c:	6862      	ldr	r2, [r4, #4]
 8000c8e:	d1dd      	bne.n	8000c4c <_malloc_r+0x8c>
 8000c90:	f8c8 2000 	str.w	r2, [r8]
 8000c94:	e7ec      	b.n	8000c70 <_malloc_r+0xb0>
 8000c96:	4623      	mov	r3, r4
 8000c98:	6864      	ldr	r4, [r4, #4]
 8000c9a:	e7ac      	b.n	8000bf6 <_malloc_r+0x36>
 8000c9c:	4634      	mov	r4, r6
 8000c9e:	6876      	ldr	r6, [r6, #4]
 8000ca0:	e7b4      	b.n	8000c0c <_malloc_r+0x4c>
 8000ca2:	4613      	mov	r3, r2
 8000ca4:	e7cc      	b.n	8000c40 <_malloc_r+0x80>
 8000ca6:	230c      	movs	r3, #12
 8000ca8:	603b      	str	r3, [r7, #0]
 8000caa:	4638      	mov	r0, r7
 8000cac:	f000 f80e 	bl	8000ccc <__malloc_unlock>
 8000cb0:	e797      	b.n	8000be2 <_malloc_r+0x22>
 8000cb2:	6025      	str	r5, [r4, #0]
 8000cb4:	e7dc      	b.n	8000c70 <_malloc_r+0xb0>
 8000cb6:	605b      	str	r3, [r3, #4]
 8000cb8:	deff      	udf	#255	; 0xff
 8000cba:	bf00      	nop
 8000cbc:	200001c4 	.word	0x200001c4

08000cc0 <__malloc_lock>:
 8000cc0:	4801      	ldr	r0, [pc, #4]	; (8000cc8 <__malloc_lock+0x8>)
 8000cc2:	f7ff bf0f 	b.w	8000ae4 <__retarget_lock_acquire_recursive>
 8000cc6:	bf00      	nop
 8000cc8:	200001c0 	.word	0x200001c0

08000ccc <__malloc_unlock>:
 8000ccc:	4801      	ldr	r0, [pc, #4]	; (8000cd4 <__malloc_unlock+0x8>)
 8000cce:	f7ff bf0a 	b.w	8000ae6 <__retarget_lock_release_recursive>
 8000cd2:	bf00      	nop
 8000cd4:	200001c0 	.word	0x200001c0

08000cd8 <__sfputc_r>:
 8000cd8:	6893      	ldr	r3, [r2, #8]
 8000cda:	3b01      	subs	r3, #1
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	b410      	push	{r4}
 8000ce0:	6093      	str	r3, [r2, #8]
 8000ce2:	da08      	bge.n	8000cf6 <__sfputc_r+0x1e>
 8000ce4:	6994      	ldr	r4, [r2, #24]
 8000ce6:	42a3      	cmp	r3, r4
 8000ce8:	db01      	blt.n	8000cee <__sfputc_r+0x16>
 8000cea:	290a      	cmp	r1, #10
 8000cec:	d103      	bne.n	8000cf6 <__sfputc_r+0x1e>
 8000cee:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000cf2:	f000 bb73 	b.w	80013dc <__swbuf_r>
 8000cf6:	6813      	ldr	r3, [r2, #0]
 8000cf8:	1c58      	adds	r0, r3, #1
 8000cfa:	6010      	str	r0, [r2, #0]
 8000cfc:	7019      	strb	r1, [r3, #0]
 8000cfe:	4608      	mov	r0, r1
 8000d00:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000d04:	4770      	bx	lr

08000d06 <__sfputs_r>:
 8000d06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d08:	4606      	mov	r6, r0
 8000d0a:	460f      	mov	r7, r1
 8000d0c:	4614      	mov	r4, r2
 8000d0e:	18d5      	adds	r5, r2, r3
 8000d10:	42ac      	cmp	r4, r5
 8000d12:	d101      	bne.n	8000d18 <__sfputs_r+0x12>
 8000d14:	2000      	movs	r0, #0
 8000d16:	e007      	b.n	8000d28 <__sfputs_r+0x22>
 8000d18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000d1c:	463a      	mov	r2, r7
 8000d1e:	4630      	mov	r0, r6
 8000d20:	f7ff ffda 	bl	8000cd8 <__sfputc_r>
 8000d24:	1c43      	adds	r3, r0, #1
 8000d26:	d1f3      	bne.n	8000d10 <__sfputs_r+0xa>
 8000d28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000d2c <_vfiprintf_r>:
 8000d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d30:	460d      	mov	r5, r1
 8000d32:	b09d      	sub	sp, #116	; 0x74
 8000d34:	4614      	mov	r4, r2
 8000d36:	4698      	mov	r8, r3
 8000d38:	4606      	mov	r6, r0
 8000d3a:	b118      	cbz	r0, 8000d44 <_vfiprintf_r+0x18>
 8000d3c:	6a03      	ldr	r3, [r0, #32]
 8000d3e:	b90b      	cbnz	r3, 8000d44 <_vfiprintf_r+0x18>
 8000d40:	f7ff fdcc 	bl	80008dc <__sinit>
 8000d44:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000d46:	07d9      	lsls	r1, r3, #31
 8000d48:	d405      	bmi.n	8000d56 <_vfiprintf_r+0x2a>
 8000d4a:	89ab      	ldrh	r3, [r5, #12]
 8000d4c:	059a      	lsls	r2, r3, #22
 8000d4e:	d402      	bmi.n	8000d56 <_vfiprintf_r+0x2a>
 8000d50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000d52:	f7ff fec7 	bl	8000ae4 <__retarget_lock_acquire_recursive>
 8000d56:	89ab      	ldrh	r3, [r5, #12]
 8000d58:	071b      	lsls	r3, r3, #28
 8000d5a:	d501      	bpl.n	8000d60 <_vfiprintf_r+0x34>
 8000d5c:	692b      	ldr	r3, [r5, #16]
 8000d5e:	b99b      	cbnz	r3, 8000d88 <_vfiprintf_r+0x5c>
 8000d60:	4629      	mov	r1, r5
 8000d62:	4630      	mov	r0, r6
 8000d64:	f000 fb78 	bl	8001458 <__swsetup_r>
 8000d68:	b170      	cbz	r0, 8000d88 <_vfiprintf_r+0x5c>
 8000d6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000d6c:	07dc      	lsls	r4, r3, #31
 8000d6e:	d504      	bpl.n	8000d7a <_vfiprintf_r+0x4e>
 8000d70:	f04f 30ff 	mov.w	r0, #4294967295
 8000d74:	b01d      	add	sp, #116	; 0x74
 8000d76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d7a:	89ab      	ldrh	r3, [r5, #12]
 8000d7c:	0598      	lsls	r0, r3, #22
 8000d7e:	d4f7      	bmi.n	8000d70 <_vfiprintf_r+0x44>
 8000d80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000d82:	f7ff feb0 	bl	8000ae6 <__retarget_lock_release_recursive>
 8000d86:	e7f3      	b.n	8000d70 <_vfiprintf_r+0x44>
 8000d88:	2300      	movs	r3, #0
 8000d8a:	9309      	str	r3, [sp, #36]	; 0x24
 8000d8c:	2320      	movs	r3, #32
 8000d8e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000d92:	f8cd 800c 	str.w	r8, [sp, #12]
 8000d96:	2330      	movs	r3, #48	; 0x30
 8000d98:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8000f4c <_vfiprintf_r+0x220>
 8000d9c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000da0:	f04f 0901 	mov.w	r9, #1
 8000da4:	4623      	mov	r3, r4
 8000da6:	469a      	mov	sl, r3
 8000da8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000dac:	b10a      	cbz	r2, 8000db2 <_vfiprintf_r+0x86>
 8000dae:	2a25      	cmp	r2, #37	; 0x25
 8000db0:	d1f9      	bne.n	8000da6 <_vfiprintf_r+0x7a>
 8000db2:	ebba 0b04 	subs.w	fp, sl, r4
 8000db6:	d00b      	beq.n	8000dd0 <_vfiprintf_r+0xa4>
 8000db8:	465b      	mov	r3, fp
 8000dba:	4622      	mov	r2, r4
 8000dbc:	4629      	mov	r1, r5
 8000dbe:	4630      	mov	r0, r6
 8000dc0:	f7ff ffa1 	bl	8000d06 <__sfputs_r>
 8000dc4:	3001      	adds	r0, #1
 8000dc6:	f000 80a9 	beq.w	8000f1c <_vfiprintf_r+0x1f0>
 8000dca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000dcc:	445a      	add	r2, fp
 8000dce:	9209      	str	r2, [sp, #36]	; 0x24
 8000dd0:	f89a 3000 	ldrb.w	r3, [sl]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	f000 80a1 	beq.w	8000f1c <_vfiprintf_r+0x1f0>
 8000dda:	2300      	movs	r3, #0
 8000ddc:	f04f 32ff 	mov.w	r2, #4294967295
 8000de0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000de4:	f10a 0a01 	add.w	sl, sl, #1
 8000de8:	9304      	str	r3, [sp, #16]
 8000dea:	9307      	str	r3, [sp, #28]
 8000dec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000df0:	931a      	str	r3, [sp, #104]	; 0x68
 8000df2:	4654      	mov	r4, sl
 8000df4:	2205      	movs	r2, #5
 8000df6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000dfa:	4854      	ldr	r0, [pc, #336]	; (8000f4c <_vfiprintf_r+0x220>)
 8000dfc:	f7ff fa20 	bl	8000240 <memchr>
 8000e00:	9a04      	ldr	r2, [sp, #16]
 8000e02:	b9d8      	cbnz	r0, 8000e3c <_vfiprintf_r+0x110>
 8000e04:	06d1      	lsls	r1, r2, #27
 8000e06:	bf44      	itt	mi
 8000e08:	2320      	movmi	r3, #32
 8000e0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000e0e:	0713      	lsls	r3, r2, #28
 8000e10:	bf44      	itt	mi
 8000e12:	232b      	movmi	r3, #43	; 0x2b
 8000e14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000e18:	f89a 3000 	ldrb.w	r3, [sl]
 8000e1c:	2b2a      	cmp	r3, #42	; 0x2a
 8000e1e:	d015      	beq.n	8000e4c <_vfiprintf_r+0x120>
 8000e20:	9a07      	ldr	r2, [sp, #28]
 8000e22:	4654      	mov	r4, sl
 8000e24:	2000      	movs	r0, #0
 8000e26:	f04f 0c0a 	mov.w	ip, #10
 8000e2a:	4621      	mov	r1, r4
 8000e2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000e30:	3b30      	subs	r3, #48	; 0x30
 8000e32:	2b09      	cmp	r3, #9
 8000e34:	d94d      	bls.n	8000ed2 <_vfiprintf_r+0x1a6>
 8000e36:	b1b0      	cbz	r0, 8000e66 <_vfiprintf_r+0x13a>
 8000e38:	9207      	str	r2, [sp, #28]
 8000e3a:	e014      	b.n	8000e66 <_vfiprintf_r+0x13a>
 8000e3c:	eba0 0308 	sub.w	r3, r0, r8
 8000e40:	fa09 f303 	lsl.w	r3, r9, r3
 8000e44:	4313      	orrs	r3, r2
 8000e46:	9304      	str	r3, [sp, #16]
 8000e48:	46a2      	mov	sl, r4
 8000e4a:	e7d2      	b.n	8000df2 <_vfiprintf_r+0xc6>
 8000e4c:	9b03      	ldr	r3, [sp, #12]
 8000e4e:	1d19      	adds	r1, r3, #4
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	9103      	str	r1, [sp, #12]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	bfbb      	ittet	lt
 8000e58:	425b      	neglt	r3, r3
 8000e5a:	f042 0202 	orrlt.w	r2, r2, #2
 8000e5e:	9307      	strge	r3, [sp, #28]
 8000e60:	9307      	strlt	r3, [sp, #28]
 8000e62:	bfb8      	it	lt
 8000e64:	9204      	strlt	r2, [sp, #16]
 8000e66:	7823      	ldrb	r3, [r4, #0]
 8000e68:	2b2e      	cmp	r3, #46	; 0x2e
 8000e6a:	d10c      	bne.n	8000e86 <_vfiprintf_r+0x15a>
 8000e6c:	7863      	ldrb	r3, [r4, #1]
 8000e6e:	2b2a      	cmp	r3, #42	; 0x2a
 8000e70:	d134      	bne.n	8000edc <_vfiprintf_r+0x1b0>
 8000e72:	9b03      	ldr	r3, [sp, #12]
 8000e74:	1d1a      	adds	r2, r3, #4
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	9203      	str	r2, [sp, #12]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	bfb8      	it	lt
 8000e7e:	f04f 33ff 	movlt.w	r3, #4294967295
 8000e82:	3402      	adds	r4, #2
 8000e84:	9305      	str	r3, [sp, #20]
 8000e86:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8000f5c <_vfiprintf_r+0x230>
 8000e8a:	7821      	ldrb	r1, [r4, #0]
 8000e8c:	2203      	movs	r2, #3
 8000e8e:	4650      	mov	r0, sl
 8000e90:	f7ff f9d6 	bl	8000240 <memchr>
 8000e94:	b138      	cbz	r0, 8000ea6 <_vfiprintf_r+0x17a>
 8000e96:	9b04      	ldr	r3, [sp, #16]
 8000e98:	eba0 000a 	sub.w	r0, r0, sl
 8000e9c:	2240      	movs	r2, #64	; 0x40
 8000e9e:	4082      	lsls	r2, r0
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	3401      	adds	r4, #1
 8000ea4:	9304      	str	r3, [sp, #16]
 8000ea6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000eaa:	4829      	ldr	r0, [pc, #164]	; (8000f50 <_vfiprintf_r+0x224>)
 8000eac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000eb0:	2206      	movs	r2, #6
 8000eb2:	f7ff f9c5 	bl	8000240 <memchr>
 8000eb6:	2800      	cmp	r0, #0
 8000eb8:	d03f      	beq.n	8000f3a <_vfiprintf_r+0x20e>
 8000eba:	4b26      	ldr	r3, [pc, #152]	; (8000f54 <_vfiprintf_r+0x228>)
 8000ebc:	bb1b      	cbnz	r3, 8000f06 <_vfiprintf_r+0x1da>
 8000ebe:	9b03      	ldr	r3, [sp, #12]
 8000ec0:	3307      	adds	r3, #7
 8000ec2:	f023 0307 	bic.w	r3, r3, #7
 8000ec6:	3308      	adds	r3, #8
 8000ec8:	9303      	str	r3, [sp, #12]
 8000eca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000ecc:	443b      	add	r3, r7
 8000ece:	9309      	str	r3, [sp, #36]	; 0x24
 8000ed0:	e768      	b.n	8000da4 <_vfiprintf_r+0x78>
 8000ed2:	fb0c 3202 	mla	r2, ip, r2, r3
 8000ed6:	460c      	mov	r4, r1
 8000ed8:	2001      	movs	r0, #1
 8000eda:	e7a6      	b.n	8000e2a <_vfiprintf_r+0xfe>
 8000edc:	2300      	movs	r3, #0
 8000ede:	3401      	adds	r4, #1
 8000ee0:	9305      	str	r3, [sp, #20]
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	f04f 0c0a 	mov.w	ip, #10
 8000ee8:	4620      	mov	r0, r4
 8000eea:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000eee:	3a30      	subs	r2, #48	; 0x30
 8000ef0:	2a09      	cmp	r2, #9
 8000ef2:	d903      	bls.n	8000efc <_vfiprintf_r+0x1d0>
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d0c6      	beq.n	8000e86 <_vfiprintf_r+0x15a>
 8000ef8:	9105      	str	r1, [sp, #20]
 8000efa:	e7c4      	b.n	8000e86 <_vfiprintf_r+0x15a>
 8000efc:	fb0c 2101 	mla	r1, ip, r1, r2
 8000f00:	4604      	mov	r4, r0
 8000f02:	2301      	movs	r3, #1
 8000f04:	e7f0      	b.n	8000ee8 <_vfiprintf_r+0x1bc>
 8000f06:	ab03      	add	r3, sp, #12
 8000f08:	9300      	str	r3, [sp, #0]
 8000f0a:	462a      	mov	r2, r5
 8000f0c:	4b12      	ldr	r3, [pc, #72]	; (8000f58 <_vfiprintf_r+0x22c>)
 8000f0e:	a904      	add	r1, sp, #16
 8000f10:	4630      	mov	r0, r6
 8000f12:	f3af 8000 	nop.w
 8000f16:	4607      	mov	r7, r0
 8000f18:	1c78      	adds	r0, r7, #1
 8000f1a:	d1d6      	bne.n	8000eca <_vfiprintf_r+0x19e>
 8000f1c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000f1e:	07d9      	lsls	r1, r3, #31
 8000f20:	d405      	bmi.n	8000f2e <_vfiprintf_r+0x202>
 8000f22:	89ab      	ldrh	r3, [r5, #12]
 8000f24:	059a      	lsls	r2, r3, #22
 8000f26:	d402      	bmi.n	8000f2e <_vfiprintf_r+0x202>
 8000f28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000f2a:	f7ff fddc 	bl	8000ae6 <__retarget_lock_release_recursive>
 8000f2e:	89ab      	ldrh	r3, [r5, #12]
 8000f30:	065b      	lsls	r3, r3, #25
 8000f32:	f53f af1d 	bmi.w	8000d70 <_vfiprintf_r+0x44>
 8000f36:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000f38:	e71c      	b.n	8000d74 <_vfiprintf_r+0x48>
 8000f3a:	ab03      	add	r3, sp, #12
 8000f3c:	9300      	str	r3, [sp, #0]
 8000f3e:	462a      	mov	r2, r5
 8000f40:	4b05      	ldr	r3, [pc, #20]	; (8000f58 <_vfiprintf_r+0x22c>)
 8000f42:	a904      	add	r1, sp, #16
 8000f44:	4630      	mov	r0, r6
 8000f46:	f000 f879 	bl	800103c <_printf_i>
 8000f4a:	e7e4      	b.n	8000f16 <_vfiprintf_r+0x1ea>
 8000f4c:	0800165d 	.word	0x0800165d
 8000f50:	08001667 	.word	0x08001667
 8000f54:	00000000 	.word	0x00000000
 8000f58:	08000d07 	.word	0x08000d07
 8000f5c:	08001663 	.word	0x08001663

08000f60 <_printf_common>:
 8000f60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f64:	4616      	mov	r6, r2
 8000f66:	4699      	mov	r9, r3
 8000f68:	688a      	ldr	r2, [r1, #8]
 8000f6a:	690b      	ldr	r3, [r1, #16]
 8000f6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000f70:	4293      	cmp	r3, r2
 8000f72:	bfb8      	it	lt
 8000f74:	4613      	movlt	r3, r2
 8000f76:	6033      	str	r3, [r6, #0]
 8000f78:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000f7c:	4607      	mov	r7, r0
 8000f7e:	460c      	mov	r4, r1
 8000f80:	b10a      	cbz	r2, 8000f86 <_printf_common+0x26>
 8000f82:	3301      	adds	r3, #1
 8000f84:	6033      	str	r3, [r6, #0]
 8000f86:	6823      	ldr	r3, [r4, #0]
 8000f88:	0699      	lsls	r1, r3, #26
 8000f8a:	bf42      	ittt	mi
 8000f8c:	6833      	ldrmi	r3, [r6, #0]
 8000f8e:	3302      	addmi	r3, #2
 8000f90:	6033      	strmi	r3, [r6, #0]
 8000f92:	6825      	ldr	r5, [r4, #0]
 8000f94:	f015 0506 	ands.w	r5, r5, #6
 8000f98:	d106      	bne.n	8000fa8 <_printf_common+0x48>
 8000f9a:	f104 0a19 	add.w	sl, r4, #25
 8000f9e:	68e3      	ldr	r3, [r4, #12]
 8000fa0:	6832      	ldr	r2, [r6, #0]
 8000fa2:	1a9b      	subs	r3, r3, r2
 8000fa4:	42ab      	cmp	r3, r5
 8000fa6:	dc26      	bgt.n	8000ff6 <_printf_common+0x96>
 8000fa8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000fac:	1e13      	subs	r3, r2, #0
 8000fae:	6822      	ldr	r2, [r4, #0]
 8000fb0:	bf18      	it	ne
 8000fb2:	2301      	movne	r3, #1
 8000fb4:	0692      	lsls	r2, r2, #26
 8000fb6:	d42b      	bmi.n	8001010 <_printf_common+0xb0>
 8000fb8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000fbc:	4649      	mov	r1, r9
 8000fbe:	4638      	mov	r0, r7
 8000fc0:	47c0      	blx	r8
 8000fc2:	3001      	adds	r0, #1
 8000fc4:	d01e      	beq.n	8001004 <_printf_common+0xa4>
 8000fc6:	6823      	ldr	r3, [r4, #0]
 8000fc8:	6922      	ldr	r2, [r4, #16]
 8000fca:	f003 0306 	and.w	r3, r3, #6
 8000fce:	2b04      	cmp	r3, #4
 8000fd0:	bf02      	ittt	eq
 8000fd2:	68e5      	ldreq	r5, [r4, #12]
 8000fd4:	6833      	ldreq	r3, [r6, #0]
 8000fd6:	1aed      	subeq	r5, r5, r3
 8000fd8:	68a3      	ldr	r3, [r4, #8]
 8000fda:	bf0c      	ite	eq
 8000fdc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000fe0:	2500      	movne	r5, #0
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	bfc4      	itt	gt
 8000fe6:	1a9b      	subgt	r3, r3, r2
 8000fe8:	18ed      	addgt	r5, r5, r3
 8000fea:	2600      	movs	r6, #0
 8000fec:	341a      	adds	r4, #26
 8000fee:	42b5      	cmp	r5, r6
 8000ff0:	d11a      	bne.n	8001028 <_printf_common+0xc8>
 8000ff2:	2000      	movs	r0, #0
 8000ff4:	e008      	b.n	8001008 <_printf_common+0xa8>
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	4652      	mov	r2, sl
 8000ffa:	4649      	mov	r1, r9
 8000ffc:	4638      	mov	r0, r7
 8000ffe:	47c0      	blx	r8
 8001000:	3001      	adds	r0, #1
 8001002:	d103      	bne.n	800100c <_printf_common+0xac>
 8001004:	f04f 30ff 	mov.w	r0, #4294967295
 8001008:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800100c:	3501      	adds	r5, #1
 800100e:	e7c6      	b.n	8000f9e <_printf_common+0x3e>
 8001010:	18e1      	adds	r1, r4, r3
 8001012:	1c5a      	adds	r2, r3, #1
 8001014:	2030      	movs	r0, #48	; 0x30
 8001016:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800101a:	4422      	add	r2, r4
 800101c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001020:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001024:	3302      	adds	r3, #2
 8001026:	e7c7      	b.n	8000fb8 <_printf_common+0x58>
 8001028:	2301      	movs	r3, #1
 800102a:	4622      	mov	r2, r4
 800102c:	4649      	mov	r1, r9
 800102e:	4638      	mov	r0, r7
 8001030:	47c0      	blx	r8
 8001032:	3001      	adds	r0, #1
 8001034:	d0e6      	beq.n	8001004 <_printf_common+0xa4>
 8001036:	3601      	adds	r6, #1
 8001038:	e7d9      	b.n	8000fee <_printf_common+0x8e>
	...

0800103c <_printf_i>:
 800103c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001040:	7e0f      	ldrb	r7, [r1, #24]
 8001042:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001044:	2f78      	cmp	r7, #120	; 0x78
 8001046:	4691      	mov	r9, r2
 8001048:	4680      	mov	r8, r0
 800104a:	460c      	mov	r4, r1
 800104c:	469a      	mov	sl, r3
 800104e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001052:	d807      	bhi.n	8001064 <_printf_i+0x28>
 8001054:	2f62      	cmp	r7, #98	; 0x62
 8001056:	d80a      	bhi.n	800106e <_printf_i+0x32>
 8001058:	2f00      	cmp	r7, #0
 800105a:	f000 80d4 	beq.w	8001206 <_printf_i+0x1ca>
 800105e:	2f58      	cmp	r7, #88	; 0x58
 8001060:	f000 80c0 	beq.w	80011e4 <_printf_i+0x1a8>
 8001064:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001068:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800106c:	e03a      	b.n	80010e4 <_printf_i+0xa8>
 800106e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001072:	2b15      	cmp	r3, #21
 8001074:	d8f6      	bhi.n	8001064 <_printf_i+0x28>
 8001076:	a101      	add	r1, pc, #4	; (adr r1, 800107c <_printf_i+0x40>)
 8001078:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800107c:	080010d5 	.word	0x080010d5
 8001080:	080010e9 	.word	0x080010e9
 8001084:	08001065 	.word	0x08001065
 8001088:	08001065 	.word	0x08001065
 800108c:	08001065 	.word	0x08001065
 8001090:	08001065 	.word	0x08001065
 8001094:	080010e9 	.word	0x080010e9
 8001098:	08001065 	.word	0x08001065
 800109c:	08001065 	.word	0x08001065
 80010a0:	08001065 	.word	0x08001065
 80010a4:	08001065 	.word	0x08001065
 80010a8:	080011ed 	.word	0x080011ed
 80010ac:	08001115 	.word	0x08001115
 80010b0:	080011a7 	.word	0x080011a7
 80010b4:	08001065 	.word	0x08001065
 80010b8:	08001065 	.word	0x08001065
 80010bc:	0800120f 	.word	0x0800120f
 80010c0:	08001065 	.word	0x08001065
 80010c4:	08001115 	.word	0x08001115
 80010c8:	08001065 	.word	0x08001065
 80010cc:	08001065 	.word	0x08001065
 80010d0:	080011af 	.word	0x080011af
 80010d4:	682b      	ldr	r3, [r5, #0]
 80010d6:	1d1a      	adds	r2, r3, #4
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	602a      	str	r2, [r5, #0]
 80010dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80010e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80010e4:	2301      	movs	r3, #1
 80010e6:	e09f      	b.n	8001228 <_printf_i+0x1ec>
 80010e8:	6820      	ldr	r0, [r4, #0]
 80010ea:	682b      	ldr	r3, [r5, #0]
 80010ec:	0607      	lsls	r7, r0, #24
 80010ee:	f103 0104 	add.w	r1, r3, #4
 80010f2:	6029      	str	r1, [r5, #0]
 80010f4:	d501      	bpl.n	80010fa <_printf_i+0xbe>
 80010f6:	681e      	ldr	r6, [r3, #0]
 80010f8:	e003      	b.n	8001102 <_printf_i+0xc6>
 80010fa:	0646      	lsls	r6, r0, #25
 80010fc:	d5fb      	bpl.n	80010f6 <_printf_i+0xba>
 80010fe:	f9b3 6000 	ldrsh.w	r6, [r3]
 8001102:	2e00      	cmp	r6, #0
 8001104:	da03      	bge.n	800110e <_printf_i+0xd2>
 8001106:	232d      	movs	r3, #45	; 0x2d
 8001108:	4276      	negs	r6, r6
 800110a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800110e:	485a      	ldr	r0, [pc, #360]	; (8001278 <_printf_i+0x23c>)
 8001110:	230a      	movs	r3, #10
 8001112:	e012      	b.n	800113a <_printf_i+0xfe>
 8001114:	682b      	ldr	r3, [r5, #0]
 8001116:	6820      	ldr	r0, [r4, #0]
 8001118:	1d19      	adds	r1, r3, #4
 800111a:	6029      	str	r1, [r5, #0]
 800111c:	0605      	lsls	r5, r0, #24
 800111e:	d501      	bpl.n	8001124 <_printf_i+0xe8>
 8001120:	681e      	ldr	r6, [r3, #0]
 8001122:	e002      	b.n	800112a <_printf_i+0xee>
 8001124:	0641      	lsls	r1, r0, #25
 8001126:	d5fb      	bpl.n	8001120 <_printf_i+0xe4>
 8001128:	881e      	ldrh	r6, [r3, #0]
 800112a:	4853      	ldr	r0, [pc, #332]	; (8001278 <_printf_i+0x23c>)
 800112c:	2f6f      	cmp	r7, #111	; 0x6f
 800112e:	bf0c      	ite	eq
 8001130:	2308      	moveq	r3, #8
 8001132:	230a      	movne	r3, #10
 8001134:	2100      	movs	r1, #0
 8001136:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800113a:	6865      	ldr	r5, [r4, #4]
 800113c:	60a5      	str	r5, [r4, #8]
 800113e:	2d00      	cmp	r5, #0
 8001140:	bfa2      	ittt	ge
 8001142:	6821      	ldrge	r1, [r4, #0]
 8001144:	f021 0104 	bicge.w	r1, r1, #4
 8001148:	6021      	strge	r1, [r4, #0]
 800114a:	b90e      	cbnz	r6, 8001150 <_printf_i+0x114>
 800114c:	2d00      	cmp	r5, #0
 800114e:	d04b      	beq.n	80011e8 <_printf_i+0x1ac>
 8001150:	4615      	mov	r5, r2
 8001152:	fbb6 f1f3 	udiv	r1, r6, r3
 8001156:	fb03 6711 	mls	r7, r3, r1, r6
 800115a:	5dc7      	ldrb	r7, [r0, r7]
 800115c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001160:	4637      	mov	r7, r6
 8001162:	42bb      	cmp	r3, r7
 8001164:	460e      	mov	r6, r1
 8001166:	d9f4      	bls.n	8001152 <_printf_i+0x116>
 8001168:	2b08      	cmp	r3, #8
 800116a:	d10b      	bne.n	8001184 <_printf_i+0x148>
 800116c:	6823      	ldr	r3, [r4, #0]
 800116e:	07de      	lsls	r6, r3, #31
 8001170:	d508      	bpl.n	8001184 <_printf_i+0x148>
 8001172:	6923      	ldr	r3, [r4, #16]
 8001174:	6861      	ldr	r1, [r4, #4]
 8001176:	4299      	cmp	r1, r3
 8001178:	bfde      	ittt	le
 800117a:	2330      	movle	r3, #48	; 0x30
 800117c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001180:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001184:	1b52      	subs	r2, r2, r5
 8001186:	6122      	str	r2, [r4, #16]
 8001188:	f8cd a000 	str.w	sl, [sp]
 800118c:	464b      	mov	r3, r9
 800118e:	aa03      	add	r2, sp, #12
 8001190:	4621      	mov	r1, r4
 8001192:	4640      	mov	r0, r8
 8001194:	f7ff fee4 	bl	8000f60 <_printf_common>
 8001198:	3001      	adds	r0, #1
 800119a:	d14a      	bne.n	8001232 <_printf_i+0x1f6>
 800119c:	f04f 30ff 	mov.w	r0, #4294967295
 80011a0:	b004      	add	sp, #16
 80011a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011a6:	6823      	ldr	r3, [r4, #0]
 80011a8:	f043 0320 	orr.w	r3, r3, #32
 80011ac:	6023      	str	r3, [r4, #0]
 80011ae:	4833      	ldr	r0, [pc, #204]	; (800127c <_printf_i+0x240>)
 80011b0:	2778      	movs	r7, #120	; 0x78
 80011b2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80011b6:	6823      	ldr	r3, [r4, #0]
 80011b8:	6829      	ldr	r1, [r5, #0]
 80011ba:	061f      	lsls	r7, r3, #24
 80011bc:	f851 6b04 	ldr.w	r6, [r1], #4
 80011c0:	d402      	bmi.n	80011c8 <_printf_i+0x18c>
 80011c2:	065f      	lsls	r7, r3, #25
 80011c4:	bf48      	it	mi
 80011c6:	b2b6      	uxthmi	r6, r6
 80011c8:	07df      	lsls	r7, r3, #31
 80011ca:	bf48      	it	mi
 80011cc:	f043 0320 	orrmi.w	r3, r3, #32
 80011d0:	6029      	str	r1, [r5, #0]
 80011d2:	bf48      	it	mi
 80011d4:	6023      	strmi	r3, [r4, #0]
 80011d6:	b91e      	cbnz	r6, 80011e0 <_printf_i+0x1a4>
 80011d8:	6823      	ldr	r3, [r4, #0]
 80011da:	f023 0320 	bic.w	r3, r3, #32
 80011de:	6023      	str	r3, [r4, #0]
 80011e0:	2310      	movs	r3, #16
 80011e2:	e7a7      	b.n	8001134 <_printf_i+0xf8>
 80011e4:	4824      	ldr	r0, [pc, #144]	; (8001278 <_printf_i+0x23c>)
 80011e6:	e7e4      	b.n	80011b2 <_printf_i+0x176>
 80011e8:	4615      	mov	r5, r2
 80011ea:	e7bd      	b.n	8001168 <_printf_i+0x12c>
 80011ec:	682b      	ldr	r3, [r5, #0]
 80011ee:	6826      	ldr	r6, [r4, #0]
 80011f0:	6961      	ldr	r1, [r4, #20]
 80011f2:	1d18      	adds	r0, r3, #4
 80011f4:	6028      	str	r0, [r5, #0]
 80011f6:	0635      	lsls	r5, r6, #24
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	d501      	bpl.n	8001200 <_printf_i+0x1c4>
 80011fc:	6019      	str	r1, [r3, #0]
 80011fe:	e002      	b.n	8001206 <_printf_i+0x1ca>
 8001200:	0670      	lsls	r0, r6, #25
 8001202:	d5fb      	bpl.n	80011fc <_printf_i+0x1c0>
 8001204:	8019      	strh	r1, [r3, #0]
 8001206:	2300      	movs	r3, #0
 8001208:	6123      	str	r3, [r4, #16]
 800120a:	4615      	mov	r5, r2
 800120c:	e7bc      	b.n	8001188 <_printf_i+0x14c>
 800120e:	682b      	ldr	r3, [r5, #0]
 8001210:	1d1a      	adds	r2, r3, #4
 8001212:	602a      	str	r2, [r5, #0]
 8001214:	681d      	ldr	r5, [r3, #0]
 8001216:	6862      	ldr	r2, [r4, #4]
 8001218:	2100      	movs	r1, #0
 800121a:	4628      	mov	r0, r5
 800121c:	f7ff f810 	bl	8000240 <memchr>
 8001220:	b108      	cbz	r0, 8001226 <_printf_i+0x1ea>
 8001222:	1b40      	subs	r0, r0, r5
 8001224:	6060      	str	r0, [r4, #4]
 8001226:	6863      	ldr	r3, [r4, #4]
 8001228:	6123      	str	r3, [r4, #16]
 800122a:	2300      	movs	r3, #0
 800122c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001230:	e7aa      	b.n	8001188 <_printf_i+0x14c>
 8001232:	6923      	ldr	r3, [r4, #16]
 8001234:	462a      	mov	r2, r5
 8001236:	4649      	mov	r1, r9
 8001238:	4640      	mov	r0, r8
 800123a:	47d0      	blx	sl
 800123c:	3001      	adds	r0, #1
 800123e:	d0ad      	beq.n	800119c <_printf_i+0x160>
 8001240:	6823      	ldr	r3, [r4, #0]
 8001242:	079b      	lsls	r3, r3, #30
 8001244:	d413      	bmi.n	800126e <_printf_i+0x232>
 8001246:	68e0      	ldr	r0, [r4, #12]
 8001248:	9b03      	ldr	r3, [sp, #12]
 800124a:	4298      	cmp	r0, r3
 800124c:	bfb8      	it	lt
 800124e:	4618      	movlt	r0, r3
 8001250:	e7a6      	b.n	80011a0 <_printf_i+0x164>
 8001252:	2301      	movs	r3, #1
 8001254:	4632      	mov	r2, r6
 8001256:	4649      	mov	r1, r9
 8001258:	4640      	mov	r0, r8
 800125a:	47d0      	blx	sl
 800125c:	3001      	adds	r0, #1
 800125e:	d09d      	beq.n	800119c <_printf_i+0x160>
 8001260:	3501      	adds	r5, #1
 8001262:	68e3      	ldr	r3, [r4, #12]
 8001264:	9903      	ldr	r1, [sp, #12]
 8001266:	1a5b      	subs	r3, r3, r1
 8001268:	42ab      	cmp	r3, r5
 800126a:	dcf2      	bgt.n	8001252 <_printf_i+0x216>
 800126c:	e7eb      	b.n	8001246 <_printf_i+0x20a>
 800126e:	2500      	movs	r5, #0
 8001270:	f104 0619 	add.w	r6, r4, #25
 8001274:	e7f5      	b.n	8001262 <_printf_i+0x226>
 8001276:	bf00      	nop
 8001278:	0800166e 	.word	0x0800166e
 800127c:	0800167f 	.word	0x0800167f

08001280 <__sflush_r>:
 8001280:	898a      	ldrh	r2, [r1, #12]
 8001282:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001286:	4605      	mov	r5, r0
 8001288:	0710      	lsls	r0, r2, #28
 800128a:	460c      	mov	r4, r1
 800128c:	d458      	bmi.n	8001340 <__sflush_r+0xc0>
 800128e:	684b      	ldr	r3, [r1, #4]
 8001290:	2b00      	cmp	r3, #0
 8001292:	dc05      	bgt.n	80012a0 <__sflush_r+0x20>
 8001294:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001296:	2b00      	cmp	r3, #0
 8001298:	dc02      	bgt.n	80012a0 <__sflush_r+0x20>
 800129a:	2000      	movs	r0, #0
 800129c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80012a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80012a2:	2e00      	cmp	r6, #0
 80012a4:	d0f9      	beq.n	800129a <__sflush_r+0x1a>
 80012a6:	2300      	movs	r3, #0
 80012a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80012ac:	682f      	ldr	r7, [r5, #0]
 80012ae:	6a21      	ldr	r1, [r4, #32]
 80012b0:	602b      	str	r3, [r5, #0]
 80012b2:	d032      	beq.n	800131a <__sflush_r+0x9a>
 80012b4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80012b6:	89a3      	ldrh	r3, [r4, #12]
 80012b8:	075a      	lsls	r2, r3, #29
 80012ba:	d505      	bpl.n	80012c8 <__sflush_r+0x48>
 80012bc:	6863      	ldr	r3, [r4, #4]
 80012be:	1ac0      	subs	r0, r0, r3
 80012c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80012c2:	b10b      	cbz	r3, 80012c8 <__sflush_r+0x48>
 80012c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80012c6:	1ac0      	subs	r0, r0, r3
 80012c8:	2300      	movs	r3, #0
 80012ca:	4602      	mov	r2, r0
 80012cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80012ce:	6a21      	ldr	r1, [r4, #32]
 80012d0:	4628      	mov	r0, r5
 80012d2:	47b0      	blx	r6
 80012d4:	1c43      	adds	r3, r0, #1
 80012d6:	89a3      	ldrh	r3, [r4, #12]
 80012d8:	d106      	bne.n	80012e8 <__sflush_r+0x68>
 80012da:	6829      	ldr	r1, [r5, #0]
 80012dc:	291d      	cmp	r1, #29
 80012de:	d82b      	bhi.n	8001338 <__sflush_r+0xb8>
 80012e0:	4a29      	ldr	r2, [pc, #164]	; (8001388 <__sflush_r+0x108>)
 80012e2:	410a      	asrs	r2, r1
 80012e4:	07d6      	lsls	r6, r2, #31
 80012e6:	d427      	bmi.n	8001338 <__sflush_r+0xb8>
 80012e8:	2200      	movs	r2, #0
 80012ea:	6062      	str	r2, [r4, #4]
 80012ec:	04d9      	lsls	r1, r3, #19
 80012ee:	6922      	ldr	r2, [r4, #16]
 80012f0:	6022      	str	r2, [r4, #0]
 80012f2:	d504      	bpl.n	80012fe <__sflush_r+0x7e>
 80012f4:	1c42      	adds	r2, r0, #1
 80012f6:	d101      	bne.n	80012fc <__sflush_r+0x7c>
 80012f8:	682b      	ldr	r3, [r5, #0]
 80012fa:	b903      	cbnz	r3, 80012fe <__sflush_r+0x7e>
 80012fc:	6560      	str	r0, [r4, #84]	; 0x54
 80012fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001300:	602f      	str	r7, [r5, #0]
 8001302:	2900      	cmp	r1, #0
 8001304:	d0c9      	beq.n	800129a <__sflush_r+0x1a>
 8001306:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800130a:	4299      	cmp	r1, r3
 800130c:	d002      	beq.n	8001314 <__sflush_r+0x94>
 800130e:	4628      	mov	r0, r5
 8001310:	f7ff fbea 	bl	8000ae8 <_free_r>
 8001314:	2000      	movs	r0, #0
 8001316:	6360      	str	r0, [r4, #52]	; 0x34
 8001318:	e7c0      	b.n	800129c <__sflush_r+0x1c>
 800131a:	2301      	movs	r3, #1
 800131c:	4628      	mov	r0, r5
 800131e:	47b0      	blx	r6
 8001320:	1c41      	adds	r1, r0, #1
 8001322:	d1c8      	bne.n	80012b6 <__sflush_r+0x36>
 8001324:	682b      	ldr	r3, [r5, #0]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d0c5      	beq.n	80012b6 <__sflush_r+0x36>
 800132a:	2b1d      	cmp	r3, #29
 800132c:	d001      	beq.n	8001332 <__sflush_r+0xb2>
 800132e:	2b16      	cmp	r3, #22
 8001330:	d101      	bne.n	8001336 <__sflush_r+0xb6>
 8001332:	602f      	str	r7, [r5, #0]
 8001334:	e7b1      	b.n	800129a <__sflush_r+0x1a>
 8001336:	89a3      	ldrh	r3, [r4, #12]
 8001338:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800133c:	81a3      	strh	r3, [r4, #12]
 800133e:	e7ad      	b.n	800129c <__sflush_r+0x1c>
 8001340:	690f      	ldr	r7, [r1, #16]
 8001342:	2f00      	cmp	r7, #0
 8001344:	d0a9      	beq.n	800129a <__sflush_r+0x1a>
 8001346:	0793      	lsls	r3, r2, #30
 8001348:	680e      	ldr	r6, [r1, #0]
 800134a:	bf08      	it	eq
 800134c:	694b      	ldreq	r3, [r1, #20]
 800134e:	600f      	str	r7, [r1, #0]
 8001350:	bf18      	it	ne
 8001352:	2300      	movne	r3, #0
 8001354:	eba6 0807 	sub.w	r8, r6, r7
 8001358:	608b      	str	r3, [r1, #8]
 800135a:	f1b8 0f00 	cmp.w	r8, #0
 800135e:	dd9c      	ble.n	800129a <__sflush_r+0x1a>
 8001360:	6a21      	ldr	r1, [r4, #32]
 8001362:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001364:	4643      	mov	r3, r8
 8001366:	463a      	mov	r2, r7
 8001368:	4628      	mov	r0, r5
 800136a:	47b0      	blx	r6
 800136c:	2800      	cmp	r0, #0
 800136e:	dc06      	bgt.n	800137e <__sflush_r+0xfe>
 8001370:	89a3      	ldrh	r3, [r4, #12]
 8001372:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001376:	81a3      	strh	r3, [r4, #12]
 8001378:	f04f 30ff 	mov.w	r0, #4294967295
 800137c:	e78e      	b.n	800129c <__sflush_r+0x1c>
 800137e:	4407      	add	r7, r0
 8001380:	eba8 0800 	sub.w	r8, r8, r0
 8001384:	e7e9      	b.n	800135a <__sflush_r+0xda>
 8001386:	bf00      	nop
 8001388:	dfbffffe 	.word	0xdfbffffe

0800138c <_fflush_r>:
 800138c:	b538      	push	{r3, r4, r5, lr}
 800138e:	690b      	ldr	r3, [r1, #16]
 8001390:	4605      	mov	r5, r0
 8001392:	460c      	mov	r4, r1
 8001394:	b913      	cbnz	r3, 800139c <_fflush_r+0x10>
 8001396:	2500      	movs	r5, #0
 8001398:	4628      	mov	r0, r5
 800139a:	bd38      	pop	{r3, r4, r5, pc}
 800139c:	b118      	cbz	r0, 80013a6 <_fflush_r+0x1a>
 800139e:	6a03      	ldr	r3, [r0, #32]
 80013a0:	b90b      	cbnz	r3, 80013a6 <_fflush_r+0x1a>
 80013a2:	f7ff fa9b 	bl	80008dc <__sinit>
 80013a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d0f3      	beq.n	8001396 <_fflush_r+0xa>
 80013ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80013b0:	07d0      	lsls	r0, r2, #31
 80013b2:	d404      	bmi.n	80013be <_fflush_r+0x32>
 80013b4:	0599      	lsls	r1, r3, #22
 80013b6:	d402      	bmi.n	80013be <_fflush_r+0x32>
 80013b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80013ba:	f7ff fb93 	bl	8000ae4 <__retarget_lock_acquire_recursive>
 80013be:	4628      	mov	r0, r5
 80013c0:	4621      	mov	r1, r4
 80013c2:	f7ff ff5d 	bl	8001280 <__sflush_r>
 80013c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80013c8:	07da      	lsls	r2, r3, #31
 80013ca:	4605      	mov	r5, r0
 80013cc:	d4e4      	bmi.n	8001398 <_fflush_r+0xc>
 80013ce:	89a3      	ldrh	r3, [r4, #12]
 80013d0:	059b      	lsls	r3, r3, #22
 80013d2:	d4e1      	bmi.n	8001398 <_fflush_r+0xc>
 80013d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80013d6:	f7ff fb86 	bl	8000ae6 <__retarget_lock_release_recursive>
 80013da:	e7dd      	b.n	8001398 <_fflush_r+0xc>

080013dc <__swbuf_r>:
 80013dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013de:	460e      	mov	r6, r1
 80013e0:	4614      	mov	r4, r2
 80013e2:	4605      	mov	r5, r0
 80013e4:	b118      	cbz	r0, 80013ee <__swbuf_r+0x12>
 80013e6:	6a03      	ldr	r3, [r0, #32]
 80013e8:	b90b      	cbnz	r3, 80013ee <__swbuf_r+0x12>
 80013ea:	f7ff fa77 	bl	80008dc <__sinit>
 80013ee:	69a3      	ldr	r3, [r4, #24]
 80013f0:	60a3      	str	r3, [r4, #8]
 80013f2:	89a3      	ldrh	r3, [r4, #12]
 80013f4:	071a      	lsls	r2, r3, #28
 80013f6:	d525      	bpl.n	8001444 <__swbuf_r+0x68>
 80013f8:	6923      	ldr	r3, [r4, #16]
 80013fa:	b31b      	cbz	r3, 8001444 <__swbuf_r+0x68>
 80013fc:	6823      	ldr	r3, [r4, #0]
 80013fe:	6922      	ldr	r2, [r4, #16]
 8001400:	1a98      	subs	r0, r3, r2
 8001402:	6963      	ldr	r3, [r4, #20]
 8001404:	b2f6      	uxtb	r6, r6
 8001406:	4283      	cmp	r3, r0
 8001408:	4637      	mov	r7, r6
 800140a:	dc04      	bgt.n	8001416 <__swbuf_r+0x3a>
 800140c:	4621      	mov	r1, r4
 800140e:	4628      	mov	r0, r5
 8001410:	f7ff ffbc 	bl	800138c <_fflush_r>
 8001414:	b9e0      	cbnz	r0, 8001450 <__swbuf_r+0x74>
 8001416:	68a3      	ldr	r3, [r4, #8]
 8001418:	3b01      	subs	r3, #1
 800141a:	60a3      	str	r3, [r4, #8]
 800141c:	6823      	ldr	r3, [r4, #0]
 800141e:	1c5a      	adds	r2, r3, #1
 8001420:	6022      	str	r2, [r4, #0]
 8001422:	701e      	strb	r6, [r3, #0]
 8001424:	6962      	ldr	r2, [r4, #20]
 8001426:	1c43      	adds	r3, r0, #1
 8001428:	429a      	cmp	r2, r3
 800142a:	d004      	beq.n	8001436 <__swbuf_r+0x5a>
 800142c:	89a3      	ldrh	r3, [r4, #12]
 800142e:	07db      	lsls	r3, r3, #31
 8001430:	d506      	bpl.n	8001440 <__swbuf_r+0x64>
 8001432:	2e0a      	cmp	r6, #10
 8001434:	d104      	bne.n	8001440 <__swbuf_r+0x64>
 8001436:	4621      	mov	r1, r4
 8001438:	4628      	mov	r0, r5
 800143a:	f7ff ffa7 	bl	800138c <_fflush_r>
 800143e:	b938      	cbnz	r0, 8001450 <__swbuf_r+0x74>
 8001440:	4638      	mov	r0, r7
 8001442:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001444:	4621      	mov	r1, r4
 8001446:	4628      	mov	r0, r5
 8001448:	f000 f806 	bl	8001458 <__swsetup_r>
 800144c:	2800      	cmp	r0, #0
 800144e:	d0d5      	beq.n	80013fc <__swbuf_r+0x20>
 8001450:	f04f 37ff 	mov.w	r7, #4294967295
 8001454:	e7f4      	b.n	8001440 <__swbuf_r+0x64>
	...

08001458 <__swsetup_r>:
 8001458:	b538      	push	{r3, r4, r5, lr}
 800145a:	4b2a      	ldr	r3, [pc, #168]	; (8001504 <__swsetup_r+0xac>)
 800145c:	4605      	mov	r5, r0
 800145e:	6818      	ldr	r0, [r3, #0]
 8001460:	460c      	mov	r4, r1
 8001462:	b118      	cbz	r0, 800146c <__swsetup_r+0x14>
 8001464:	6a03      	ldr	r3, [r0, #32]
 8001466:	b90b      	cbnz	r3, 800146c <__swsetup_r+0x14>
 8001468:	f7ff fa38 	bl	80008dc <__sinit>
 800146c:	89a3      	ldrh	r3, [r4, #12]
 800146e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001472:	0718      	lsls	r0, r3, #28
 8001474:	d422      	bmi.n	80014bc <__swsetup_r+0x64>
 8001476:	06d9      	lsls	r1, r3, #27
 8001478:	d407      	bmi.n	800148a <__swsetup_r+0x32>
 800147a:	2309      	movs	r3, #9
 800147c:	602b      	str	r3, [r5, #0]
 800147e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001482:	81a3      	strh	r3, [r4, #12]
 8001484:	f04f 30ff 	mov.w	r0, #4294967295
 8001488:	e034      	b.n	80014f4 <__swsetup_r+0x9c>
 800148a:	0758      	lsls	r0, r3, #29
 800148c:	d512      	bpl.n	80014b4 <__swsetup_r+0x5c>
 800148e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001490:	b141      	cbz	r1, 80014a4 <__swsetup_r+0x4c>
 8001492:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001496:	4299      	cmp	r1, r3
 8001498:	d002      	beq.n	80014a0 <__swsetup_r+0x48>
 800149a:	4628      	mov	r0, r5
 800149c:	f7ff fb24 	bl	8000ae8 <_free_r>
 80014a0:	2300      	movs	r3, #0
 80014a2:	6363      	str	r3, [r4, #52]	; 0x34
 80014a4:	89a3      	ldrh	r3, [r4, #12]
 80014a6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80014aa:	81a3      	strh	r3, [r4, #12]
 80014ac:	2300      	movs	r3, #0
 80014ae:	6063      	str	r3, [r4, #4]
 80014b0:	6923      	ldr	r3, [r4, #16]
 80014b2:	6023      	str	r3, [r4, #0]
 80014b4:	89a3      	ldrh	r3, [r4, #12]
 80014b6:	f043 0308 	orr.w	r3, r3, #8
 80014ba:	81a3      	strh	r3, [r4, #12]
 80014bc:	6923      	ldr	r3, [r4, #16]
 80014be:	b94b      	cbnz	r3, 80014d4 <__swsetup_r+0x7c>
 80014c0:	89a3      	ldrh	r3, [r4, #12]
 80014c2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80014c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80014ca:	d003      	beq.n	80014d4 <__swsetup_r+0x7c>
 80014cc:	4621      	mov	r1, r4
 80014ce:	4628      	mov	r0, r5
 80014d0:	f000 f850 	bl	8001574 <__smakebuf_r>
 80014d4:	89a0      	ldrh	r0, [r4, #12]
 80014d6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80014da:	f010 0301 	ands.w	r3, r0, #1
 80014de:	d00a      	beq.n	80014f6 <__swsetup_r+0x9e>
 80014e0:	2300      	movs	r3, #0
 80014e2:	60a3      	str	r3, [r4, #8]
 80014e4:	6963      	ldr	r3, [r4, #20]
 80014e6:	425b      	negs	r3, r3
 80014e8:	61a3      	str	r3, [r4, #24]
 80014ea:	6923      	ldr	r3, [r4, #16]
 80014ec:	b943      	cbnz	r3, 8001500 <__swsetup_r+0xa8>
 80014ee:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80014f2:	d1c4      	bne.n	800147e <__swsetup_r+0x26>
 80014f4:	bd38      	pop	{r3, r4, r5, pc}
 80014f6:	0781      	lsls	r1, r0, #30
 80014f8:	bf58      	it	pl
 80014fa:	6963      	ldrpl	r3, [r4, #20]
 80014fc:	60a3      	str	r3, [r4, #8]
 80014fe:	e7f4      	b.n	80014ea <__swsetup_r+0x92>
 8001500:	2000      	movs	r0, #0
 8001502:	e7f7      	b.n	80014f4 <__swsetup_r+0x9c>
 8001504:	20000058 	.word	0x20000058

08001508 <_sbrk_r>:
 8001508:	b538      	push	{r3, r4, r5, lr}
 800150a:	4d06      	ldr	r5, [pc, #24]	; (8001524 <_sbrk_r+0x1c>)
 800150c:	2300      	movs	r3, #0
 800150e:	4604      	mov	r4, r0
 8001510:	4608      	mov	r0, r1
 8001512:	602b      	str	r3, [r5, #0]
 8001514:	f7ff f834 	bl	8000580 <_sbrk>
 8001518:	1c43      	adds	r3, r0, #1
 800151a:	d102      	bne.n	8001522 <_sbrk_r+0x1a>
 800151c:	682b      	ldr	r3, [r5, #0]
 800151e:	b103      	cbz	r3, 8001522 <_sbrk_r+0x1a>
 8001520:	6023      	str	r3, [r4, #0]
 8001522:	bd38      	pop	{r3, r4, r5, pc}
 8001524:	200001bc 	.word	0x200001bc

08001528 <__swhatbuf_r>:
 8001528:	b570      	push	{r4, r5, r6, lr}
 800152a:	460c      	mov	r4, r1
 800152c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001530:	2900      	cmp	r1, #0
 8001532:	b096      	sub	sp, #88	; 0x58
 8001534:	4615      	mov	r5, r2
 8001536:	461e      	mov	r6, r3
 8001538:	da0d      	bge.n	8001556 <__swhatbuf_r+0x2e>
 800153a:	89a3      	ldrh	r3, [r4, #12]
 800153c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001540:	f04f 0100 	mov.w	r1, #0
 8001544:	bf0c      	ite	eq
 8001546:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800154a:	2340      	movne	r3, #64	; 0x40
 800154c:	2000      	movs	r0, #0
 800154e:	6031      	str	r1, [r6, #0]
 8001550:	602b      	str	r3, [r5, #0]
 8001552:	b016      	add	sp, #88	; 0x58
 8001554:	bd70      	pop	{r4, r5, r6, pc}
 8001556:	466a      	mov	r2, sp
 8001558:	f000 f848 	bl	80015ec <_fstat_r>
 800155c:	2800      	cmp	r0, #0
 800155e:	dbec      	blt.n	800153a <__swhatbuf_r+0x12>
 8001560:	9901      	ldr	r1, [sp, #4]
 8001562:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8001566:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800156a:	4259      	negs	r1, r3
 800156c:	4159      	adcs	r1, r3
 800156e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001572:	e7eb      	b.n	800154c <__swhatbuf_r+0x24>

08001574 <__smakebuf_r>:
 8001574:	898b      	ldrh	r3, [r1, #12]
 8001576:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001578:	079d      	lsls	r5, r3, #30
 800157a:	4606      	mov	r6, r0
 800157c:	460c      	mov	r4, r1
 800157e:	d507      	bpl.n	8001590 <__smakebuf_r+0x1c>
 8001580:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001584:	6023      	str	r3, [r4, #0]
 8001586:	6123      	str	r3, [r4, #16]
 8001588:	2301      	movs	r3, #1
 800158a:	6163      	str	r3, [r4, #20]
 800158c:	b002      	add	sp, #8
 800158e:	bd70      	pop	{r4, r5, r6, pc}
 8001590:	ab01      	add	r3, sp, #4
 8001592:	466a      	mov	r2, sp
 8001594:	f7ff ffc8 	bl	8001528 <__swhatbuf_r>
 8001598:	9900      	ldr	r1, [sp, #0]
 800159a:	4605      	mov	r5, r0
 800159c:	4630      	mov	r0, r6
 800159e:	f7ff fb0f 	bl	8000bc0 <_malloc_r>
 80015a2:	b948      	cbnz	r0, 80015b8 <__smakebuf_r+0x44>
 80015a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80015a8:	059a      	lsls	r2, r3, #22
 80015aa:	d4ef      	bmi.n	800158c <__smakebuf_r+0x18>
 80015ac:	f023 0303 	bic.w	r3, r3, #3
 80015b0:	f043 0302 	orr.w	r3, r3, #2
 80015b4:	81a3      	strh	r3, [r4, #12]
 80015b6:	e7e3      	b.n	8001580 <__smakebuf_r+0xc>
 80015b8:	89a3      	ldrh	r3, [r4, #12]
 80015ba:	6020      	str	r0, [r4, #0]
 80015bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015c0:	81a3      	strh	r3, [r4, #12]
 80015c2:	9b00      	ldr	r3, [sp, #0]
 80015c4:	6163      	str	r3, [r4, #20]
 80015c6:	9b01      	ldr	r3, [sp, #4]
 80015c8:	6120      	str	r0, [r4, #16]
 80015ca:	b15b      	cbz	r3, 80015e4 <__smakebuf_r+0x70>
 80015cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80015d0:	4630      	mov	r0, r6
 80015d2:	f000 f81d 	bl	8001610 <_isatty_r>
 80015d6:	b128      	cbz	r0, 80015e4 <__smakebuf_r+0x70>
 80015d8:	89a3      	ldrh	r3, [r4, #12]
 80015da:	f023 0303 	bic.w	r3, r3, #3
 80015de:	f043 0301 	orr.w	r3, r3, #1
 80015e2:	81a3      	strh	r3, [r4, #12]
 80015e4:	89a3      	ldrh	r3, [r4, #12]
 80015e6:	431d      	orrs	r5, r3
 80015e8:	81a5      	strh	r5, [r4, #12]
 80015ea:	e7cf      	b.n	800158c <__smakebuf_r+0x18>

080015ec <_fstat_r>:
 80015ec:	b538      	push	{r3, r4, r5, lr}
 80015ee:	4d07      	ldr	r5, [pc, #28]	; (800160c <_fstat_r+0x20>)
 80015f0:	2300      	movs	r3, #0
 80015f2:	4604      	mov	r4, r0
 80015f4:	4608      	mov	r0, r1
 80015f6:	4611      	mov	r1, r2
 80015f8:	602b      	str	r3, [r5, #0]
 80015fa:	f7fe ff98 	bl	800052e <_fstat>
 80015fe:	1c43      	adds	r3, r0, #1
 8001600:	d102      	bne.n	8001608 <_fstat_r+0x1c>
 8001602:	682b      	ldr	r3, [r5, #0]
 8001604:	b103      	cbz	r3, 8001608 <_fstat_r+0x1c>
 8001606:	6023      	str	r3, [r4, #0]
 8001608:	bd38      	pop	{r3, r4, r5, pc}
 800160a:	bf00      	nop
 800160c:	200001bc 	.word	0x200001bc

08001610 <_isatty_r>:
 8001610:	b538      	push	{r3, r4, r5, lr}
 8001612:	4d06      	ldr	r5, [pc, #24]	; (800162c <_isatty_r+0x1c>)
 8001614:	2300      	movs	r3, #0
 8001616:	4604      	mov	r4, r0
 8001618:	4608      	mov	r0, r1
 800161a:	602b      	str	r3, [r5, #0]
 800161c:	f7fe ff97 	bl	800054e <_isatty>
 8001620:	1c43      	adds	r3, r0, #1
 8001622:	d102      	bne.n	800162a <_isatty_r+0x1a>
 8001624:	682b      	ldr	r3, [r5, #0]
 8001626:	b103      	cbz	r3, 800162a <_isatty_r+0x1a>
 8001628:	6023      	str	r3, [r4, #0]
 800162a:	bd38      	pop	{r3, r4, r5, pc}
 800162c:	200001bc 	.word	0x200001bc

08001630 <_init>:
 8001630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001632:	bf00      	nop
 8001634:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001636:	bc08      	pop	{r3}
 8001638:	469e      	mov	lr, r3
 800163a:	4770      	bx	lr

0800163c <_fini>:
 800163c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800163e:	bf00      	nop
 8001640:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001642:	bc08      	pop	{r3}
 8001644:	469e      	mov	lr, r3
 8001646:	4770      	bx	lr
