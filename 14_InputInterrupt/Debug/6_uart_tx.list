
6_uart_tx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000330  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000528  08000530  00010530  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000528  08000528  00010530  2**0
                  CONTENTS
  4 .ARM          00000000  08000528  08000528  00010530  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000528  08000530  00010530  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000528  08000528  00010528  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800052c  0800052c  0001052c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010530  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000530  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000530  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00010530  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0001055e  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000699  00000000  00000000  000105a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000001e7  00000000  00000000  00010c3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000a8  00000000  00000000  00010e28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000074  00000000  00000000  00010ed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d008  00000000  00000000  00010f44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000007bb  00000000  00000000  0002df4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a34ca  00000000  00000000  0002e707  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000022c  00000000  00000000  000d1bd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009e  00000000  00000000  000d1e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000000 	.word	0x20000000
 8000214:	00000000 	.word	0x00000000
 8000218:	08000510 	.word	0x08000510

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000004 	.word	0x20000004
 8000234:	08000510 	.word	0x08000510

08000238 <main>:
void uart3_tx_init(void);
void uart_write(USART_TypeDef *USARTx, uint8_t value);


int main()
{
 8000238:	b580      	push	{r7, lr}
 800023a:	b082      	sub	sp, #8
 800023c:	af00      	add	r7, sp, #0
	int x;
	uart3_tx_init();
 800023e:	f000 f82b 	bl	8000298 <uart3_tx_init>


	while(1)
	{

		uart_write(USART3, 'A');
 8000242:	2141      	movs	r1, #65	; 0x41
 8000244:	4808      	ldr	r0, [pc, #32]	; (8000268 <main+0x30>)
 8000246:	f000 f811 	bl	800026c <uart_write>
		for(int i = 0; i < 9000; i++)
 800024a:	2300      	movs	r3, #0
 800024c:	603b      	str	r3, [r7, #0]
 800024e:	e005      	b.n	800025c <main+0x24>
		{
			x++;
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	3301      	adds	r3, #1
 8000254:	607b      	str	r3, [r7, #4]
		for(int i = 0; i < 9000; i++)
 8000256:	683b      	ldr	r3, [r7, #0]
 8000258:	3301      	adds	r3, #1
 800025a:	603b      	str	r3, [r7, #0]
 800025c:	683b      	ldr	r3, [r7, #0]
 800025e:	f242 3227 	movw	r2, #8999	; 0x2327
 8000262:	4293      	cmp	r3, r2
 8000264:	ddf4      	ble.n	8000250 <main+0x18>
		uart_write(USART3, 'A');
 8000266:	e7ec      	b.n	8000242 <main+0xa>
 8000268:	40004800 	.word	0x40004800

0800026c <uart_write>:
		}
	}
}

void uart_write(USART_TypeDef *USARTx, uint8_t value)
{
 800026c:	b480      	push	{r7}
 800026e:	b083      	sub	sp, #12
 8000270:	af00      	add	r7, sp, #0
 8000272:	6078      	str	r0, [r7, #4]
 8000274:	460b      	mov	r3, r1
 8000276:	70fb      	strb	r3, [r7, #3]
	// Make sure transmit data register is empty
	while (!(USARTx->ISR & USART_ISR_TXE)) {}
 8000278:	bf00      	nop
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	69db      	ldr	r3, [r3, #28]
 800027e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000282:	2b00      	cmp	r3, #0
 8000284:	d0f9      	beq.n	800027a <uart_write+0xe>

	// Write value into transmit data register
	USARTx->TDR = value;
 8000286:	78fa      	ldrb	r2, [r7, #3]
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	629a      	str	r2, [r3, #40]	; 0x28

}
 800028c:	bf00      	nop
 800028e:	370c      	adds	r7, #12
 8000290:	46bd      	mov	sp, r7
 8000292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000296:	4770      	bx	lr

08000298 <uart3_tx_init>:

void uart3_tx_init(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
	// To get pin ready as USART pin:
	// 1. Enable clock access to GPIOD
	set_ahb1_periph_clock(GPIODEN);
 800029c:	2008      	movs	r0, #8
 800029e:	f000 f883 	bl	80003a8 <set_ahb1_periph_clock>

	// 2. Set PD8 mode to alternate function
	set_pin_mode(GPIOD, UART3_TX, GPIO_ALTERNATE_MODE);
 80002a2:	2202      	movs	r2, #2
 80002a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002a8:	4810      	ldr	r0, [pc, #64]	; (80002ec <uart3_tx_init+0x54>)
 80002aa:	f000 f8a1 	bl	80003f0 <set_pin_mode>
	// 3. Set alternate function type to USART
	/*GPIOD->AFR[1] |= (1U<<0);
	GPIOD->AFR[1] |= (1U<<1);
	GPIOD->AFR[1] |= (1U<<2);
	GPIOD->AFR[1] &= ~(1U<<3);*/
	GPIOD->AFR[1]|=0x77;
 80002ae:	4b0f      	ldr	r3, [pc, #60]	; (80002ec <uart3_tx_init+0x54>)
 80002b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002b2:	4a0e      	ldr	r2, [pc, #56]	; (80002ec <uart3_tx_init+0x54>)
 80002b4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80002b8:	6253      	str	r3, [r2, #36]	; 0x24

	// To get USART/UART peripheral ready:
	// Enable clock to USART3 module
	set_apb1_periph_clock(USART3EN);
 80002ba:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80002be:	f000 f885 	bl	80003cc <set_apb1_periph_clock>

	// Configure USART parameters
	config_uart_parameters(USART3, UART_DATAWIDTH_8B, UART_PARITY_NONE, UART_STOPBITS_1);
 80002c2:	2300      	movs	r3, #0
 80002c4:	2200      	movs	r2, #0
 80002c6:	2100      	movs	r1, #0
 80002c8:	4809      	ldr	r0, [pc, #36]	; (80002f0 <uart3_tx_init+0x58>)
 80002ca:	f000 f84b 	bl	8000364 <config_uart_parameters>
	set_uart_transfer_direction(USART3, USART_CR1_TE);
 80002ce:	2108      	movs	r1, #8
 80002d0:	4807      	ldr	r0, [pc, #28]	; (80002f0 <uart3_tx_init+0x58>)
 80002d2:	f000 f821 	bl	8000318 <set_uart_transfer_direction>

	// Set baudrate
	uart_set_baudrate(USART3, 16000000, 57600);
 80002d6:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80002da:	4906      	ldr	r1, [pc, #24]	; (80002f4 <uart3_tx_init+0x5c>)
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <uart3_tx_init+0x58>)
 80002de:	f000 f82e 	bl	800033e <uart_set_baudrate>

	// Enable USART
	//USART3->CR1 |= USART_CR1_UE;
	uart_enable(USART3);
 80002e2:	4803      	ldr	r0, [pc, #12]	; (80002f0 <uart3_tx_init+0x58>)
 80002e4:	f000 f808 	bl	80002f8 <uart_enable>
}
 80002e8:	bf00      	nop
 80002ea:	bd80      	pop	{r7, pc}
 80002ec:	40020c00 	.word	0x40020c00
 80002f0:	40004800 	.word	0x40004800
 80002f4:	00f42400 	.word	0x00f42400

080002f8 <uart_enable>:

void uart_enable(USART_TypeDef *USARTx)
{
 80002f8:	b480      	push	{r7}
 80002fa:	b083      	sub	sp, #12
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
	SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	f043 0201 	orr.w	r2, r3, #1
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	601a      	str	r2, [r3, #0]
}
 800030c:	bf00      	nop
 800030e:	370c      	adds	r7, #12
 8000310:	46bd      	mov	sp, r7
 8000312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000316:	4770      	bx	lr

08000318 <set_uart_transfer_direction>:

void set_uart_transfer_direction(USART_TypeDef *USARTx, uint32_t TransferDirection)
{
 8000318:	b480      	push	{r7}
 800031a:	b083      	sub	sp, #12
 800031c:	af00      	add	r7, sp, #0
 800031e:	6078      	str	r0, [r7, #4]
 8000320:	6039      	str	r1, [r7, #0]
	MODIFY_REG(USARTx->CR1, (USART_CR1_RE |USART_CR1_TE), TransferDirection);
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	f023 020c 	bic.w	r2, r3, #12
 800032a:	683b      	ldr	r3, [r7, #0]
 800032c:	431a      	orrs	r2, r3
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	601a      	str	r2, [r3, #0]
}
 8000332:	bf00      	nop
 8000334:	370c      	adds	r7, #12
 8000336:	46bd      	mov	sp, r7
 8000338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033c:	4770      	bx	lr

0800033e <uart_set_baudrate>:

void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate)
{
 800033e:	b580      	push	{r7, lr}
 8000340:	b084      	sub	sp, #16
 8000342:	af00      	add	r7, sp, #0
 8000344:	60f8      	str	r0, [r7, #12]
 8000346:	60b9      	str	r1, [r7, #8]
 8000348:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_div(PeriphClk, BaudRate);
 800034a:	6879      	ldr	r1, [r7, #4]
 800034c:	68b8      	ldr	r0, [r7, #8]
 800034e:	f000 f87e 	bl	800044e <compute_uart_div>
 8000352:	4603      	mov	r3, r0
 8000354:	461a      	mov	r2, r3
 8000356:	68fb      	ldr	r3, [r7, #12]
 8000358:	60da      	str	r2, [r3, #12]
}
 800035a:	bf00      	nop
 800035c:	3710      	adds	r7, #16
 800035e:	46bd      	mov	sp, r7
 8000360:	bd80      	pop	{r7, pc}
	...

08000364 <config_uart_parameters>:

void config_uart_parameters(USART_TypeDef *USARTx, uint32_t DataWidth, uint32_t Parity, uint32_t StopBits)
{
 8000364:	b480      	push	{r7}
 8000366:	b085      	sub	sp, #20
 8000368:	af00      	add	r7, sp, #0
 800036a:	60f8      	str	r0, [r7, #12]
 800036c:	60b9      	str	r1, [r7, #8]
 800036e:	607a      	str	r2, [r7, #4]
 8000370:	603b      	str	r3, [r7, #0]
	MODIFY_REG(USARTx->CR1, (USART_CR1_PS | USART_CR1_PCE | USART_CR1_M), Parity | DataWidth);
 8000372:	68fb      	ldr	r3, [r7, #12]
 8000374:	681a      	ldr	r2, [r3, #0]
 8000376:	4b0b      	ldr	r3, [pc, #44]	; (80003a4 <config_uart_parameters+0x40>)
 8000378:	4013      	ands	r3, r2
 800037a:	6879      	ldr	r1, [r7, #4]
 800037c:	68ba      	ldr	r2, [r7, #8]
 800037e:	430a      	orrs	r2, r1
 8000380:	431a      	orrs	r2, r3
 8000382:	68fb      	ldr	r3, [r7, #12]
 8000384:	601a      	str	r2, [r3, #0]
	MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8000386:	68fb      	ldr	r3, [r7, #12]
 8000388:	685b      	ldr	r3, [r3, #4]
 800038a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800038e:	683b      	ldr	r3, [r7, #0]
 8000390:	431a      	orrs	r2, r3
 8000392:	68fb      	ldr	r3, [r7, #12]
 8000394:	605a      	str	r2, [r3, #4]
}
 8000396:	bf00      	nop
 8000398:	3714      	adds	r7, #20
 800039a:	46bd      	mov	sp, r7
 800039c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a0:	4770      	bx	lr
 80003a2:	bf00      	nop
 80003a4:	efffe9ff 	.word	0xefffe9ff

080003a8 <set_ahb1_periph_clock>:

void set_ahb1_periph_clock(uint32_t periphs)
{
 80003a8:	b480      	push	{r7}
 80003aa:	b083      	sub	sp, #12
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
	SET_BIT(RCC->AHB1ENR, periphs);
 80003b0:	4b05      	ldr	r3, [pc, #20]	; (80003c8 <set_ahb1_periph_clock+0x20>)
 80003b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80003b4:	4904      	ldr	r1, [pc, #16]	; (80003c8 <set_ahb1_periph_clock+0x20>)
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	4313      	orrs	r3, r2
 80003ba:	630b      	str	r3, [r1, #48]	; 0x30
}
 80003bc:	bf00      	nop
 80003be:	370c      	adds	r7, #12
 80003c0:	46bd      	mov	sp, r7
 80003c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c6:	4770      	bx	lr
 80003c8:	40023800 	.word	0x40023800

080003cc <set_apb1_periph_clock>:
{
	SET_BIT(RCC->AHB2ENR, periphs);
}

void set_apb1_periph_clock(uint32_t periphs)
{
 80003cc:	b480      	push	{r7}
 80003ce:	b083      	sub	sp, #12
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]
	SET_BIT(RCC->APB1ENR, periphs);
 80003d4:	4b05      	ldr	r3, [pc, #20]	; (80003ec <set_apb1_periph_clock+0x20>)
 80003d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80003d8:	4904      	ldr	r1, [pc, #16]	; (80003ec <set_apb1_periph_clock+0x20>)
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	4313      	orrs	r3, r2
 80003de:	640b      	str	r3, [r1, #64]	; 0x40
}
 80003e0:	bf00      	nop
 80003e2:	370c      	adds	r7, #12
 80003e4:	46bd      	mov	sp, r7
 80003e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ea:	4770      	bx	lr
 80003ec:	40023800 	.word	0x40023800

080003f0 <set_pin_mode>:
{
	SET_BIT(RCC->APB2ENR, periphs);
}

void set_pin_mode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80003f0:	b480      	push	{r7}
 80003f2:	b089      	sub	sp, #36	; 0x24
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	60f8      	str	r0, [r7, #12]
 80003f8:	60b9      	str	r1, [r7, #8]
 80003fa:	607a      	str	r2, [r7, #4]
	// set the relevant bit in the mode register
	// CLEARMASK explanation:
	// 0b 11 << 16 (shift 0b11 to position 16 (LSB occupies bit 16, MSB occupies bit 17))
	MODIFY_REG(GPIOx->MODER, (0x3 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80003fc:	68fb      	ldr	r3, [r7, #12]
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	68ba      	ldr	r2, [r7, #8]
 8000402:	617a      	str	r2, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000404:	697a      	ldr	r2, [r7, #20]
 8000406:	fa92 f2a2 	rbit	r2, r2
 800040a:	613a      	str	r2, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800040c:	693a      	ldr	r2, [r7, #16]
 800040e:	fab2 f282 	clz	r2, r2
 8000412:	b2d2      	uxtb	r2, r2
 8000414:	0052      	lsls	r2, r2, #1
 8000416:	2103      	movs	r1, #3
 8000418:	fa01 f202 	lsl.w	r2, r1, r2
 800041c:	43d2      	mvns	r2, r2
 800041e:	401a      	ands	r2, r3
 8000420:	68bb      	ldr	r3, [r7, #8]
 8000422:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000424:	69fb      	ldr	r3, [r7, #28]
 8000426:	fa93 f3a3 	rbit	r3, r3
 800042a:	61bb      	str	r3, [r7, #24]
  return result;
 800042c:	69bb      	ldr	r3, [r7, #24]
 800042e:	fab3 f383 	clz	r3, r3
 8000432:	b2db      	uxtb	r3, r3
 8000434:	005b      	lsls	r3, r3, #1
 8000436:	6879      	ldr	r1, [r7, #4]
 8000438:	fa01 f303 	lsl.w	r3, r1, r3
 800043c:	431a      	orrs	r2, r3
 800043e:	68fb      	ldr	r3, [r7, #12]
 8000440:	601a      	str	r2, [r3, #0]
}
 8000442:	bf00      	nop
 8000444:	3724      	adds	r7, #36	; 0x24
 8000446:	46bd      	mov	sp, r7
 8000448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044c:	4770      	bx	lr

0800044e <compute_uart_div>:

uint16_t compute_uart_div(uint32_t PeriphClk, uint32_t BaudRate)
{
 800044e:	b480      	push	{r7}
 8000450:	b083      	sub	sp, #12
 8000452:	af00      	add	r7, sp, #0
 8000454:	6078      	str	r0, [r7, #4]
 8000456:	6039      	str	r1, [r7, #0]
	return (PeriphClk + (BaudRate/2U))/BaudRate;
 8000458:	683b      	ldr	r3, [r7, #0]
 800045a:	085a      	lsrs	r2, r3, #1
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	441a      	add	r2, r3
 8000460:	683b      	ldr	r3, [r7, #0]
 8000462:	fbb2 f3f3 	udiv	r3, r2, r3
 8000466:	b29b      	uxth	r3, r3
}
 8000468:	4618      	mov	r0, r3
 800046a:	370c      	adds	r7, #12
 800046c:	46bd      	mov	sp, r7
 800046e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000472:	4770      	bx	lr

08000474 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000474:	480d      	ldr	r0, [pc, #52]	; (80004ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000476:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000478:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800047c:	480c      	ldr	r0, [pc, #48]	; (80004b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800047e:	490d      	ldr	r1, [pc, #52]	; (80004b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000480:	4a0d      	ldr	r2, [pc, #52]	; (80004b8 <LoopForever+0xe>)
  movs r3, #0
 8000482:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000484:	e002      	b.n	800048c <LoopCopyDataInit>

08000486 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000486:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000488:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800048a:	3304      	adds	r3, #4

0800048c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800048c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800048e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000490:	d3f9      	bcc.n	8000486 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000492:	4a0a      	ldr	r2, [pc, #40]	; (80004bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000494:	4c0a      	ldr	r4, [pc, #40]	; (80004c0 <LoopForever+0x16>)
  movs r3, #0
 8000496:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000498:	e001      	b.n	800049e <LoopFillZerobss>

0800049a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800049a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800049c:	3204      	adds	r2, #4

0800049e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800049e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004a0:	d3fb      	bcc.n	800049a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004a2:	f000 f811 	bl	80004c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004a6:	f7ff fec7 	bl	8000238 <main>

080004aa <LoopForever>:

LoopForever:
  b LoopForever
 80004aa:	e7fe      	b.n	80004aa <LoopForever>
  ldr   r0, =_estack
 80004ac:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80004b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004b4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80004b8:	08000530 	.word	0x08000530
  ldr r2, =_sbss
 80004bc:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80004c0:	2000001c 	.word	0x2000001c

080004c4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004c4:	e7fe      	b.n	80004c4 <ADC_IRQHandler>
	...

080004c8 <__libc_init_array>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	4d0d      	ldr	r5, [pc, #52]	; (8000500 <__libc_init_array+0x38>)
 80004cc:	4c0d      	ldr	r4, [pc, #52]	; (8000504 <__libc_init_array+0x3c>)
 80004ce:	1b64      	subs	r4, r4, r5
 80004d0:	10a4      	asrs	r4, r4, #2
 80004d2:	2600      	movs	r6, #0
 80004d4:	42a6      	cmp	r6, r4
 80004d6:	d109      	bne.n	80004ec <__libc_init_array+0x24>
 80004d8:	4d0b      	ldr	r5, [pc, #44]	; (8000508 <__libc_init_array+0x40>)
 80004da:	4c0c      	ldr	r4, [pc, #48]	; (800050c <__libc_init_array+0x44>)
 80004dc:	f000 f818 	bl	8000510 <_init>
 80004e0:	1b64      	subs	r4, r4, r5
 80004e2:	10a4      	asrs	r4, r4, #2
 80004e4:	2600      	movs	r6, #0
 80004e6:	42a6      	cmp	r6, r4
 80004e8:	d105      	bne.n	80004f6 <__libc_init_array+0x2e>
 80004ea:	bd70      	pop	{r4, r5, r6, pc}
 80004ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80004f0:	4798      	blx	r3
 80004f2:	3601      	adds	r6, #1
 80004f4:	e7ee      	b.n	80004d4 <__libc_init_array+0xc>
 80004f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80004fa:	4798      	blx	r3
 80004fc:	3601      	adds	r6, #1
 80004fe:	e7f2      	b.n	80004e6 <__libc_init_array+0x1e>
 8000500:	08000528 	.word	0x08000528
 8000504:	08000528 	.word	0x08000528
 8000508:	08000528 	.word	0x08000528
 800050c:	0800052c 	.word	0x0800052c

08000510 <_init>:
 8000510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000512:	bf00      	nop
 8000514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000516:	bc08      	pop	{r3}
 8000518:	469e      	mov	lr, r3
 800051a:	4770      	bx	lr

0800051c <_fini>:
 800051c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800051e:	bf00      	nop
 8000520:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000522:	bc08      	pop	{r3}
 8000524:	469e      	mov	lr, r3
 8000526:	4770      	bx	lr
