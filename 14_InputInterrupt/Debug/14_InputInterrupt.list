
14_InputInterrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000014fc  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  080016fc  080016fc  000116fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001740  08001740  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08001740  08001740  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001740  08001740  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001740  08001740  00011740  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001744  08001744  00011744  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08001748  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  2000005c  080017a4  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  080017a4  000201c8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008a  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001e3a  00000000  00000000  000200cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000999  00000000  00000000  00021f07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000258  00000000  00000000  000228a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000198  00000000  00000000  00022af8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f204  00000000  00000000  00022c90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000353c  00000000  00000000  00041e94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a99d5  00000000  00000000  000453d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000ed4  00000000  00000000  000eeda8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009e  00000000  00000000  000efc7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000005c 	.word	0x2000005c
 800021c:	00000000 	.word	0x00000000
 8000220:	080016e4 	.word	0x080016e4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000060 	.word	0x20000060
 800023c:	080016e4 	.word	0x080016e4

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002e0:	b480      	push	{r7}
 80002e2:	b083      	sub	sp, #12
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	4603      	mov	r3, r0
 80002e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	db0b      	blt.n	800030a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002f2:	79fb      	ldrb	r3, [r7, #7]
 80002f4:	f003 021f 	and.w	r2, r3, #31
 80002f8:	4907      	ldr	r1, [pc, #28]	; (8000318 <__NVIC_EnableIRQ+0x38>)
 80002fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002fe:	095b      	lsrs	r3, r3, #5
 8000300:	2001      	movs	r0, #1
 8000302:	fa00 f202 	lsl.w	r2, r0, r2
 8000306:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800030a:	bf00      	nop
 800030c:	370c      	adds	r7, #12
 800030e:	46bd      	mov	sp, r7
 8000310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000314:	4770      	bx	lr
 8000316:	bf00      	nop
 8000318:	e000e100 	.word	0xe000e100

0800031c <pc13_exti_init>:

#define GPIOCEN (1U<<2)
#define SYSCFGEN (1U<<14)

void pc13_exti_init(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	af00      	add	r7, sp, #0
	// Enable clock access to port C. Using PC13 for this example.
	RCC->AHB1ENR |= GPIOCEN;
 8000320:	4b23      	ldr	r3, [pc, #140]	; (80003b0 <pc13_exti_init+0x94>)
 8000322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000324:	4a22      	ldr	r2, [pc, #136]	; (80003b0 <pc13_exti_init+0x94>)
 8000326:	f043 0304 	orr.w	r3, r3, #4
 800032a:	6313      	str	r3, [r2, #48]	; 0x30

	// Set PC13 to input.
	GPIOC->MODER &= ~(1U<<26);
 800032c:	4b21      	ldr	r3, [pc, #132]	; (80003b4 <pc13_exti_init+0x98>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	4a20      	ldr	r2, [pc, #128]	; (80003b4 <pc13_exti_init+0x98>)
 8000332:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8000336:	6013      	str	r3, [r2, #0]
	GPIOC->MODER &= ~(1U<<27);
 8000338:	4b1e      	ldr	r3, [pc, #120]	; (80003b4 <pc13_exti_init+0x98>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	4a1d      	ldr	r2, [pc, #116]	; (80003b4 <pc13_exti_init+0x98>)
 800033e:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8000342:	6013      	str	r3, [r2, #0]

	// Enable clock access to SYSCFG module.
	RCC->APB2ENR |= SYSCFGEN;
 8000344:	4b1a      	ldr	r3, [pc, #104]	; (80003b0 <pc13_exti_init+0x94>)
 8000346:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000348:	4a19      	ldr	r2, [pc, #100]	; (80003b0 <pc13_exti_init+0x94>)
 800034a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800034e:	6453      	str	r3, [r2, #68]	; 0x44

	// Clear port selection for EXTI13.
	SYSCFG->EXTICR[3] &= ~(1U<<4);
 8000350:	4b19      	ldr	r3, [pc, #100]	; (80003b8 <pc13_exti_init+0x9c>)
 8000352:	695b      	ldr	r3, [r3, #20]
 8000354:	4a18      	ldr	r2, [pc, #96]	; (80003b8 <pc13_exti_init+0x9c>)
 8000356:	f023 0310 	bic.w	r3, r3, #16
 800035a:	6153      	str	r3, [r2, #20]
	SYSCFG->EXTICR[3] &= ~(1U<<5);
 800035c:	4b16      	ldr	r3, [pc, #88]	; (80003b8 <pc13_exti_init+0x9c>)
 800035e:	695b      	ldr	r3, [r3, #20]
 8000360:	4a15      	ldr	r2, [pc, #84]	; (80003b8 <pc13_exti_init+0x9c>)
 8000362:	f023 0320 	bic.w	r3, r3, #32
 8000366:	6153      	str	r3, [r2, #20]
	SYSCFG->EXTICR[3] &= ~(1U<<6);
 8000368:	4b13      	ldr	r3, [pc, #76]	; (80003b8 <pc13_exti_init+0x9c>)
 800036a:	695b      	ldr	r3, [r3, #20]
 800036c:	4a12      	ldr	r2, [pc, #72]	; (80003b8 <pc13_exti_init+0x9c>)
 800036e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000372:	6153      	str	r3, [r2, #20]
	SYSCFG->EXTICR[3] &= ~(1U<<7);
 8000374:	4b10      	ldr	r3, [pc, #64]	; (80003b8 <pc13_exti_init+0x9c>)
 8000376:	695b      	ldr	r3, [r3, #20]
 8000378:	4a0f      	ldr	r2, [pc, #60]	; (80003b8 <pc13_exti_init+0x9c>)
 800037a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800037e:	6153      	str	r3, [r2, #20]

	// Select port C for EXTI13.
	SYSCFG->EXTICR[3] |= (1U<<5);
 8000380:	4b0d      	ldr	r3, [pc, #52]	; (80003b8 <pc13_exti_init+0x9c>)
 8000382:	695b      	ldr	r3, [r3, #20]
 8000384:	4a0c      	ldr	r2, [pc, #48]	; (80003b8 <pc13_exti_init+0x9c>)
 8000386:	f043 0320 	orr.w	r3, r3, #32
 800038a:	6153      	str	r3, [r2, #20]

	// Un-mask EXTI13.
	EXTI->IMR |= (1U<<13);
 800038c:	4b0b      	ldr	r3, [pc, #44]	; (80003bc <pc13_exti_init+0xa0>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	4a0a      	ldr	r2, [pc, #40]	; (80003bc <pc13_exti_init+0xa0>)
 8000392:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000396:	6013      	str	r3, [r2, #0]

	// Select falling edge to trigger interrupt.
	EXTI->FTSR |= (1U<<13);
 8000398:	4b08      	ldr	r3, [pc, #32]	; (80003bc <pc13_exti_init+0xa0>)
 800039a:	68db      	ldr	r3, [r3, #12]
 800039c:	4a07      	ldr	r2, [pc, #28]	; (80003bc <pc13_exti_init+0xa0>)
 800039e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80003a2:	60d3      	str	r3, [r2, #12]

	// Enable EXTI13 in NVIC.
	NVIC_EnableIRQ(EXTI15_10_IRQn);
 80003a4:	2028      	movs	r0, #40	; 0x28
 80003a6:	f7ff ff9b 	bl	80002e0 <__NVIC_EnableIRQ>
}
 80003aa:	bf00      	nop
 80003ac:	bd80      	pop	{r7, pc}
 80003ae:	bf00      	nop
 80003b0:	40023800 	.word	0x40023800
 80003b4:	40020800 	.word	0x40020800
 80003b8:	40013800 	.word	0x40013800
 80003bc:	40013c00 	.word	0x40013c00

080003c0 <set_pin_mode>:
 */

#include "gpio.h"

void set_pin_mode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80003c0:	b480      	push	{r7}
 80003c2:	b089      	sub	sp, #36	; 0x24
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	60f8      	str	r0, [r7, #12]
 80003c8:	60b9      	str	r1, [r7, #8]
 80003ca:	607a      	str	r2, [r7, #4]
	// set the relevant bit in the mode register
	// CLEARMASK explanation:
	// 0b 11 << 16 (shift 0b11 to position 16 (LSB occupies bit 16, MSB occupies bit 17))
	MODIFY_REG(GPIOx->MODER, (0x3 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80003cc:	68fb      	ldr	r3, [r7, #12]
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	68ba      	ldr	r2, [r7, #8]
 80003d2:	617a      	str	r2, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80003d4:	697a      	ldr	r2, [r7, #20]
 80003d6:	fa92 f2a2 	rbit	r2, r2
 80003da:	613a      	str	r2, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80003dc:	693a      	ldr	r2, [r7, #16]
 80003de:	fab2 f282 	clz	r2, r2
 80003e2:	b2d2      	uxtb	r2, r2
 80003e4:	0052      	lsls	r2, r2, #1
 80003e6:	2103      	movs	r1, #3
 80003e8:	fa01 f202 	lsl.w	r2, r1, r2
 80003ec:	43d2      	mvns	r2, r2
 80003ee:	401a      	ands	r2, r3
 80003f0:	68bb      	ldr	r3, [r7, #8]
 80003f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80003f4:	69fb      	ldr	r3, [r7, #28]
 80003f6:	fa93 f3a3 	rbit	r3, r3
 80003fa:	61bb      	str	r3, [r7, #24]
  return result;
 80003fc:	69bb      	ldr	r3, [r7, #24]
 80003fe:	fab3 f383 	clz	r3, r3
 8000402:	b2db      	uxtb	r3, r3
 8000404:	005b      	lsls	r3, r3, #1
 8000406:	6879      	ldr	r1, [r7, #4]
 8000408:	fa01 f303 	lsl.w	r3, r1, r3
 800040c:	431a      	orrs	r2, r3
 800040e:	68fb      	ldr	r3, [r7, #12]
 8000410:	601a      	str	r2, [r3, #0]
}
 8000412:	bf00      	nop
 8000414:	3724      	adds	r7, #36	; 0x24
 8000416:	46bd      	mov	sp, r7
 8000418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041c:	4770      	bx	lr
	...

08000420 <all_leds_init>:
// Configure the GPIOB_MODE_R register. MODER0, MODER7, and MODER14 will each be set to 2'b01 to configure them as outputs.

#include "led.h"

void all_leds_init(void)
{
 8000420:	b480      	push	{r7}
 8000422:	af00      	add	r7, sp, #0
	// Enable clock access to port B.
	RCC->AHB1ENR |= GPIOB_CLK_EN;
 8000424:	4b0b      	ldr	r3, [pc, #44]	; (8000454 <all_leds_init+0x34>)
 8000426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000428:	4a0a      	ldr	r2, [pc, #40]	; (8000454 <all_leds_init+0x34>)
 800042a:	f043 0302 	orr.w	r3, r3, #2
 800042e:	6313      	str	r3, [r2, #48]	; 0x30

	// Configure GPIOs as outputs to drive LEDs.
	GPIOB->MODER |= USER_LED1_MODER0 | USER_LED2_MODER0 | USER_LED3_MODER0;
 8000430:	4b09      	ldr	r3, [pc, #36]	; (8000458 <all_leds_init+0x38>)
 8000432:	681a      	ldr	r2, [r3, #0]
 8000434:	4908      	ldr	r1, [pc, #32]	; (8000458 <all_leds_init+0x38>)
 8000436:	4b09      	ldr	r3, [pc, #36]	; (800045c <all_leds_init+0x3c>)
 8000438:	4313      	orrs	r3, r2
 800043a:	600b      	str	r3, [r1, #0]
	GPIOB->MODER &= ~(USER_LED1_MODER1 | USER_LED2_MODER1 | USER_LED3_MODER1);
 800043c:	4b06      	ldr	r3, [pc, #24]	; (8000458 <all_leds_init+0x38>)
 800043e:	681a      	ldr	r2, [r3, #0]
 8000440:	4905      	ldr	r1, [pc, #20]	; (8000458 <all_leds_init+0x38>)
 8000442:	4b07      	ldr	r3, [pc, #28]	; (8000460 <all_leds_init+0x40>)
 8000444:	4013      	ands	r3, r2
 8000446:	600b      	str	r3, [r1, #0]

}
 8000448:	bf00      	nop
 800044a:	46bd      	mov	sp, r7
 800044c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000450:	4770      	bx	lr
 8000452:	bf00      	nop
 8000454:	40023800 	.word	0x40023800
 8000458:	40020400 	.word	0x40020400
 800045c:	10004001 	.word	0x10004001
 8000460:	dfff7ffd 	.word	0xdfff7ffd

08000464 <all_leds_toggle>:
{
	GPIOB->ODR &= ~(red_led | green_led | blue_led);
}

void all_leds_toggle(void)
{
 8000464:	b480      	push	{r7}
 8000466:	af00      	add	r7, sp, #0
	GPIOB->ODR ^= red_led | green_led | blue_led;
 8000468:	4b05      	ldr	r3, [pc, #20]	; (8000480 <all_leds_toggle+0x1c>)
 800046a:	695a      	ldr	r2, [r3, #20]
 800046c:	4904      	ldr	r1, [pc, #16]	; (8000480 <all_leds_toggle+0x1c>)
 800046e:	f244 0381 	movw	r3, #16513	; 0x4081
 8000472:	4053      	eors	r3, r2
 8000474:	614b      	str	r3, [r1, #20]
}
 8000476:	bf00      	nop
 8000478:	46bd      	mov	sp, r7
 800047a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047e:	4770      	bx	lr
 8000480:	40020400 	.word	0x40020400

08000484 <main>:

#define DELAY 50

char ch;
int main()
{
 8000484:	b580      	push	{r7, lr}
 8000486:	af00      	add	r7, sp, #0
	uart3_rxtx_init();
 8000488:	f000 f97e 	bl	8000788 <uart3_rxtx_init>
	all_leds_init();
 800048c:	f7ff ffc8 	bl	8000420 <all_leds_init>
	pc13_exti_init();
 8000490:	f7ff ff44 	bl	800031c <pc13_exti_init>

	while(1)
 8000494:	e7fe      	b.n	8000494 <main+0x10>
	...

08000498 <user_btn_callback>:


}

static void user_btn_callback(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	af00      	add	r7, sp, #0
	all_leds_toggle();
 800049c:	f7ff ffe2 	bl	8000464 <all_leds_toggle>
	printf("BTN Pressed...\n\r");
 80004a0:	4802      	ldr	r0, [pc, #8]	; (80004ac <user_btn_callback+0x14>)
 80004a2:	f000 faab 	bl	80009fc <iprintf>
}
 80004a6:	bf00      	nop
 80004a8:	bd80      	pop	{r7, pc}
 80004aa:	bf00      	nop
 80004ac:	080016fc 	.word	0x080016fc

080004b0 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	af00      	add	r7, sp, #0
	if (EXTI->PR != 0)
 80004b4:	4b06      	ldr	r3, [pc, #24]	; (80004d0 <EXTI15_10_IRQHandler+0x20>)
 80004b6:	695b      	ldr	r3, [r3, #20]
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d007      	beq.n	80004cc <EXTI15_10_IRQHandler+0x1c>
	{
		// Clear PR Flag to re arm the interrupt.
		EXTI->PR |= PIN13;
 80004bc:	4b04      	ldr	r3, [pc, #16]	; (80004d0 <EXTI15_10_IRQHandler+0x20>)
 80004be:	695b      	ldr	r3, [r3, #20]
 80004c0:	4a03      	ldr	r2, [pc, #12]	; (80004d0 <EXTI15_10_IRQHandler+0x20>)
 80004c2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80004c6:	6153      	str	r3, [r2, #20]

		// Do something
		user_btn_callback();
 80004c8:	f7ff ffe6 	bl	8000498 <user_btn_callback>
	}
}
 80004cc:	bf00      	nop
 80004ce:	bd80      	pop	{r7, pc}
 80004d0:	40013c00 	.word	0x40013c00

080004d4 <set_ahb1_periph_clock>:
 */

#include "rcc.h"

void set_ahb1_periph_clock(uint32_t periphs)
{
 80004d4:	b480      	push	{r7}
 80004d6:	b083      	sub	sp, #12
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
	SET_BIT(RCC->AHB1ENR, periphs);
 80004dc:	4b05      	ldr	r3, [pc, #20]	; (80004f4 <set_ahb1_periph_clock+0x20>)
 80004de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80004e0:	4904      	ldr	r1, [pc, #16]	; (80004f4 <set_ahb1_periph_clock+0x20>)
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	4313      	orrs	r3, r2
 80004e6:	630b      	str	r3, [r1, #48]	; 0x30
}
 80004e8:	bf00      	nop
 80004ea:	370c      	adds	r7, #12
 80004ec:	46bd      	mov	sp, r7
 80004ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f2:	4770      	bx	lr
 80004f4:	40023800 	.word	0x40023800

080004f8 <set_apb1_periph_clock>:
{
	SET_BIT(RCC->AHB2ENR, periphs);
}

void set_apb1_periph_clock(uint32_t periphs)
{
 80004f8:	b480      	push	{r7}
 80004fa:	b083      	sub	sp, #12
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
	SET_BIT(RCC->APB1ENR, periphs);
 8000500:	4b05      	ldr	r3, [pc, #20]	; (8000518 <set_apb1_periph_clock+0x20>)
 8000502:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000504:	4904      	ldr	r1, [pc, #16]	; (8000518 <set_apb1_periph_clock+0x20>)
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	4313      	orrs	r3, r2
 800050a:	640b      	str	r3, [r1, #64]	; 0x40
}
 800050c:	bf00      	nop
 800050e:	370c      	adds	r7, #12
 8000510:	46bd      	mov	sp, r7
 8000512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000516:	4770      	bx	lr
 8000518:	40023800 	.word	0x40023800

0800051c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b086      	sub	sp, #24
 8000520:	af00      	add	r7, sp, #0
 8000522:	60f8      	str	r0, [r7, #12]
 8000524:	60b9      	str	r1, [r7, #8]
 8000526:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000528:	2300      	movs	r3, #0
 800052a:	617b      	str	r3, [r7, #20]
 800052c:	e00a      	b.n	8000544 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800052e:	f3af 8000 	nop.w
 8000532:	4601      	mov	r1, r0
 8000534:	68bb      	ldr	r3, [r7, #8]
 8000536:	1c5a      	adds	r2, r3, #1
 8000538:	60ba      	str	r2, [r7, #8]
 800053a:	b2ca      	uxtb	r2, r1
 800053c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800053e:	697b      	ldr	r3, [r7, #20]
 8000540:	3301      	adds	r3, #1
 8000542:	617b      	str	r3, [r7, #20]
 8000544:	697a      	ldr	r2, [r7, #20]
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	429a      	cmp	r2, r3
 800054a:	dbf0      	blt.n	800052e <_read+0x12>
  }

  return len;
 800054c:	687b      	ldr	r3, [r7, #4]
}
 800054e:	4618      	mov	r0, r3
 8000550:	3718      	adds	r7, #24
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}

08000556 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000556:	b580      	push	{r7, lr}
 8000558:	b086      	sub	sp, #24
 800055a:	af00      	add	r7, sp, #0
 800055c:	60f8      	str	r0, [r7, #12]
 800055e:	60b9      	str	r1, [r7, #8]
 8000560:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000562:	2300      	movs	r3, #0
 8000564:	617b      	str	r3, [r7, #20]
 8000566:	e009      	b.n	800057c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000568:	68bb      	ldr	r3, [r7, #8]
 800056a:	1c5a      	adds	r2, r3, #1
 800056c:	60ba      	str	r2, [r7, #8]
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	4618      	mov	r0, r3
 8000572:	f000 f88d 	bl	8000690 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000576:	697b      	ldr	r3, [r7, #20]
 8000578:	3301      	adds	r3, #1
 800057a:	617b      	str	r3, [r7, #20]
 800057c:	697a      	ldr	r2, [r7, #20]
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	429a      	cmp	r2, r3
 8000582:	dbf1      	blt.n	8000568 <_write+0x12>
  }
  return len;
 8000584:	687b      	ldr	r3, [r7, #4]
}
 8000586:	4618      	mov	r0, r3
 8000588:	3718      	adds	r7, #24
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}

0800058e <_close>:

int _close(int file)
{
 800058e:	b480      	push	{r7}
 8000590:	b083      	sub	sp, #12
 8000592:	af00      	add	r7, sp, #0
 8000594:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000596:	f04f 33ff 	mov.w	r3, #4294967295
}
 800059a:	4618      	mov	r0, r3
 800059c:	370c      	adds	r7, #12
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr

080005a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80005a6:	b480      	push	{r7}
 80005a8:	b083      	sub	sp, #12
 80005aa:	af00      	add	r7, sp, #0
 80005ac:	6078      	str	r0, [r7, #4]
 80005ae:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80005b0:	683b      	ldr	r3, [r7, #0]
 80005b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80005b6:	605a      	str	r2, [r3, #4]
  return 0;
 80005b8:	2300      	movs	r3, #0
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	370c      	adds	r7, #12
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr

080005c6 <_isatty>:

int _isatty(int file)
{
 80005c6:	b480      	push	{r7}
 80005c8:	b083      	sub	sp, #12
 80005ca:	af00      	add	r7, sp, #0
 80005cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80005ce:	2301      	movs	r3, #1
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	370c      	adds	r7, #12
 80005d4:	46bd      	mov	sp, r7
 80005d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005da:	4770      	bx	lr

080005dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80005dc:	b480      	push	{r7}
 80005de:	b085      	sub	sp, #20
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	60f8      	str	r0, [r7, #12]
 80005e4:	60b9      	str	r1, [r7, #8]
 80005e6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80005e8:	2300      	movs	r3, #0
}
 80005ea:	4618      	mov	r0, r3
 80005ec:	3714      	adds	r7, #20
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr
	...

080005f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b086      	sub	sp, #24
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000600:	4a14      	ldr	r2, [pc, #80]	; (8000654 <_sbrk+0x5c>)
 8000602:	4b15      	ldr	r3, [pc, #84]	; (8000658 <_sbrk+0x60>)
 8000604:	1ad3      	subs	r3, r2, r3
 8000606:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000608:	697b      	ldr	r3, [r7, #20]
 800060a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800060c:	4b13      	ldr	r3, [pc, #76]	; (800065c <_sbrk+0x64>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	2b00      	cmp	r3, #0
 8000612:	d102      	bne.n	800061a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000614:	4b11      	ldr	r3, [pc, #68]	; (800065c <_sbrk+0x64>)
 8000616:	4a12      	ldr	r2, [pc, #72]	; (8000660 <_sbrk+0x68>)
 8000618:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800061a:	4b10      	ldr	r3, [pc, #64]	; (800065c <_sbrk+0x64>)
 800061c:	681a      	ldr	r2, [r3, #0]
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	4413      	add	r3, r2
 8000622:	693a      	ldr	r2, [r7, #16]
 8000624:	429a      	cmp	r2, r3
 8000626:	d207      	bcs.n	8000638 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000628:	f000 fa8c 	bl	8000b44 <__errno>
 800062c:	4603      	mov	r3, r0
 800062e:	220c      	movs	r2, #12
 8000630:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000632:	f04f 33ff 	mov.w	r3, #4294967295
 8000636:	e009      	b.n	800064c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000638:	4b08      	ldr	r3, [pc, #32]	; (800065c <_sbrk+0x64>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800063e:	4b07      	ldr	r3, [pc, #28]	; (800065c <_sbrk+0x64>)
 8000640:	681a      	ldr	r2, [r3, #0]
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	4413      	add	r3, r2
 8000646:	4a05      	ldr	r2, [pc, #20]	; (800065c <_sbrk+0x64>)
 8000648:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800064a:	68fb      	ldr	r3, [r7, #12]
}
 800064c:	4618      	mov	r0, r3
 800064e:	3718      	adds	r7, #24
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	20080000 	.word	0x20080000
 8000658:	00000400 	.word	0x00000400
 800065c:	20000078 	.word	0x20000078
 8000660:	200001c8 	.word	0x200001c8

08000664 <uart_write>:

#define		GPIODEN					(1U<<3)
#define		GPIO_ALTERNATE_MODE 	0x2

void uart_write(USART_TypeDef *USARTx, uint8_t value)
{
 8000664:	b480      	push	{r7}
 8000666:	b083      	sub	sp, #12
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
 800066c:	460b      	mov	r3, r1
 800066e:	70fb      	strb	r3, [r7, #3]
	// Make sure transmit data register is empty
	while (!(USARTx->ISR & USART_ISR_TXE)) {}
 8000670:	bf00      	nop
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	69db      	ldr	r3, [r3, #28]
 8000676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800067a:	2b00      	cmp	r3, #0
 800067c:	d0f9      	beq.n	8000672 <uart_write+0xe>

	// Write value into transmit data register
	USARTx->TDR = value;
 800067e:	78fa      	ldrb	r2, [r7, #3]
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	629a      	str	r2, [r3, #40]	; 0x28

}
 8000684:	bf00      	nop
 8000686:	370c      	adds	r7, #12
 8000688:	46bd      	mov	sp, r7
 800068a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068e:	4770      	bx	lr

08000690 <__io_putchar>:

	// Read value out of receive data register
	return (READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
}

int __io_putchar(int ch) {
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
	uart_write(USART3, ch);
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	b2db      	uxtb	r3, r3
 800069c:	4619      	mov	r1, r3
 800069e:	4804      	ldr	r0, [pc, #16]	; (80006b0 <__io_putchar+0x20>)
 80006a0:	f7ff ffe0 	bl	8000664 <uart_write>
	return ch;
 80006a4:	687b      	ldr	r3, [r7, #4]
}
 80006a6:	4618      	mov	r0, r3
 80006a8:	3708      	adds	r7, #8
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	40004800 	.word	0x40004800

080006b4 <uart_enable>:

static void uart_enable(USART_TypeDef *USARTx)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b083      	sub	sp, #12
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
	SET_BIT(USARTx->CR1, USART_CR1_UE);
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	f043 0201 	orr.w	r2, r3, #1
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	601a      	str	r2, [r3, #0]
}
 80006c8:	bf00      	nop
 80006ca:	370c      	adds	r7, #12
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr

080006d4 <set_uart_transfer_direction>:

static void set_uart_transfer_direction(USART_TypeDef *USARTx, uint32_t TransferDirection)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b083      	sub	sp, #12
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
 80006dc:	6039      	str	r1, [r7, #0]
	MODIFY_REG(USARTx->CR1, (USART_CR1_RE |USART_CR1_TE), TransferDirection);
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	f023 020c 	bic.w	r2, r3, #12
 80006e6:	683b      	ldr	r3, [r7, #0]
 80006e8:	431a      	orrs	r2, r3
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	601a      	str	r2, [r3, #0]
}
 80006ee:	bf00      	nop
 80006f0:	370c      	adds	r7, #12
 80006f2:	46bd      	mov	sp, r7
 80006f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f8:	4770      	bx	lr

080006fa <compute_uart_div>:

static uint16_t compute_uart_div(uint32_t PeriphClk, uint32_t BaudRate)
{
 80006fa:	b480      	push	{r7}
 80006fc:	b083      	sub	sp, #12
 80006fe:	af00      	add	r7, sp, #0
 8000700:	6078      	str	r0, [r7, #4]
 8000702:	6039      	str	r1, [r7, #0]
	return (PeriphClk + (BaudRate/2U))/BaudRate;
 8000704:	683b      	ldr	r3, [r7, #0]
 8000706:	085a      	lsrs	r2, r3, #1
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	441a      	add	r2, r3
 800070c:	683b      	ldr	r3, [r7, #0]
 800070e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000712:	b29b      	uxth	r3, r3
}
 8000714:	4618      	mov	r0, r3
 8000716:	370c      	adds	r7, #12
 8000718:	46bd      	mov	sp, r7
 800071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071e:	4770      	bx	lr

08000720 <uart_set_baudrate>:

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b084      	sub	sp, #16
 8000724:	af00      	add	r7, sp, #0
 8000726:	60f8      	str	r0, [r7, #12]
 8000728:	60b9      	str	r1, [r7, #8]
 800072a:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_div(PeriphClk, BaudRate);
 800072c:	6879      	ldr	r1, [r7, #4]
 800072e:	68b8      	ldr	r0, [r7, #8]
 8000730:	f7ff ffe3 	bl	80006fa <compute_uart_div>
 8000734:	4603      	mov	r3, r0
 8000736:	461a      	mov	r2, r3
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	60da      	str	r2, [r3, #12]
}
 800073c:	bf00      	nop
 800073e:	3710      	adds	r7, #16
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}

08000744 <config_uart_parameters>:

static void config_uart_parameters(USART_TypeDef *USARTx, uint32_t DataWidth, uint32_t Parity, uint32_t StopBits)
{
 8000744:	b480      	push	{r7}
 8000746:	b085      	sub	sp, #20
 8000748:	af00      	add	r7, sp, #0
 800074a:	60f8      	str	r0, [r7, #12]
 800074c:	60b9      	str	r1, [r7, #8]
 800074e:	607a      	str	r2, [r7, #4]
 8000750:	603b      	str	r3, [r7, #0]
	MODIFY_REG(USARTx->CR1, (USART_CR1_PS | USART_CR1_PCE | USART_CR1_M), Parity | DataWidth);
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	681a      	ldr	r2, [r3, #0]
 8000756:	4b0b      	ldr	r3, [pc, #44]	; (8000784 <config_uart_parameters+0x40>)
 8000758:	4013      	ands	r3, r2
 800075a:	6879      	ldr	r1, [r7, #4]
 800075c:	68ba      	ldr	r2, [r7, #8]
 800075e:	430a      	orrs	r2, r1
 8000760:	431a      	orrs	r2, r3
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	601a      	str	r2, [r3, #0]
	MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	685b      	ldr	r3, [r3, #4]
 800076a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800076e:	683b      	ldr	r3, [r7, #0]
 8000770:	431a      	orrs	r2, r3
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	605a      	str	r2, [r3, #4]
}
 8000776:	bf00      	nop
 8000778:	3714      	adds	r7, #20
 800077a:	46bd      	mov	sp, r7
 800077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000780:	4770      	bx	lr
 8000782:	bf00      	nop
 8000784:	efffe9ff 	.word	0xefffe9ff

08000788 <uart3_rxtx_init>:
	//USART3->CR1 |= USART_CR1_UE;
	uart_enable(USART3);
}

void uart3_rxtx_init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
	// To get pin ready as USART pin:
	// 1. Enable clock access to GPIOD
	set_ahb1_periph_clock(GPIODEN);
 800078c:	2008      	movs	r0, #8
 800078e:	f7ff fea1 	bl	80004d4 <set_ahb1_periph_clock>

	// 2. Set PD8 mode to alternate function
	set_pin_mode(GPIOD, UART3_TX, GPIO_ALTERNATE_MODE);
 8000792:	2202      	movs	r2, #2
 8000794:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000798:	4828      	ldr	r0, [pc, #160]	; (800083c <uart3_rxtx_init+0xb4>)
 800079a:	f7ff fe11 	bl	80003c0 <set_pin_mode>
	// 2a. Set PD9 mode to alternate function
	set_pin_mode(GPIOD, UART3_RX, GPIO_ALTERNATE_MODE);
 800079e:	2202      	movs	r2, #2
 80007a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007a4:	4825      	ldr	r0, [pc, #148]	; (800083c <uart3_rxtx_init+0xb4>)
 80007a6:	f7ff fe0b 	bl	80003c0 <set_pin_mode>

	// 3. Set alternate function type to USART for PD8
	GPIOD->AFR[1] |= (1U<<0);
 80007aa:	4b24      	ldr	r3, [pc, #144]	; (800083c <uart3_rxtx_init+0xb4>)
 80007ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007ae:	4a23      	ldr	r2, [pc, #140]	; (800083c <uart3_rxtx_init+0xb4>)
 80007b0:	f043 0301 	orr.w	r3, r3, #1
 80007b4:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOD->AFR[1] |= (1U<<1);
 80007b6:	4b21      	ldr	r3, [pc, #132]	; (800083c <uart3_rxtx_init+0xb4>)
 80007b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007ba:	4a20      	ldr	r2, [pc, #128]	; (800083c <uart3_rxtx_init+0xb4>)
 80007bc:	f043 0302 	orr.w	r3, r3, #2
 80007c0:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOD->AFR[1] |= (1U<<2);
 80007c2:	4b1e      	ldr	r3, [pc, #120]	; (800083c <uart3_rxtx_init+0xb4>)
 80007c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007c6:	4a1d      	ldr	r2, [pc, #116]	; (800083c <uart3_rxtx_init+0xb4>)
 80007c8:	f043 0304 	orr.w	r3, r3, #4
 80007cc:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOD->AFR[1] &= ~(1U<<3);
 80007ce:	4b1b      	ldr	r3, [pc, #108]	; (800083c <uart3_rxtx_init+0xb4>)
 80007d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007d2:	4a1a      	ldr	r2, [pc, #104]	; (800083c <uart3_rxtx_init+0xb4>)
 80007d4:	f023 0308 	bic.w	r3, r3, #8
 80007d8:	6253      	str	r3, [r2, #36]	; 0x24
	// 3a. Set alternate function type to USART for PD9
	GPIOD->AFR[1] |= (1U<<4);
 80007da:	4b18      	ldr	r3, [pc, #96]	; (800083c <uart3_rxtx_init+0xb4>)
 80007dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007de:	4a17      	ldr	r2, [pc, #92]	; (800083c <uart3_rxtx_init+0xb4>)
 80007e0:	f043 0310 	orr.w	r3, r3, #16
 80007e4:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOD->AFR[1] |= (1U<<5);
 80007e6:	4b15      	ldr	r3, [pc, #84]	; (800083c <uart3_rxtx_init+0xb4>)
 80007e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007ea:	4a14      	ldr	r2, [pc, #80]	; (800083c <uart3_rxtx_init+0xb4>)
 80007ec:	f043 0320 	orr.w	r3, r3, #32
 80007f0:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOD->AFR[1] |= (1U<<6);
 80007f2:	4b12      	ldr	r3, [pc, #72]	; (800083c <uart3_rxtx_init+0xb4>)
 80007f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007f6:	4a11      	ldr	r2, [pc, #68]	; (800083c <uart3_rxtx_init+0xb4>)
 80007f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007fc:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOD->AFR[1] &= ~(1U<<7);
 80007fe:	4b0f      	ldr	r3, [pc, #60]	; (800083c <uart3_rxtx_init+0xb4>)
 8000800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000802:	4a0e      	ldr	r2, [pc, #56]	; (800083c <uart3_rxtx_init+0xb4>)
 8000804:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000808:	6253      	str	r3, [r2, #36]	; 0x24
	//GPIOD->AFR[1]|=0x77;

	// To get USART/UART peripheral ready:
	// Enable clock to USART3 module
	set_apb1_periph_clock(USART3EN);
 800080a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800080e:	f7ff fe73 	bl	80004f8 <set_apb1_periph_clock>

	// Configure USART parameters
	config_uart_parameters(USART3, UART_DATAWIDTH_8B, UART_PARITY_NONE, UART_STOPBITS_1);
 8000812:	2300      	movs	r3, #0
 8000814:	2200      	movs	r2, #0
 8000816:	2100      	movs	r1, #0
 8000818:	4809      	ldr	r0, [pc, #36]	; (8000840 <uart3_rxtx_init+0xb8>)
 800081a:	f7ff ff93 	bl	8000744 <config_uart_parameters>
	set_uart_transfer_direction(USART3, (USART_CR1_TE|USART_CR1_RE));
 800081e:	210c      	movs	r1, #12
 8000820:	4807      	ldr	r0, [pc, #28]	; (8000840 <uart3_rxtx_init+0xb8>)
 8000822:	f7ff ff57 	bl	80006d4 <set_uart_transfer_direction>

	// Set baudrate
	uart_set_baudrate(USART3, 16000000, 57600);
 8000826:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 800082a:	4906      	ldr	r1, [pc, #24]	; (8000844 <uart3_rxtx_init+0xbc>)
 800082c:	4804      	ldr	r0, [pc, #16]	; (8000840 <uart3_rxtx_init+0xb8>)
 800082e:	f7ff ff77 	bl	8000720 <uart_set_baudrate>

	// Enable USART
	//USART3->CR1 |= USART_CR1_UE;
	uart_enable(USART3);
 8000832:	4803      	ldr	r0, [pc, #12]	; (8000840 <uart3_rxtx_init+0xb8>)
 8000834:	f7ff ff3e 	bl	80006b4 <uart_enable>
}
 8000838:	bf00      	nop
 800083a:	bd80      	pop	{r7, pc}
 800083c:	40020c00 	.word	0x40020c00
 8000840:	40004800 	.word	0x40004800
 8000844:	00f42400 	.word	0x00f42400

08000848 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000848:	480d      	ldr	r0, [pc, #52]	; (8000880 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800084a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800084c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000850:	480c      	ldr	r0, [pc, #48]	; (8000884 <LoopForever+0x6>)
  ldr r1, =_edata
 8000852:	490d      	ldr	r1, [pc, #52]	; (8000888 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000854:	4a0d      	ldr	r2, [pc, #52]	; (800088c <LoopForever+0xe>)
  movs r3, #0
 8000856:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000858:	e002      	b.n	8000860 <LoopCopyDataInit>

0800085a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800085a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800085c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800085e:	3304      	adds	r3, #4

08000860 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000860:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000862:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000864:	d3f9      	bcc.n	800085a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000866:	4a0a      	ldr	r2, [pc, #40]	; (8000890 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000868:	4c0a      	ldr	r4, [pc, #40]	; (8000894 <LoopForever+0x16>)
  movs r3, #0
 800086a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800086c:	e001      	b.n	8000872 <LoopFillZerobss>

0800086e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800086e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000870:	3204      	adds	r2, #4

08000872 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000872:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000874:	d3fb      	bcc.n	800086e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000876:	f000 f96b 	bl	8000b50 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800087a:	f7ff fe03 	bl	8000484 <main>

0800087e <LoopForever>:

LoopForever:
  b LoopForever
 800087e:	e7fe      	b.n	800087e <LoopForever>
  ldr   r0, =_estack
 8000880:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000884:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000888:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800088c:	08001748 	.word	0x08001748
  ldr r2, =_sbss
 8000890:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000894:	200001c8 	.word	0x200001c8

08000898 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000898:	e7fe      	b.n	8000898 <ADC_IRQHandler>
	...

0800089c <std>:
 800089c:	2300      	movs	r3, #0
 800089e:	b510      	push	{r4, lr}
 80008a0:	4604      	mov	r4, r0
 80008a2:	e9c0 3300 	strd	r3, r3, [r0]
 80008a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80008aa:	6083      	str	r3, [r0, #8]
 80008ac:	8181      	strh	r1, [r0, #12]
 80008ae:	6643      	str	r3, [r0, #100]	; 0x64
 80008b0:	81c2      	strh	r2, [r0, #14]
 80008b2:	6183      	str	r3, [r0, #24]
 80008b4:	4619      	mov	r1, r3
 80008b6:	2208      	movs	r2, #8
 80008b8:	305c      	adds	r0, #92	; 0x5c
 80008ba:	f000 f8f4 	bl	8000aa6 <memset>
 80008be:	4b05      	ldr	r3, [pc, #20]	; (80008d4 <std+0x38>)
 80008c0:	6263      	str	r3, [r4, #36]	; 0x24
 80008c2:	4b05      	ldr	r3, [pc, #20]	; (80008d8 <std+0x3c>)
 80008c4:	62a3      	str	r3, [r4, #40]	; 0x28
 80008c6:	4b05      	ldr	r3, [pc, #20]	; (80008dc <std+0x40>)
 80008c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80008ca:	4b05      	ldr	r3, [pc, #20]	; (80008e0 <std+0x44>)
 80008cc:	6224      	str	r4, [r4, #32]
 80008ce:	6323      	str	r3, [r4, #48]	; 0x30
 80008d0:	bd10      	pop	{r4, pc}
 80008d2:	bf00      	nop
 80008d4:	08000a21 	.word	0x08000a21
 80008d8:	08000a43 	.word	0x08000a43
 80008dc:	08000a7b 	.word	0x08000a7b
 80008e0:	08000a9f 	.word	0x08000a9f

080008e4 <stdio_exit_handler>:
 80008e4:	4a02      	ldr	r2, [pc, #8]	; (80008f0 <stdio_exit_handler+0xc>)
 80008e6:	4903      	ldr	r1, [pc, #12]	; (80008f4 <stdio_exit_handler+0x10>)
 80008e8:	4803      	ldr	r0, [pc, #12]	; (80008f8 <stdio_exit_handler+0x14>)
 80008ea:	f000 b869 	b.w	80009c0 <_fwalk_sglue>
 80008ee:	bf00      	nop
 80008f0:	20000000 	.word	0x20000000
 80008f4:	08001441 	.word	0x08001441
 80008f8:	2000000c 	.word	0x2000000c

080008fc <cleanup_stdio>:
 80008fc:	6841      	ldr	r1, [r0, #4]
 80008fe:	4b0c      	ldr	r3, [pc, #48]	; (8000930 <cleanup_stdio+0x34>)
 8000900:	4299      	cmp	r1, r3
 8000902:	b510      	push	{r4, lr}
 8000904:	4604      	mov	r4, r0
 8000906:	d001      	beq.n	800090c <cleanup_stdio+0x10>
 8000908:	f000 fd9a 	bl	8001440 <_fflush_r>
 800090c:	68a1      	ldr	r1, [r4, #8]
 800090e:	4b09      	ldr	r3, [pc, #36]	; (8000934 <cleanup_stdio+0x38>)
 8000910:	4299      	cmp	r1, r3
 8000912:	d002      	beq.n	800091a <cleanup_stdio+0x1e>
 8000914:	4620      	mov	r0, r4
 8000916:	f000 fd93 	bl	8001440 <_fflush_r>
 800091a:	68e1      	ldr	r1, [r4, #12]
 800091c:	4b06      	ldr	r3, [pc, #24]	; (8000938 <cleanup_stdio+0x3c>)
 800091e:	4299      	cmp	r1, r3
 8000920:	d004      	beq.n	800092c <cleanup_stdio+0x30>
 8000922:	4620      	mov	r0, r4
 8000924:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000928:	f000 bd8a 	b.w	8001440 <_fflush_r>
 800092c:	bd10      	pop	{r4, pc}
 800092e:	bf00      	nop
 8000930:	2000007c 	.word	0x2000007c
 8000934:	200000e4 	.word	0x200000e4
 8000938:	2000014c 	.word	0x2000014c

0800093c <global_stdio_init.part.0>:
 800093c:	b510      	push	{r4, lr}
 800093e:	4b0b      	ldr	r3, [pc, #44]	; (800096c <global_stdio_init.part.0+0x30>)
 8000940:	4c0b      	ldr	r4, [pc, #44]	; (8000970 <global_stdio_init.part.0+0x34>)
 8000942:	4a0c      	ldr	r2, [pc, #48]	; (8000974 <global_stdio_init.part.0+0x38>)
 8000944:	601a      	str	r2, [r3, #0]
 8000946:	4620      	mov	r0, r4
 8000948:	2200      	movs	r2, #0
 800094a:	2104      	movs	r1, #4
 800094c:	f7ff ffa6 	bl	800089c <std>
 8000950:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8000954:	2201      	movs	r2, #1
 8000956:	2109      	movs	r1, #9
 8000958:	f7ff ffa0 	bl	800089c <std>
 800095c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000960:	2202      	movs	r2, #2
 8000962:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000966:	2112      	movs	r1, #18
 8000968:	f7ff bf98 	b.w	800089c <std>
 800096c:	200001b4 	.word	0x200001b4
 8000970:	2000007c 	.word	0x2000007c
 8000974:	080008e5 	.word	0x080008e5

08000978 <__sfp_lock_acquire>:
 8000978:	4801      	ldr	r0, [pc, #4]	; (8000980 <__sfp_lock_acquire+0x8>)
 800097a:	f000 b90d 	b.w	8000b98 <__retarget_lock_acquire_recursive>
 800097e:	bf00      	nop
 8000980:	200001bd 	.word	0x200001bd

08000984 <__sfp_lock_release>:
 8000984:	4801      	ldr	r0, [pc, #4]	; (800098c <__sfp_lock_release+0x8>)
 8000986:	f000 b908 	b.w	8000b9a <__retarget_lock_release_recursive>
 800098a:	bf00      	nop
 800098c:	200001bd 	.word	0x200001bd

08000990 <__sinit>:
 8000990:	b510      	push	{r4, lr}
 8000992:	4604      	mov	r4, r0
 8000994:	f7ff fff0 	bl	8000978 <__sfp_lock_acquire>
 8000998:	6a23      	ldr	r3, [r4, #32]
 800099a:	b11b      	cbz	r3, 80009a4 <__sinit+0x14>
 800099c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80009a0:	f7ff bff0 	b.w	8000984 <__sfp_lock_release>
 80009a4:	4b04      	ldr	r3, [pc, #16]	; (80009b8 <__sinit+0x28>)
 80009a6:	6223      	str	r3, [r4, #32]
 80009a8:	4b04      	ldr	r3, [pc, #16]	; (80009bc <__sinit+0x2c>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d1f5      	bne.n	800099c <__sinit+0xc>
 80009b0:	f7ff ffc4 	bl	800093c <global_stdio_init.part.0>
 80009b4:	e7f2      	b.n	800099c <__sinit+0xc>
 80009b6:	bf00      	nop
 80009b8:	080008fd 	.word	0x080008fd
 80009bc:	200001b4 	.word	0x200001b4

080009c0 <_fwalk_sglue>:
 80009c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80009c4:	4607      	mov	r7, r0
 80009c6:	4688      	mov	r8, r1
 80009c8:	4614      	mov	r4, r2
 80009ca:	2600      	movs	r6, #0
 80009cc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80009d0:	f1b9 0901 	subs.w	r9, r9, #1
 80009d4:	d505      	bpl.n	80009e2 <_fwalk_sglue+0x22>
 80009d6:	6824      	ldr	r4, [r4, #0]
 80009d8:	2c00      	cmp	r4, #0
 80009da:	d1f7      	bne.n	80009cc <_fwalk_sglue+0xc>
 80009dc:	4630      	mov	r0, r6
 80009de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80009e2:	89ab      	ldrh	r3, [r5, #12]
 80009e4:	2b01      	cmp	r3, #1
 80009e6:	d907      	bls.n	80009f8 <_fwalk_sglue+0x38>
 80009e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80009ec:	3301      	adds	r3, #1
 80009ee:	d003      	beq.n	80009f8 <_fwalk_sglue+0x38>
 80009f0:	4629      	mov	r1, r5
 80009f2:	4638      	mov	r0, r7
 80009f4:	47c0      	blx	r8
 80009f6:	4306      	orrs	r6, r0
 80009f8:	3568      	adds	r5, #104	; 0x68
 80009fa:	e7e9      	b.n	80009d0 <_fwalk_sglue+0x10>

080009fc <iprintf>:
 80009fc:	b40f      	push	{r0, r1, r2, r3}
 80009fe:	b507      	push	{r0, r1, r2, lr}
 8000a00:	4906      	ldr	r1, [pc, #24]	; (8000a1c <iprintf+0x20>)
 8000a02:	ab04      	add	r3, sp, #16
 8000a04:	6808      	ldr	r0, [r1, #0]
 8000a06:	f853 2b04 	ldr.w	r2, [r3], #4
 8000a0a:	6881      	ldr	r1, [r0, #8]
 8000a0c:	9301      	str	r3, [sp, #4]
 8000a0e:	f000 f9e7 	bl	8000de0 <_vfiprintf_r>
 8000a12:	b003      	add	sp, #12
 8000a14:	f85d eb04 	ldr.w	lr, [sp], #4
 8000a18:	b004      	add	sp, #16
 8000a1a:	4770      	bx	lr
 8000a1c:	20000058 	.word	0x20000058

08000a20 <__sread>:
 8000a20:	b510      	push	{r4, lr}
 8000a22:	460c      	mov	r4, r1
 8000a24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000a28:	f000 f868 	bl	8000afc <_read_r>
 8000a2c:	2800      	cmp	r0, #0
 8000a2e:	bfab      	itete	ge
 8000a30:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000a32:	89a3      	ldrhlt	r3, [r4, #12]
 8000a34:	181b      	addge	r3, r3, r0
 8000a36:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000a3a:	bfac      	ite	ge
 8000a3c:	6563      	strge	r3, [r4, #84]	; 0x54
 8000a3e:	81a3      	strhlt	r3, [r4, #12]
 8000a40:	bd10      	pop	{r4, pc}

08000a42 <__swrite>:
 8000a42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000a46:	461f      	mov	r7, r3
 8000a48:	898b      	ldrh	r3, [r1, #12]
 8000a4a:	05db      	lsls	r3, r3, #23
 8000a4c:	4605      	mov	r5, r0
 8000a4e:	460c      	mov	r4, r1
 8000a50:	4616      	mov	r6, r2
 8000a52:	d505      	bpl.n	8000a60 <__swrite+0x1e>
 8000a54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000a58:	2302      	movs	r3, #2
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	f000 f83c 	bl	8000ad8 <_lseek_r>
 8000a60:	89a3      	ldrh	r3, [r4, #12]
 8000a62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000a66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000a6a:	81a3      	strh	r3, [r4, #12]
 8000a6c:	4632      	mov	r2, r6
 8000a6e:	463b      	mov	r3, r7
 8000a70:	4628      	mov	r0, r5
 8000a72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000a76:	f000 b853 	b.w	8000b20 <_write_r>

08000a7a <__sseek>:
 8000a7a:	b510      	push	{r4, lr}
 8000a7c:	460c      	mov	r4, r1
 8000a7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000a82:	f000 f829 	bl	8000ad8 <_lseek_r>
 8000a86:	1c43      	adds	r3, r0, #1
 8000a88:	89a3      	ldrh	r3, [r4, #12]
 8000a8a:	bf15      	itete	ne
 8000a8c:	6560      	strne	r0, [r4, #84]	; 0x54
 8000a8e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000a92:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000a96:	81a3      	strheq	r3, [r4, #12]
 8000a98:	bf18      	it	ne
 8000a9a:	81a3      	strhne	r3, [r4, #12]
 8000a9c:	bd10      	pop	{r4, pc}

08000a9e <__sclose>:
 8000a9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000aa2:	f000 b809 	b.w	8000ab8 <_close_r>

08000aa6 <memset>:
 8000aa6:	4402      	add	r2, r0
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	d100      	bne.n	8000ab0 <memset+0xa>
 8000aae:	4770      	bx	lr
 8000ab0:	f803 1b01 	strb.w	r1, [r3], #1
 8000ab4:	e7f9      	b.n	8000aaa <memset+0x4>
	...

08000ab8 <_close_r>:
 8000ab8:	b538      	push	{r3, r4, r5, lr}
 8000aba:	4d06      	ldr	r5, [pc, #24]	; (8000ad4 <_close_r+0x1c>)
 8000abc:	2300      	movs	r3, #0
 8000abe:	4604      	mov	r4, r0
 8000ac0:	4608      	mov	r0, r1
 8000ac2:	602b      	str	r3, [r5, #0]
 8000ac4:	f7ff fd63 	bl	800058e <_close>
 8000ac8:	1c43      	adds	r3, r0, #1
 8000aca:	d102      	bne.n	8000ad2 <_close_r+0x1a>
 8000acc:	682b      	ldr	r3, [r5, #0]
 8000ace:	b103      	cbz	r3, 8000ad2 <_close_r+0x1a>
 8000ad0:	6023      	str	r3, [r4, #0]
 8000ad2:	bd38      	pop	{r3, r4, r5, pc}
 8000ad4:	200001b8 	.word	0x200001b8

08000ad8 <_lseek_r>:
 8000ad8:	b538      	push	{r3, r4, r5, lr}
 8000ada:	4d07      	ldr	r5, [pc, #28]	; (8000af8 <_lseek_r+0x20>)
 8000adc:	4604      	mov	r4, r0
 8000ade:	4608      	mov	r0, r1
 8000ae0:	4611      	mov	r1, r2
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	602a      	str	r2, [r5, #0]
 8000ae6:	461a      	mov	r2, r3
 8000ae8:	f7ff fd78 	bl	80005dc <_lseek>
 8000aec:	1c43      	adds	r3, r0, #1
 8000aee:	d102      	bne.n	8000af6 <_lseek_r+0x1e>
 8000af0:	682b      	ldr	r3, [r5, #0]
 8000af2:	b103      	cbz	r3, 8000af6 <_lseek_r+0x1e>
 8000af4:	6023      	str	r3, [r4, #0]
 8000af6:	bd38      	pop	{r3, r4, r5, pc}
 8000af8:	200001b8 	.word	0x200001b8

08000afc <_read_r>:
 8000afc:	b538      	push	{r3, r4, r5, lr}
 8000afe:	4d07      	ldr	r5, [pc, #28]	; (8000b1c <_read_r+0x20>)
 8000b00:	4604      	mov	r4, r0
 8000b02:	4608      	mov	r0, r1
 8000b04:	4611      	mov	r1, r2
 8000b06:	2200      	movs	r2, #0
 8000b08:	602a      	str	r2, [r5, #0]
 8000b0a:	461a      	mov	r2, r3
 8000b0c:	f7ff fd06 	bl	800051c <_read>
 8000b10:	1c43      	adds	r3, r0, #1
 8000b12:	d102      	bne.n	8000b1a <_read_r+0x1e>
 8000b14:	682b      	ldr	r3, [r5, #0]
 8000b16:	b103      	cbz	r3, 8000b1a <_read_r+0x1e>
 8000b18:	6023      	str	r3, [r4, #0]
 8000b1a:	bd38      	pop	{r3, r4, r5, pc}
 8000b1c:	200001b8 	.word	0x200001b8

08000b20 <_write_r>:
 8000b20:	b538      	push	{r3, r4, r5, lr}
 8000b22:	4d07      	ldr	r5, [pc, #28]	; (8000b40 <_write_r+0x20>)
 8000b24:	4604      	mov	r4, r0
 8000b26:	4608      	mov	r0, r1
 8000b28:	4611      	mov	r1, r2
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	602a      	str	r2, [r5, #0]
 8000b2e:	461a      	mov	r2, r3
 8000b30:	f7ff fd11 	bl	8000556 <_write>
 8000b34:	1c43      	adds	r3, r0, #1
 8000b36:	d102      	bne.n	8000b3e <_write_r+0x1e>
 8000b38:	682b      	ldr	r3, [r5, #0]
 8000b3a:	b103      	cbz	r3, 8000b3e <_write_r+0x1e>
 8000b3c:	6023      	str	r3, [r4, #0]
 8000b3e:	bd38      	pop	{r3, r4, r5, pc}
 8000b40:	200001b8 	.word	0x200001b8

08000b44 <__errno>:
 8000b44:	4b01      	ldr	r3, [pc, #4]	; (8000b4c <__errno+0x8>)
 8000b46:	6818      	ldr	r0, [r3, #0]
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	20000058 	.word	0x20000058

08000b50 <__libc_init_array>:
 8000b50:	b570      	push	{r4, r5, r6, lr}
 8000b52:	4d0d      	ldr	r5, [pc, #52]	; (8000b88 <__libc_init_array+0x38>)
 8000b54:	4c0d      	ldr	r4, [pc, #52]	; (8000b8c <__libc_init_array+0x3c>)
 8000b56:	1b64      	subs	r4, r4, r5
 8000b58:	10a4      	asrs	r4, r4, #2
 8000b5a:	2600      	movs	r6, #0
 8000b5c:	42a6      	cmp	r6, r4
 8000b5e:	d109      	bne.n	8000b74 <__libc_init_array+0x24>
 8000b60:	4d0b      	ldr	r5, [pc, #44]	; (8000b90 <__libc_init_array+0x40>)
 8000b62:	4c0c      	ldr	r4, [pc, #48]	; (8000b94 <__libc_init_array+0x44>)
 8000b64:	f000 fdbe 	bl	80016e4 <_init>
 8000b68:	1b64      	subs	r4, r4, r5
 8000b6a:	10a4      	asrs	r4, r4, #2
 8000b6c:	2600      	movs	r6, #0
 8000b6e:	42a6      	cmp	r6, r4
 8000b70:	d105      	bne.n	8000b7e <__libc_init_array+0x2e>
 8000b72:	bd70      	pop	{r4, r5, r6, pc}
 8000b74:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b78:	4798      	blx	r3
 8000b7a:	3601      	adds	r6, #1
 8000b7c:	e7ee      	b.n	8000b5c <__libc_init_array+0xc>
 8000b7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b82:	4798      	blx	r3
 8000b84:	3601      	adds	r6, #1
 8000b86:	e7f2      	b.n	8000b6e <__libc_init_array+0x1e>
 8000b88:	08001740 	.word	0x08001740
 8000b8c:	08001740 	.word	0x08001740
 8000b90:	08001740 	.word	0x08001740
 8000b94:	08001744 	.word	0x08001744

08000b98 <__retarget_lock_acquire_recursive>:
 8000b98:	4770      	bx	lr

08000b9a <__retarget_lock_release_recursive>:
 8000b9a:	4770      	bx	lr

08000b9c <_free_r>:
 8000b9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000b9e:	2900      	cmp	r1, #0
 8000ba0:	d044      	beq.n	8000c2c <_free_r+0x90>
 8000ba2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000ba6:	9001      	str	r0, [sp, #4]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	f1a1 0404 	sub.w	r4, r1, #4
 8000bae:	bfb8      	it	lt
 8000bb0:	18e4      	addlt	r4, r4, r3
 8000bb2:	f000 f8df 	bl	8000d74 <__malloc_lock>
 8000bb6:	4a1e      	ldr	r2, [pc, #120]	; (8000c30 <_free_r+0x94>)
 8000bb8:	9801      	ldr	r0, [sp, #4]
 8000bba:	6813      	ldr	r3, [r2, #0]
 8000bbc:	b933      	cbnz	r3, 8000bcc <_free_r+0x30>
 8000bbe:	6063      	str	r3, [r4, #4]
 8000bc0:	6014      	str	r4, [r2, #0]
 8000bc2:	b003      	add	sp, #12
 8000bc4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000bc8:	f000 b8da 	b.w	8000d80 <__malloc_unlock>
 8000bcc:	42a3      	cmp	r3, r4
 8000bce:	d908      	bls.n	8000be2 <_free_r+0x46>
 8000bd0:	6825      	ldr	r5, [r4, #0]
 8000bd2:	1961      	adds	r1, r4, r5
 8000bd4:	428b      	cmp	r3, r1
 8000bd6:	bf01      	itttt	eq
 8000bd8:	6819      	ldreq	r1, [r3, #0]
 8000bda:	685b      	ldreq	r3, [r3, #4]
 8000bdc:	1949      	addeq	r1, r1, r5
 8000bde:	6021      	streq	r1, [r4, #0]
 8000be0:	e7ed      	b.n	8000bbe <_free_r+0x22>
 8000be2:	461a      	mov	r2, r3
 8000be4:	685b      	ldr	r3, [r3, #4]
 8000be6:	b10b      	cbz	r3, 8000bec <_free_r+0x50>
 8000be8:	42a3      	cmp	r3, r4
 8000bea:	d9fa      	bls.n	8000be2 <_free_r+0x46>
 8000bec:	6811      	ldr	r1, [r2, #0]
 8000bee:	1855      	adds	r5, r2, r1
 8000bf0:	42a5      	cmp	r5, r4
 8000bf2:	d10b      	bne.n	8000c0c <_free_r+0x70>
 8000bf4:	6824      	ldr	r4, [r4, #0]
 8000bf6:	4421      	add	r1, r4
 8000bf8:	1854      	adds	r4, r2, r1
 8000bfa:	42a3      	cmp	r3, r4
 8000bfc:	6011      	str	r1, [r2, #0]
 8000bfe:	d1e0      	bne.n	8000bc2 <_free_r+0x26>
 8000c00:	681c      	ldr	r4, [r3, #0]
 8000c02:	685b      	ldr	r3, [r3, #4]
 8000c04:	6053      	str	r3, [r2, #4]
 8000c06:	440c      	add	r4, r1
 8000c08:	6014      	str	r4, [r2, #0]
 8000c0a:	e7da      	b.n	8000bc2 <_free_r+0x26>
 8000c0c:	d902      	bls.n	8000c14 <_free_r+0x78>
 8000c0e:	230c      	movs	r3, #12
 8000c10:	6003      	str	r3, [r0, #0]
 8000c12:	e7d6      	b.n	8000bc2 <_free_r+0x26>
 8000c14:	6825      	ldr	r5, [r4, #0]
 8000c16:	1961      	adds	r1, r4, r5
 8000c18:	428b      	cmp	r3, r1
 8000c1a:	bf04      	itt	eq
 8000c1c:	6819      	ldreq	r1, [r3, #0]
 8000c1e:	685b      	ldreq	r3, [r3, #4]
 8000c20:	6063      	str	r3, [r4, #4]
 8000c22:	bf04      	itt	eq
 8000c24:	1949      	addeq	r1, r1, r5
 8000c26:	6021      	streq	r1, [r4, #0]
 8000c28:	6054      	str	r4, [r2, #4]
 8000c2a:	e7ca      	b.n	8000bc2 <_free_r+0x26>
 8000c2c:	b003      	add	sp, #12
 8000c2e:	bd30      	pop	{r4, r5, pc}
 8000c30:	200001c0 	.word	0x200001c0

08000c34 <sbrk_aligned>:
 8000c34:	b570      	push	{r4, r5, r6, lr}
 8000c36:	4e0e      	ldr	r6, [pc, #56]	; (8000c70 <sbrk_aligned+0x3c>)
 8000c38:	460c      	mov	r4, r1
 8000c3a:	6831      	ldr	r1, [r6, #0]
 8000c3c:	4605      	mov	r5, r0
 8000c3e:	b911      	cbnz	r1, 8000c46 <sbrk_aligned+0x12>
 8000c40:	f000 fcbc 	bl	80015bc <_sbrk_r>
 8000c44:	6030      	str	r0, [r6, #0]
 8000c46:	4621      	mov	r1, r4
 8000c48:	4628      	mov	r0, r5
 8000c4a:	f000 fcb7 	bl	80015bc <_sbrk_r>
 8000c4e:	1c43      	adds	r3, r0, #1
 8000c50:	d00a      	beq.n	8000c68 <sbrk_aligned+0x34>
 8000c52:	1cc4      	adds	r4, r0, #3
 8000c54:	f024 0403 	bic.w	r4, r4, #3
 8000c58:	42a0      	cmp	r0, r4
 8000c5a:	d007      	beq.n	8000c6c <sbrk_aligned+0x38>
 8000c5c:	1a21      	subs	r1, r4, r0
 8000c5e:	4628      	mov	r0, r5
 8000c60:	f000 fcac 	bl	80015bc <_sbrk_r>
 8000c64:	3001      	adds	r0, #1
 8000c66:	d101      	bne.n	8000c6c <sbrk_aligned+0x38>
 8000c68:	f04f 34ff 	mov.w	r4, #4294967295
 8000c6c:	4620      	mov	r0, r4
 8000c6e:	bd70      	pop	{r4, r5, r6, pc}
 8000c70:	200001c4 	.word	0x200001c4

08000c74 <_malloc_r>:
 8000c74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000c78:	1ccd      	adds	r5, r1, #3
 8000c7a:	f025 0503 	bic.w	r5, r5, #3
 8000c7e:	3508      	adds	r5, #8
 8000c80:	2d0c      	cmp	r5, #12
 8000c82:	bf38      	it	cc
 8000c84:	250c      	movcc	r5, #12
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	4607      	mov	r7, r0
 8000c8a:	db01      	blt.n	8000c90 <_malloc_r+0x1c>
 8000c8c:	42a9      	cmp	r1, r5
 8000c8e:	d905      	bls.n	8000c9c <_malloc_r+0x28>
 8000c90:	230c      	movs	r3, #12
 8000c92:	603b      	str	r3, [r7, #0]
 8000c94:	2600      	movs	r6, #0
 8000c96:	4630      	mov	r0, r6
 8000c98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000c9c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8000d70 <_malloc_r+0xfc>
 8000ca0:	f000 f868 	bl	8000d74 <__malloc_lock>
 8000ca4:	f8d8 3000 	ldr.w	r3, [r8]
 8000ca8:	461c      	mov	r4, r3
 8000caa:	bb5c      	cbnz	r4, 8000d04 <_malloc_r+0x90>
 8000cac:	4629      	mov	r1, r5
 8000cae:	4638      	mov	r0, r7
 8000cb0:	f7ff ffc0 	bl	8000c34 <sbrk_aligned>
 8000cb4:	1c43      	adds	r3, r0, #1
 8000cb6:	4604      	mov	r4, r0
 8000cb8:	d155      	bne.n	8000d66 <_malloc_r+0xf2>
 8000cba:	f8d8 4000 	ldr.w	r4, [r8]
 8000cbe:	4626      	mov	r6, r4
 8000cc0:	2e00      	cmp	r6, #0
 8000cc2:	d145      	bne.n	8000d50 <_malloc_r+0xdc>
 8000cc4:	2c00      	cmp	r4, #0
 8000cc6:	d048      	beq.n	8000d5a <_malloc_r+0xe6>
 8000cc8:	6823      	ldr	r3, [r4, #0]
 8000cca:	4631      	mov	r1, r6
 8000ccc:	4638      	mov	r0, r7
 8000cce:	eb04 0903 	add.w	r9, r4, r3
 8000cd2:	f000 fc73 	bl	80015bc <_sbrk_r>
 8000cd6:	4581      	cmp	r9, r0
 8000cd8:	d13f      	bne.n	8000d5a <_malloc_r+0xe6>
 8000cda:	6821      	ldr	r1, [r4, #0]
 8000cdc:	1a6d      	subs	r5, r5, r1
 8000cde:	4629      	mov	r1, r5
 8000ce0:	4638      	mov	r0, r7
 8000ce2:	f7ff ffa7 	bl	8000c34 <sbrk_aligned>
 8000ce6:	3001      	adds	r0, #1
 8000ce8:	d037      	beq.n	8000d5a <_malloc_r+0xe6>
 8000cea:	6823      	ldr	r3, [r4, #0]
 8000cec:	442b      	add	r3, r5
 8000cee:	6023      	str	r3, [r4, #0]
 8000cf0:	f8d8 3000 	ldr.w	r3, [r8]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d038      	beq.n	8000d6a <_malloc_r+0xf6>
 8000cf8:	685a      	ldr	r2, [r3, #4]
 8000cfa:	42a2      	cmp	r2, r4
 8000cfc:	d12b      	bne.n	8000d56 <_malloc_r+0xe2>
 8000cfe:	2200      	movs	r2, #0
 8000d00:	605a      	str	r2, [r3, #4]
 8000d02:	e00f      	b.n	8000d24 <_malloc_r+0xb0>
 8000d04:	6822      	ldr	r2, [r4, #0]
 8000d06:	1b52      	subs	r2, r2, r5
 8000d08:	d41f      	bmi.n	8000d4a <_malloc_r+0xd6>
 8000d0a:	2a0b      	cmp	r2, #11
 8000d0c:	d917      	bls.n	8000d3e <_malloc_r+0xca>
 8000d0e:	1961      	adds	r1, r4, r5
 8000d10:	42a3      	cmp	r3, r4
 8000d12:	6025      	str	r5, [r4, #0]
 8000d14:	bf18      	it	ne
 8000d16:	6059      	strne	r1, [r3, #4]
 8000d18:	6863      	ldr	r3, [r4, #4]
 8000d1a:	bf08      	it	eq
 8000d1c:	f8c8 1000 	streq.w	r1, [r8]
 8000d20:	5162      	str	r2, [r4, r5]
 8000d22:	604b      	str	r3, [r1, #4]
 8000d24:	4638      	mov	r0, r7
 8000d26:	f104 060b 	add.w	r6, r4, #11
 8000d2a:	f000 f829 	bl	8000d80 <__malloc_unlock>
 8000d2e:	f026 0607 	bic.w	r6, r6, #7
 8000d32:	1d23      	adds	r3, r4, #4
 8000d34:	1af2      	subs	r2, r6, r3
 8000d36:	d0ae      	beq.n	8000c96 <_malloc_r+0x22>
 8000d38:	1b9b      	subs	r3, r3, r6
 8000d3a:	50a3      	str	r3, [r4, r2]
 8000d3c:	e7ab      	b.n	8000c96 <_malloc_r+0x22>
 8000d3e:	42a3      	cmp	r3, r4
 8000d40:	6862      	ldr	r2, [r4, #4]
 8000d42:	d1dd      	bne.n	8000d00 <_malloc_r+0x8c>
 8000d44:	f8c8 2000 	str.w	r2, [r8]
 8000d48:	e7ec      	b.n	8000d24 <_malloc_r+0xb0>
 8000d4a:	4623      	mov	r3, r4
 8000d4c:	6864      	ldr	r4, [r4, #4]
 8000d4e:	e7ac      	b.n	8000caa <_malloc_r+0x36>
 8000d50:	4634      	mov	r4, r6
 8000d52:	6876      	ldr	r6, [r6, #4]
 8000d54:	e7b4      	b.n	8000cc0 <_malloc_r+0x4c>
 8000d56:	4613      	mov	r3, r2
 8000d58:	e7cc      	b.n	8000cf4 <_malloc_r+0x80>
 8000d5a:	230c      	movs	r3, #12
 8000d5c:	603b      	str	r3, [r7, #0]
 8000d5e:	4638      	mov	r0, r7
 8000d60:	f000 f80e 	bl	8000d80 <__malloc_unlock>
 8000d64:	e797      	b.n	8000c96 <_malloc_r+0x22>
 8000d66:	6025      	str	r5, [r4, #0]
 8000d68:	e7dc      	b.n	8000d24 <_malloc_r+0xb0>
 8000d6a:	605b      	str	r3, [r3, #4]
 8000d6c:	deff      	udf	#255	; 0xff
 8000d6e:	bf00      	nop
 8000d70:	200001c0 	.word	0x200001c0

08000d74 <__malloc_lock>:
 8000d74:	4801      	ldr	r0, [pc, #4]	; (8000d7c <__malloc_lock+0x8>)
 8000d76:	f7ff bf0f 	b.w	8000b98 <__retarget_lock_acquire_recursive>
 8000d7a:	bf00      	nop
 8000d7c:	200001bc 	.word	0x200001bc

08000d80 <__malloc_unlock>:
 8000d80:	4801      	ldr	r0, [pc, #4]	; (8000d88 <__malloc_unlock+0x8>)
 8000d82:	f7ff bf0a 	b.w	8000b9a <__retarget_lock_release_recursive>
 8000d86:	bf00      	nop
 8000d88:	200001bc 	.word	0x200001bc

08000d8c <__sfputc_r>:
 8000d8c:	6893      	ldr	r3, [r2, #8]
 8000d8e:	3b01      	subs	r3, #1
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	b410      	push	{r4}
 8000d94:	6093      	str	r3, [r2, #8]
 8000d96:	da08      	bge.n	8000daa <__sfputc_r+0x1e>
 8000d98:	6994      	ldr	r4, [r2, #24]
 8000d9a:	42a3      	cmp	r3, r4
 8000d9c:	db01      	blt.n	8000da2 <__sfputc_r+0x16>
 8000d9e:	290a      	cmp	r1, #10
 8000da0:	d103      	bne.n	8000daa <__sfputc_r+0x1e>
 8000da2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000da6:	f000 bb73 	b.w	8001490 <__swbuf_r>
 8000daa:	6813      	ldr	r3, [r2, #0]
 8000dac:	1c58      	adds	r0, r3, #1
 8000dae:	6010      	str	r0, [r2, #0]
 8000db0:	7019      	strb	r1, [r3, #0]
 8000db2:	4608      	mov	r0, r1
 8000db4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000db8:	4770      	bx	lr

08000dba <__sfputs_r>:
 8000dba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dbc:	4606      	mov	r6, r0
 8000dbe:	460f      	mov	r7, r1
 8000dc0:	4614      	mov	r4, r2
 8000dc2:	18d5      	adds	r5, r2, r3
 8000dc4:	42ac      	cmp	r4, r5
 8000dc6:	d101      	bne.n	8000dcc <__sfputs_r+0x12>
 8000dc8:	2000      	movs	r0, #0
 8000dca:	e007      	b.n	8000ddc <__sfputs_r+0x22>
 8000dcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000dd0:	463a      	mov	r2, r7
 8000dd2:	4630      	mov	r0, r6
 8000dd4:	f7ff ffda 	bl	8000d8c <__sfputc_r>
 8000dd8:	1c43      	adds	r3, r0, #1
 8000dda:	d1f3      	bne.n	8000dc4 <__sfputs_r+0xa>
 8000ddc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000de0 <_vfiprintf_r>:
 8000de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000de4:	460d      	mov	r5, r1
 8000de6:	b09d      	sub	sp, #116	; 0x74
 8000de8:	4614      	mov	r4, r2
 8000dea:	4698      	mov	r8, r3
 8000dec:	4606      	mov	r6, r0
 8000dee:	b118      	cbz	r0, 8000df8 <_vfiprintf_r+0x18>
 8000df0:	6a03      	ldr	r3, [r0, #32]
 8000df2:	b90b      	cbnz	r3, 8000df8 <_vfiprintf_r+0x18>
 8000df4:	f7ff fdcc 	bl	8000990 <__sinit>
 8000df8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000dfa:	07d9      	lsls	r1, r3, #31
 8000dfc:	d405      	bmi.n	8000e0a <_vfiprintf_r+0x2a>
 8000dfe:	89ab      	ldrh	r3, [r5, #12]
 8000e00:	059a      	lsls	r2, r3, #22
 8000e02:	d402      	bmi.n	8000e0a <_vfiprintf_r+0x2a>
 8000e04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000e06:	f7ff fec7 	bl	8000b98 <__retarget_lock_acquire_recursive>
 8000e0a:	89ab      	ldrh	r3, [r5, #12]
 8000e0c:	071b      	lsls	r3, r3, #28
 8000e0e:	d501      	bpl.n	8000e14 <_vfiprintf_r+0x34>
 8000e10:	692b      	ldr	r3, [r5, #16]
 8000e12:	b99b      	cbnz	r3, 8000e3c <_vfiprintf_r+0x5c>
 8000e14:	4629      	mov	r1, r5
 8000e16:	4630      	mov	r0, r6
 8000e18:	f000 fb78 	bl	800150c <__swsetup_r>
 8000e1c:	b170      	cbz	r0, 8000e3c <_vfiprintf_r+0x5c>
 8000e1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000e20:	07dc      	lsls	r4, r3, #31
 8000e22:	d504      	bpl.n	8000e2e <_vfiprintf_r+0x4e>
 8000e24:	f04f 30ff 	mov.w	r0, #4294967295
 8000e28:	b01d      	add	sp, #116	; 0x74
 8000e2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000e2e:	89ab      	ldrh	r3, [r5, #12]
 8000e30:	0598      	lsls	r0, r3, #22
 8000e32:	d4f7      	bmi.n	8000e24 <_vfiprintf_r+0x44>
 8000e34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000e36:	f7ff feb0 	bl	8000b9a <__retarget_lock_release_recursive>
 8000e3a:	e7f3      	b.n	8000e24 <_vfiprintf_r+0x44>
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	9309      	str	r3, [sp, #36]	; 0x24
 8000e40:	2320      	movs	r3, #32
 8000e42:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000e46:	f8cd 800c 	str.w	r8, [sp, #12]
 8000e4a:	2330      	movs	r3, #48	; 0x30
 8000e4c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8001000 <_vfiprintf_r+0x220>
 8000e50:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000e54:	f04f 0901 	mov.w	r9, #1
 8000e58:	4623      	mov	r3, r4
 8000e5a:	469a      	mov	sl, r3
 8000e5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000e60:	b10a      	cbz	r2, 8000e66 <_vfiprintf_r+0x86>
 8000e62:	2a25      	cmp	r2, #37	; 0x25
 8000e64:	d1f9      	bne.n	8000e5a <_vfiprintf_r+0x7a>
 8000e66:	ebba 0b04 	subs.w	fp, sl, r4
 8000e6a:	d00b      	beq.n	8000e84 <_vfiprintf_r+0xa4>
 8000e6c:	465b      	mov	r3, fp
 8000e6e:	4622      	mov	r2, r4
 8000e70:	4629      	mov	r1, r5
 8000e72:	4630      	mov	r0, r6
 8000e74:	f7ff ffa1 	bl	8000dba <__sfputs_r>
 8000e78:	3001      	adds	r0, #1
 8000e7a:	f000 80a9 	beq.w	8000fd0 <_vfiprintf_r+0x1f0>
 8000e7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000e80:	445a      	add	r2, fp
 8000e82:	9209      	str	r2, [sp, #36]	; 0x24
 8000e84:	f89a 3000 	ldrb.w	r3, [sl]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	f000 80a1 	beq.w	8000fd0 <_vfiprintf_r+0x1f0>
 8000e8e:	2300      	movs	r3, #0
 8000e90:	f04f 32ff 	mov.w	r2, #4294967295
 8000e94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000e98:	f10a 0a01 	add.w	sl, sl, #1
 8000e9c:	9304      	str	r3, [sp, #16]
 8000e9e:	9307      	str	r3, [sp, #28]
 8000ea0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000ea4:	931a      	str	r3, [sp, #104]	; 0x68
 8000ea6:	4654      	mov	r4, sl
 8000ea8:	2205      	movs	r2, #5
 8000eaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000eae:	4854      	ldr	r0, [pc, #336]	; (8001000 <_vfiprintf_r+0x220>)
 8000eb0:	f7ff f9c6 	bl	8000240 <memchr>
 8000eb4:	9a04      	ldr	r2, [sp, #16]
 8000eb6:	b9d8      	cbnz	r0, 8000ef0 <_vfiprintf_r+0x110>
 8000eb8:	06d1      	lsls	r1, r2, #27
 8000eba:	bf44      	itt	mi
 8000ebc:	2320      	movmi	r3, #32
 8000ebe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000ec2:	0713      	lsls	r3, r2, #28
 8000ec4:	bf44      	itt	mi
 8000ec6:	232b      	movmi	r3, #43	; 0x2b
 8000ec8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000ecc:	f89a 3000 	ldrb.w	r3, [sl]
 8000ed0:	2b2a      	cmp	r3, #42	; 0x2a
 8000ed2:	d015      	beq.n	8000f00 <_vfiprintf_r+0x120>
 8000ed4:	9a07      	ldr	r2, [sp, #28]
 8000ed6:	4654      	mov	r4, sl
 8000ed8:	2000      	movs	r0, #0
 8000eda:	f04f 0c0a 	mov.w	ip, #10
 8000ede:	4621      	mov	r1, r4
 8000ee0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000ee4:	3b30      	subs	r3, #48	; 0x30
 8000ee6:	2b09      	cmp	r3, #9
 8000ee8:	d94d      	bls.n	8000f86 <_vfiprintf_r+0x1a6>
 8000eea:	b1b0      	cbz	r0, 8000f1a <_vfiprintf_r+0x13a>
 8000eec:	9207      	str	r2, [sp, #28]
 8000eee:	e014      	b.n	8000f1a <_vfiprintf_r+0x13a>
 8000ef0:	eba0 0308 	sub.w	r3, r0, r8
 8000ef4:	fa09 f303 	lsl.w	r3, r9, r3
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	9304      	str	r3, [sp, #16]
 8000efc:	46a2      	mov	sl, r4
 8000efe:	e7d2      	b.n	8000ea6 <_vfiprintf_r+0xc6>
 8000f00:	9b03      	ldr	r3, [sp, #12]
 8000f02:	1d19      	adds	r1, r3, #4
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	9103      	str	r1, [sp, #12]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	bfbb      	ittet	lt
 8000f0c:	425b      	neglt	r3, r3
 8000f0e:	f042 0202 	orrlt.w	r2, r2, #2
 8000f12:	9307      	strge	r3, [sp, #28]
 8000f14:	9307      	strlt	r3, [sp, #28]
 8000f16:	bfb8      	it	lt
 8000f18:	9204      	strlt	r2, [sp, #16]
 8000f1a:	7823      	ldrb	r3, [r4, #0]
 8000f1c:	2b2e      	cmp	r3, #46	; 0x2e
 8000f1e:	d10c      	bne.n	8000f3a <_vfiprintf_r+0x15a>
 8000f20:	7863      	ldrb	r3, [r4, #1]
 8000f22:	2b2a      	cmp	r3, #42	; 0x2a
 8000f24:	d134      	bne.n	8000f90 <_vfiprintf_r+0x1b0>
 8000f26:	9b03      	ldr	r3, [sp, #12]
 8000f28:	1d1a      	adds	r2, r3, #4
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	9203      	str	r2, [sp, #12]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	bfb8      	it	lt
 8000f32:	f04f 33ff 	movlt.w	r3, #4294967295
 8000f36:	3402      	adds	r4, #2
 8000f38:	9305      	str	r3, [sp, #20]
 8000f3a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8001010 <_vfiprintf_r+0x230>
 8000f3e:	7821      	ldrb	r1, [r4, #0]
 8000f40:	2203      	movs	r2, #3
 8000f42:	4650      	mov	r0, sl
 8000f44:	f7ff f97c 	bl	8000240 <memchr>
 8000f48:	b138      	cbz	r0, 8000f5a <_vfiprintf_r+0x17a>
 8000f4a:	9b04      	ldr	r3, [sp, #16]
 8000f4c:	eba0 000a 	sub.w	r0, r0, sl
 8000f50:	2240      	movs	r2, #64	; 0x40
 8000f52:	4082      	lsls	r2, r0
 8000f54:	4313      	orrs	r3, r2
 8000f56:	3401      	adds	r4, #1
 8000f58:	9304      	str	r3, [sp, #16]
 8000f5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000f5e:	4829      	ldr	r0, [pc, #164]	; (8001004 <_vfiprintf_r+0x224>)
 8000f60:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000f64:	2206      	movs	r2, #6
 8000f66:	f7ff f96b 	bl	8000240 <memchr>
 8000f6a:	2800      	cmp	r0, #0
 8000f6c:	d03f      	beq.n	8000fee <_vfiprintf_r+0x20e>
 8000f6e:	4b26      	ldr	r3, [pc, #152]	; (8001008 <_vfiprintf_r+0x228>)
 8000f70:	bb1b      	cbnz	r3, 8000fba <_vfiprintf_r+0x1da>
 8000f72:	9b03      	ldr	r3, [sp, #12]
 8000f74:	3307      	adds	r3, #7
 8000f76:	f023 0307 	bic.w	r3, r3, #7
 8000f7a:	3308      	adds	r3, #8
 8000f7c:	9303      	str	r3, [sp, #12]
 8000f7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000f80:	443b      	add	r3, r7
 8000f82:	9309      	str	r3, [sp, #36]	; 0x24
 8000f84:	e768      	b.n	8000e58 <_vfiprintf_r+0x78>
 8000f86:	fb0c 3202 	mla	r2, ip, r2, r3
 8000f8a:	460c      	mov	r4, r1
 8000f8c:	2001      	movs	r0, #1
 8000f8e:	e7a6      	b.n	8000ede <_vfiprintf_r+0xfe>
 8000f90:	2300      	movs	r3, #0
 8000f92:	3401      	adds	r4, #1
 8000f94:	9305      	str	r3, [sp, #20]
 8000f96:	4619      	mov	r1, r3
 8000f98:	f04f 0c0a 	mov.w	ip, #10
 8000f9c:	4620      	mov	r0, r4
 8000f9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000fa2:	3a30      	subs	r2, #48	; 0x30
 8000fa4:	2a09      	cmp	r2, #9
 8000fa6:	d903      	bls.n	8000fb0 <_vfiprintf_r+0x1d0>
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d0c6      	beq.n	8000f3a <_vfiprintf_r+0x15a>
 8000fac:	9105      	str	r1, [sp, #20]
 8000fae:	e7c4      	b.n	8000f3a <_vfiprintf_r+0x15a>
 8000fb0:	fb0c 2101 	mla	r1, ip, r1, r2
 8000fb4:	4604      	mov	r4, r0
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	e7f0      	b.n	8000f9c <_vfiprintf_r+0x1bc>
 8000fba:	ab03      	add	r3, sp, #12
 8000fbc:	9300      	str	r3, [sp, #0]
 8000fbe:	462a      	mov	r2, r5
 8000fc0:	4b12      	ldr	r3, [pc, #72]	; (800100c <_vfiprintf_r+0x22c>)
 8000fc2:	a904      	add	r1, sp, #16
 8000fc4:	4630      	mov	r0, r6
 8000fc6:	f3af 8000 	nop.w
 8000fca:	4607      	mov	r7, r0
 8000fcc:	1c78      	adds	r0, r7, #1
 8000fce:	d1d6      	bne.n	8000f7e <_vfiprintf_r+0x19e>
 8000fd0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000fd2:	07d9      	lsls	r1, r3, #31
 8000fd4:	d405      	bmi.n	8000fe2 <_vfiprintf_r+0x202>
 8000fd6:	89ab      	ldrh	r3, [r5, #12]
 8000fd8:	059a      	lsls	r2, r3, #22
 8000fda:	d402      	bmi.n	8000fe2 <_vfiprintf_r+0x202>
 8000fdc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000fde:	f7ff fddc 	bl	8000b9a <__retarget_lock_release_recursive>
 8000fe2:	89ab      	ldrh	r3, [r5, #12]
 8000fe4:	065b      	lsls	r3, r3, #25
 8000fe6:	f53f af1d 	bmi.w	8000e24 <_vfiprintf_r+0x44>
 8000fea:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000fec:	e71c      	b.n	8000e28 <_vfiprintf_r+0x48>
 8000fee:	ab03      	add	r3, sp, #12
 8000ff0:	9300      	str	r3, [sp, #0]
 8000ff2:	462a      	mov	r2, r5
 8000ff4:	4b05      	ldr	r3, [pc, #20]	; (800100c <_vfiprintf_r+0x22c>)
 8000ff6:	a904      	add	r1, sp, #16
 8000ff8:	4630      	mov	r0, r6
 8000ffa:	f000 f879 	bl	80010f0 <_printf_i>
 8000ffe:	e7e4      	b.n	8000fca <_vfiprintf_r+0x1ea>
 8001000:	0800170d 	.word	0x0800170d
 8001004:	08001717 	.word	0x08001717
 8001008:	00000000 	.word	0x00000000
 800100c:	08000dbb 	.word	0x08000dbb
 8001010:	08001713 	.word	0x08001713

08001014 <_printf_common>:
 8001014:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001018:	4616      	mov	r6, r2
 800101a:	4699      	mov	r9, r3
 800101c:	688a      	ldr	r2, [r1, #8]
 800101e:	690b      	ldr	r3, [r1, #16]
 8001020:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001024:	4293      	cmp	r3, r2
 8001026:	bfb8      	it	lt
 8001028:	4613      	movlt	r3, r2
 800102a:	6033      	str	r3, [r6, #0]
 800102c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001030:	4607      	mov	r7, r0
 8001032:	460c      	mov	r4, r1
 8001034:	b10a      	cbz	r2, 800103a <_printf_common+0x26>
 8001036:	3301      	adds	r3, #1
 8001038:	6033      	str	r3, [r6, #0]
 800103a:	6823      	ldr	r3, [r4, #0]
 800103c:	0699      	lsls	r1, r3, #26
 800103e:	bf42      	ittt	mi
 8001040:	6833      	ldrmi	r3, [r6, #0]
 8001042:	3302      	addmi	r3, #2
 8001044:	6033      	strmi	r3, [r6, #0]
 8001046:	6825      	ldr	r5, [r4, #0]
 8001048:	f015 0506 	ands.w	r5, r5, #6
 800104c:	d106      	bne.n	800105c <_printf_common+0x48>
 800104e:	f104 0a19 	add.w	sl, r4, #25
 8001052:	68e3      	ldr	r3, [r4, #12]
 8001054:	6832      	ldr	r2, [r6, #0]
 8001056:	1a9b      	subs	r3, r3, r2
 8001058:	42ab      	cmp	r3, r5
 800105a:	dc26      	bgt.n	80010aa <_printf_common+0x96>
 800105c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001060:	1e13      	subs	r3, r2, #0
 8001062:	6822      	ldr	r2, [r4, #0]
 8001064:	bf18      	it	ne
 8001066:	2301      	movne	r3, #1
 8001068:	0692      	lsls	r2, r2, #26
 800106a:	d42b      	bmi.n	80010c4 <_printf_common+0xb0>
 800106c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001070:	4649      	mov	r1, r9
 8001072:	4638      	mov	r0, r7
 8001074:	47c0      	blx	r8
 8001076:	3001      	adds	r0, #1
 8001078:	d01e      	beq.n	80010b8 <_printf_common+0xa4>
 800107a:	6823      	ldr	r3, [r4, #0]
 800107c:	6922      	ldr	r2, [r4, #16]
 800107e:	f003 0306 	and.w	r3, r3, #6
 8001082:	2b04      	cmp	r3, #4
 8001084:	bf02      	ittt	eq
 8001086:	68e5      	ldreq	r5, [r4, #12]
 8001088:	6833      	ldreq	r3, [r6, #0]
 800108a:	1aed      	subeq	r5, r5, r3
 800108c:	68a3      	ldr	r3, [r4, #8]
 800108e:	bf0c      	ite	eq
 8001090:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001094:	2500      	movne	r5, #0
 8001096:	4293      	cmp	r3, r2
 8001098:	bfc4      	itt	gt
 800109a:	1a9b      	subgt	r3, r3, r2
 800109c:	18ed      	addgt	r5, r5, r3
 800109e:	2600      	movs	r6, #0
 80010a0:	341a      	adds	r4, #26
 80010a2:	42b5      	cmp	r5, r6
 80010a4:	d11a      	bne.n	80010dc <_printf_common+0xc8>
 80010a6:	2000      	movs	r0, #0
 80010a8:	e008      	b.n	80010bc <_printf_common+0xa8>
 80010aa:	2301      	movs	r3, #1
 80010ac:	4652      	mov	r2, sl
 80010ae:	4649      	mov	r1, r9
 80010b0:	4638      	mov	r0, r7
 80010b2:	47c0      	blx	r8
 80010b4:	3001      	adds	r0, #1
 80010b6:	d103      	bne.n	80010c0 <_printf_common+0xac>
 80010b8:	f04f 30ff 	mov.w	r0, #4294967295
 80010bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010c0:	3501      	adds	r5, #1
 80010c2:	e7c6      	b.n	8001052 <_printf_common+0x3e>
 80010c4:	18e1      	adds	r1, r4, r3
 80010c6:	1c5a      	adds	r2, r3, #1
 80010c8:	2030      	movs	r0, #48	; 0x30
 80010ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80010ce:	4422      	add	r2, r4
 80010d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80010d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80010d8:	3302      	adds	r3, #2
 80010da:	e7c7      	b.n	800106c <_printf_common+0x58>
 80010dc:	2301      	movs	r3, #1
 80010de:	4622      	mov	r2, r4
 80010e0:	4649      	mov	r1, r9
 80010e2:	4638      	mov	r0, r7
 80010e4:	47c0      	blx	r8
 80010e6:	3001      	adds	r0, #1
 80010e8:	d0e6      	beq.n	80010b8 <_printf_common+0xa4>
 80010ea:	3601      	adds	r6, #1
 80010ec:	e7d9      	b.n	80010a2 <_printf_common+0x8e>
	...

080010f0 <_printf_i>:
 80010f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80010f4:	7e0f      	ldrb	r7, [r1, #24]
 80010f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80010f8:	2f78      	cmp	r7, #120	; 0x78
 80010fa:	4691      	mov	r9, r2
 80010fc:	4680      	mov	r8, r0
 80010fe:	460c      	mov	r4, r1
 8001100:	469a      	mov	sl, r3
 8001102:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001106:	d807      	bhi.n	8001118 <_printf_i+0x28>
 8001108:	2f62      	cmp	r7, #98	; 0x62
 800110a:	d80a      	bhi.n	8001122 <_printf_i+0x32>
 800110c:	2f00      	cmp	r7, #0
 800110e:	f000 80d4 	beq.w	80012ba <_printf_i+0x1ca>
 8001112:	2f58      	cmp	r7, #88	; 0x58
 8001114:	f000 80c0 	beq.w	8001298 <_printf_i+0x1a8>
 8001118:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800111c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001120:	e03a      	b.n	8001198 <_printf_i+0xa8>
 8001122:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001126:	2b15      	cmp	r3, #21
 8001128:	d8f6      	bhi.n	8001118 <_printf_i+0x28>
 800112a:	a101      	add	r1, pc, #4	; (adr r1, 8001130 <_printf_i+0x40>)
 800112c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001130:	08001189 	.word	0x08001189
 8001134:	0800119d 	.word	0x0800119d
 8001138:	08001119 	.word	0x08001119
 800113c:	08001119 	.word	0x08001119
 8001140:	08001119 	.word	0x08001119
 8001144:	08001119 	.word	0x08001119
 8001148:	0800119d 	.word	0x0800119d
 800114c:	08001119 	.word	0x08001119
 8001150:	08001119 	.word	0x08001119
 8001154:	08001119 	.word	0x08001119
 8001158:	08001119 	.word	0x08001119
 800115c:	080012a1 	.word	0x080012a1
 8001160:	080011c9 	.word	0x080011c9
 8001164:	0800125b 	.word	0x0800125b
 8001168:	08001119 	.word	0x08001119
 800116c:	08001119 	.word	0x08001119
 8001170:	080012c3 	.word	0x080012c3
 8001174:	08001119 	.word	0x08001119
 8001178:	080011c9 	.word	0x080011c9
 800117c:	08001119 	.word	0x08001119
 8001180:	08001119 	.word	0x08001119
 8001184:	08001263 	.word	0x08001263
 8001188:	682b      	ldr	r3, [r5, #0]
 800118a:	1d1a      	adds	r2, r3, #4
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	602a      	str	r2, [r5, #0]
 8001190:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001194:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001198:	2301      	movs	r3, #1
 800119a:	e09f      	b.n	80012dc <_printf_i+0x1ec>
 800119c:	6820      	ldr	r0, [r4, #0]
 800119e:	682b      	ldr	r3, [r5, #0]
 80011a0:	0607      	lsls	r7, r0, #24
 80011a2:	f103 0104 	add.w	r1, r3, #4
 80011a6:	6029      	str	r1, [r5, #0]
 80011a8:	d501      	bpl.n	80011ae <_printf_i+0xbe>
 80011aa:	681e      	ldr	r6, [r3, #0]
 80011ac:	e003      	b.n	80011b6 <_printf_i+0xc6>
 80011ae:	0646      	lsls	r6, r0, #25
 80011b0:	d5fb      	bpl.n	80011aa <_printf_i+0xba>
 80011b2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80011b6:	2e00      	cmp	r6, #0
 80011b8:	da03      	bge.n	80011c2 <_printf_i+0xd2>
 80011ba:	232d      	movs	r3, #45	; 0x2d
 80011bc:	4276      	negs	r6, r6
 80011be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80011c2:	485a      	ldr	r0, [pc, #360]	; (800132c <_printf_i+0x23c>)
 80011c4:	230a      	movs	r3, #10
 80011c6:	e012      	b.n	80011ee <_printf_i+0xfe>
 80011c8:	682b      	ldr	r3, [r5, #0]
 80011ca:	6820      	ldr	r0, [r4, #0]
 80011cc:	1d19      	adds	r1, r3, #4
 80011ce:	6029      	str	r1, [r5, #0]
 80011d0:	0605      	lsls	r5, r0, #24
 80011d2:	d501      	bpl.n	80011d8 <_printf_i+0xe8>
 80011d4:	681e      	ldr	r6, [r3, #0]
 80011d6:	e002      	b.n	80011de <_printf_i+0xee>
 80011d8:	0641      	lsls	r1, r0, #25
 80011da:	d5fb      	bpl.n	80011d4 <_printf_i+0xe4>
 80011dc:	881e      	ldrh	r6, [r3, #0]
 80011de:	4853      	ldr	r0, [pc, #332]	; (800132c <_printf_i+0x23c>)
 80011e0:	2f6f      	cmp	r7, #111	; 0x6f
 80011e2:	bf0c      	ite	eq
 80011e4:	2308      	moveq	r3, #8
 80011e6:	230a      	movne	r3, #10
 80011e8:	2100      	movs	r1, #0
 80011ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80011ee:	6865      	ldr	r5, [r4, #4]
 80011f0:	60a5      	str	r5, [r4, #8]
 80011f2:	2d00      	cmp	r5, #0
 80011f4:	bfa2      	ittt	ge
 80011f6:	6821      	ldrge	r1, [r4, #0]
 80011f8:	f021 0104 	bicge.w	r1, r1, #4
 80011fc:	6021      	strge	r1, [r4, #0]
 80011fe:	b90e      	cbnz	r6, 8001204 <_printf_i+0x114>
 8001200:	2d00      	cmp	r5, #0
 8001202:	d04b      	beq.n	800129c <_printf_i+0x1ac>
 8001204:	4615      	mov	r5, r2
 8001206:	fbb6 f1f3 	udiv	r1, r6, r3
 800120a:	fb03 6711 	mls	r7, r3, r1, r6
 800120e:	5dc7      	ldrb	r7, [r0, r7]
 8001210:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001214:	4637      	mov	r7, r6
 8001216:	42bb      	cmp	r3, r7
 8001218:	460e      	mov	r6, r1
 800121a:	d9f4      	bls.n	8001206 <_printf_i+0x116>
 800121c:	2b08      	cmp	r3, #8
 800121e:	d10b      	bne.n	8001238 <_printf_i+0x148>
 8001220:	6823      	ldr	r3, [r4, #0]
 8001222:	07de      	lsls	r6, r3, #31
 8001224:	d508      	bpl.n	8001238 <_printf_i+0x148>
 8001226:	6923      	ldr	r3, [r4, #16]
 8001228:	6861      	ldr	r1, [r4, #4]
 800122a:	4299      	cmp	r1, r3
 800122c:	bfde      	ittt	le
 800122e:	2330      	movle	r3, #48	; 0x30
 8001230:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001234:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001238:	1b52      	subs	r2, r2, r5
 800123a:	6122      	str	r2, [r4, #16]
 800123c:	f8cd a000 	str.w	sl, [sp]
 8001240:	464b      	mov	r3, r9
 8001242:	aa03      	add	r2, sp, #12
 8001244:	4621      	mov	r1, r4
 8001246:	4640      	mov	r0, r8
 8001248:	f7ff fee4 	bl	8001014 <_printf_common>
 800124c:	3001      	adds	r0, #1
 800124e:	d14a      	bne.n	80012e6 <_printf_i+0x1f6>
 8001250:	f04f 30ff 	mov.w	r0, #4294967295
 8001254:	b004      	add	sp, #16
 8001256:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800125a:	6823      	ldr	r3, [r4, #0]
 800125c:	f043 0320 	orr.w	r3, r3, #32
 8001260:	6023      	str	r3, [r4, #0]
 8001262:	4833      	ldr	r0, [pc, #204]	; (8001330 <_printf_i+0x240>)
 8001264:	2778      	movs	r7, #120	; 0x78
 8001266:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800126a:	6823      	ldr	r3, [r4, #0]
 800126c:	6829      	ldr	r1, [r5, #0]
 800126e:	061f      	lsls	r7, r3, #24
 8001270:	f851 6b04 	ldr.w	r6, [r1], #4
 8001274:	d402      	bmi.n	800127c <_printf_i+0x18c>
 8001276:	065f      	lsls	r7, r3, #25
 8001278:	bf48      	it	mi
 800127a:	b2b6      	uxthmi	r6, r6
 800127c:	07df      	lsls	r7, r3, #31
 800127e:	bf48      	it	mi
 8001280:	f043 0320 	orrmi.w	r3, r3, #32
 8001284:	6029      	str	r1, [r5, #0]
 8001286:	bf48      	it	mi
 8001288:	6023      	strmi	r3, [r4, #0]
 800128a:	b91e      	cbnz	r6, 8001294 <_printf_i+0x1a4>
 800128c:	6823      	ldr	r3, [r4, #0]
 800128e:	f023 0320 	bic.w	r3, r3, #32
 8001292:	6023      	str	r3, [r4, #0]
 8001294:	2310      	movs	r3, #16
 8001296:	e7a7      	b.n	80011e8 <_printf_i+0xf8>
 8001298:	4824      	ldr	r0, [pc, #144]	; (800132c <_printf_i+0x23c>)
 800129a:	e7e4      	b.n	8001266 <_printf_i+0x176>
 800129c:	4615      	mov	r5, r2
 800129e:	e7bd      	b.n	800121c <_printf_i+0x12c>
 80012a0:	682b      	ldr	r3, [r5, #0]
 80012a2:	6826      	ldr	r6, [r4, #0]
 80012a4:	6961      	ldr	r1, [r4, #20]
 80012a6:	1d18      	adds	r0, r3, #4
 80012a8:	6028      	str	r0, [r5, #0]
 80012aa:	0635      	lsls	r5, r6, #24
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	d501      	bpl.n	80012b4 <_printf_i+0x1c4>
 80012b0:	6019      	str	r1, [r3, #0]
 80012b2:	e002      	b.n	80012ba <_printf_i+0x1ca>
 80012b4:	0670      	lsls	r0, r6, #25
 80012b6:	d5fb      	bpl.n	80012b0 <_printf_i+0x1c0>
 80012b8:	8019      	strh	r1, [r3, #0]
 80012ba:	2300      	movs	r3, #0
 80012bc:	6123      	str	r3, [r4, #16]
 80012be:	4615      	mov	r5, r2
 80012c0:	e7bc      	b.n	800123c <_printf_i+0x14c>
 80012c2:	682b      	ldr	r3, [r5, #0]
 80012c4:	1d1a      	adds	r2, r3, #4
 80012c6:	602a      	str	r2, [r5, #0]
 80012c8:	681d      	ldr	r5, [r3, #0]
 80012ca:	6862      	ldr	r2, [r4, #4]
 80012cc:	2100      	movs	r1, #0
 80012ce:	4628      	mov	r0, r5
 80012d0:	f7fe ffb6 	bl	8000240 <memchr>
 80012d4:	b108      	cbz	r0, 80012da <_printf_i+0x1ea>
 80012d6:	1b40      	subs	r0, r0, r5
 80012d8:	6060      	str	r0, [r4, #4]
 80012da:	6863      	ldr	r3, [r4, #4]
 80012dc:	6123      	str	r3, [r4, #16]
 80012de:	2300      	movs	r3, #0
 80012e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80012e4:	e7aa      	b.n	800123c <_printf_i+0x14c>
 80012e6:	6923      	ldr	r3, [r4, #16]
 80012e8:	462a      	mov	r2, r5
 80012ea:	4649      	mov	r1, r9
 80012ec:	4640      	mov	r0, r8
 80012ee:	47d0      	blx	sl
 80012f0:	3001      	adds	r0, #1
 80012f2:	d0ad      	beq.n	8001250 <_printf_i+0x160>
 80012f4:	6823      	ldr	r3, [r4, #0]
 80012f6:	079b      	lsls	r3, r3, #30
 80012f8:	d413      	bmi.n	8001322 <_printf_i+0x232>
 80012fa:	68e0      	ldr	r0, [r4, #12]
 80012fc:	9b03      	ldr	r3, [sp, #12]
 80012fe:	4298      	cmp	r0, r3
 8001300:	bfb8      	it	lt
 8001302:	4618      	movlt	r0, r3
 8001304:	e7a6      	b.n	8001254 <_printf_i+0x164>
 8001306:	2301      	movs	r3, #1
 8001308:	4632      	mov	r2, r6
 800130a:	4649      	mov	r1, r9
 800130c:	4640      	mov	r0, r8
 800130e:	47d0      	blx	sl
 8001310:	3001      	adds	r0, #1
 8001312:	d09d      	beq.n	8001250 <_printf_i+0x160>
 8001314:	3501      	adds	r5, #1
 8001316:	68e3      	ldr	r3, [r4, #12]
 8001318:	9903      	ldr	r1, [sp, #12]
 800131a:	1a5b      	subs	r3, r3, r1
 800131c:	42ab      	cmp	r3, r5
 800131e:	dcf2      	bgt.n	8001306 <_printf_i+0x216>
 8001320:	e7eb      	b.n	80012fa <_printf_i+0x20a>
 8001322:	2500      	movs	r5, #0
 8001324:	f104 0619 	add.w	r6, r4, #25
 8001328:	e7f5      	b.n	8001316 <_printf_i+0x226>
 800132a:	bf00      	nop
 800132c:	0800171e 	.word	0x0800171e
 8001330:	0800172f 	.word	0x0800172f

08001334 <__sflush_r>:
 8001334:	898a      	ldrh	r2, [r1, #12]
 8001336:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800133a:	4605      	mov	r5, r0
 800133c:	0710      	lsls	r0, r2, #28
 800133e:	460c      	mov	r4, r1
 8001340:	d458      	bmi.n	80013f4 <__sflush_r+0xc0>
 8001342:	684b      	ldr	r3, [r1, #4]
 8001344:	2b00      	cmp	r3, #0
 8001346:	dc05      	bgt.n	8001354 <__sflush_r+0x20>
 8001348:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800134a:	2b00      	cmp	r3, #0
 800134c:	dc02      	bgt.n	8001354 <__sflush_r+0x20>
 800134e:	2000      	movs	r0, #0
 8001350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001354:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001356:	2e00      	cmp	r6, #0
 8001358:	d0f9      	beq.n	800134e <__sflush_r+0x1a>
 800135a:	2300      	movs	r3, #0
 800135c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001360:	682f      	ldr	r7, [r5, #0]
 8001362:	6a21      	ldr	r1, [r4, #32]
 8001364:	602b      	str	r3, [r5, #0]
 8001366:	d032      	beq.n	80013ce <__sflush_r+0x9a>
 8001368:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800136a:	89a3      	ldrh	r3, [r4, #12]
 800136c:	075a      	lsls	r2, r3, #29
 800136e:	d505      	bpl.n	800137c <__sflush_r+0x48>
 8001370:	6863      	ldr	r3, [r4, #4]
 8001372:	1ac0      	subs	r0, r0, r3
 8001374:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001376:	b10b      	cbz	r3, 800137c <__sflush_r+0x48>
 8001378:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800137a:	1ac0      	subs	r0, r0, r3
 800137c:	2300      	movs	r3, #0
 800137e:	4602      	mov	r2, r0
 8001380:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001382:	6a21      	ldr	r1, [r4, #32]
 8001384:	4628      	mov	r0, r5
 8001386:	47b0      	blx	r6
 8001388:	1c43      	adds	r3, r0, #1
 800138a:	89a3      	ldrh	r3, [r4, #12]
 800138c:	d106      	bne.n	800139c <__sflush_r+0x68>
 800138e:	6829      	ldr	r1, [r5, #0]
 8001390:	291d      	cmp	r1, #29
 8001392:	d82b      	bhi.n	80013ec <__sflush_r+0xb8>
 8001394:	4a29      	ldr	r2, [pc, #164]	; (800143c <__sflush_r+0x108>)
 8001396:	410a      	asrs	r2, r1
 8001398:	07d6      	lsls	r6, r2, #31
 800139a:	d427      	bmi.n	80013ec <__sflush_r+0xb8>
 800139c:	2200      	movs	r2, #0
 800139e:	6062      	str	r2, [r4, #4]
 80013a0:	04d9      	lsls	r1, r3, #19
 80013a2:	6922      	ldr	r2, [r4, #16]
 80013a4:	6022      	str	r2, [r4, #0]
 80013a6:	d504      	bpl.n	80013b2 <__sflush_r+0x7e>
 80013a8:	1c42      	adds	r2, r0, #1
 80013aa:	d101      	bne.n	80013b0 <__sflush_r+0x7c>
 80013ac:	682b      	ldr	r3, [r5, #0]
 80013ae:	b903      	cbnz	r3, 80013b2 <__sflush_r+0x7e>
 80013b0:	6560      	str	r0, [r4, #84]	; 0x54
 80013b2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80013b4:	602f      	str	r7, [r5, #0]
 80013b6:	2900      	cmp	r1, #0
 80013b8:	d0c9      	beq.n	800134e <__sflush_r+0x1a>
 80013ba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80013be:	4299      	cmp	r1, r3
 80013c0:	d002      	beq.n	80013c8 <__sflush_r+0x94>
 80013c2:	4628      	mov	r0, r5
 80013c4:	f7ff fbea 	bl	8000b9c <_free_r>
 80013c8:	2000      	movs	r0, #0
 80013ca:	6360      	str	r0, [r4, #52]	; 0x34
 80013cc:	e7c0      	b.n	8001350 <__sflush_r+0x1c>
 80013ce:	2301      	movs	r3, #1
 80013d0:	4628      	mov	r0, r5
 80013d2:	47b0      	blx	r6
 80013d4:	1c41      	adds	r1, r0, #1
 80013d6:	d1c8      	bne.n	800136a <__sflush_r+0x36>
 80013d8:	682b      	ldr	r3, [r5, #0]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d0c5      	beq.n	800136a <__sflush_r+0x36>
 80013de:	2b1d      	cmp	r3, #29
 80013e0:	d001      	beq.n	80013e6 <__sflush_r+0xb2>
 80013e2:	2b16      	cmp	r3, #22
 80013e4:	d101      	bne.n	80013ea <__sflush_r+0xb6>
 80013e6:	602f      	str	r7, [r5, #0]
 80013e8:	e7b1      	b.n	800134e <__sflush_r+0x1a>
 80013ea:	89a3      	ldrh	r3, [r4, #12]
 80013ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013f0:	81a3      	strh	r3, [r4, #12]
 80013f2:	e7ad      	b.n	8001350 <__sflush_r+0x1c>
 80013f4:	690f      	ldr	r7, [r1, #16]
 80013f6:	2f00      	cmp	r7, #0
 80013f8:	d0a9      	beq.n	800134e <__sflush_r+0x1a>
 80013fa:	0793      	lsls	r3, r2, #30
 80013fc:	680e      	ldr	r6, [r1, #0]
 80013fe:	bf08      	it	eq
 8001400:	694b      	ldreq	r3, [r1, #20]
 8001402:	600f      	str	r7, [r1, #0]
 8001404:	bf18      	it	ne
 8001406:	2300      	movne	r3, #0
 8001408:	eba6 0807 	sub.w	r8, r6, r7
 800140c:	608b      	str	r3, [r1, #8]
 800140e:	f1b8 0f00 	cmp.w	r8, #0
 8001412:	dd9c      	ble.n	800134e <__sflush_r+0x1a>
 8001414:	6a21      	ldr	r1, [r4, #32]
 8001416:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001418:	4643      	mov	r3, r8
 800141a:	463a      	mov	r2, r7
 800141c:	4628      	mov	r0, r5
 800141e:	47b0      	blx	r6
 8001420:	2800      	cmp	r0, #0
 8001422:	dc06      	bgt.n	8001432 <__sflush_r+0xfe>
 8001424:	89a3      	ldrh	r3, [r4, #12]
 8001426:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800142a:	81a3      	strh	r3, [r4, #12]
 800142c:	f04f 30ff 	mov.w	r0, #4294967295
 8001430:	e78e      	b.n	8001350 <__sflush_r+0x1c>
 8001432:	4407      	add	r7, r0
 8001434:	eba8 0800 	sub.w	r8, r8, r0
 8001438:	e7e9      	b.n	800140e <__sflush_r+0xda>
 800143a:	bf00      	nop
 800143c:	dfbffffe 	.word	0xdfbffffe

08001440 <_fflush_r>:
 8001440:	b538      	push	{r3, r4, r5, lr}
 8001442:	690b      	ldr	r3, [r1, #16]
 8001444:	4605      	mov	r5, r0
 8001446:	460c      	mov	r4, r1
 8001448:	b913      	cbnz	r3, 8001450 <_fflush_r+0x10>
 800144a:	2500      	movs	r5, #0
 800144c:	4628      	mov	r0, r5
 800144e:	bd38      	pop	{r3, r4, r5, pc}
 8001450:	b118      	cbz	r0, 800145a <_fflush_r+0x1a>
 8001452:	6a03      	ldr	r3, [r0, #32]
 8001454:	b90b      	cbnz	r3, 800145a <_fflush_r+0x1a>
 8001456:	f7ff fa9b 	bl	8000990 <__sinit>
 800145a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d0f3      	beq.n	800144a <_fflush_r+0xa>
 8001462:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001464:	07d0      	lsls	r0, r2, #31
 8001466:	d404      	bmi.n	8001472 <_fflush_r+0x32>
 8001468:	0599      	lsls	r1, r3, #22
 800146a:	d402      	bmi.n	8001472 <_fflush_r+0x32>
 800146c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800146e:	f7ff fb93 	bl	8000b98 <__retarget_lock_acquire_recursive>
 8001472:	4628      	mov	r0, r5
 8001474:	4621      	mov	r1, r4
 8001476:	f7ff ff5d 	bl	8001334 <__sflush_r>
 800147a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800147c:	07da      	lsls	r2, r3, #31
 800147e:	4605      	mov	r5, r0
 8001480:	d4e4      	bmi.n	800144c <_fflush_r+0xc>
 8001482:	89a3      	ldrh	r3, [r4, #12]
 8001484:	059b      	lsls	r3, r3, #22
 8001486:	d4e1      	bmi.n	800144c <_fflush_r+0xc>
 8001488:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800148a:	f7ff fb86 	bl	8000b9a <__retarget_lock_release_recursive>
 800148e:	e7dd      	b.n	800144c <_fflush_r+0xc>

08001490 <__swbuf_r>:
 8001490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001492:	460e      	mov	r6, r1
 8001494:	4614      	mov	r4, r2
 8001496:	4605      	mov	r5, r0
 8001498:	b118      	cbz	r0, 80014a2 <__swbuf_r+0x12>
 800149a:	6a03      	ldr	r3, [r0, #32]
 800149c:	b90b      	cbnz	r3, 80014a2 <__swbuf_r+0x12>
 800149e:	f7ff fa77 	bl	8000990 <__sinit>
 80014a2:	69a3      	ldr	r3, [r4, #24]
 80014a4:	60a3      	str	r3, [r4, #8]
 80014a6:	89a3      	ldrh	r3, [r4, #12]
 80014a8:	071a      	lsls	r2, r3, #28
 80014aa:	d525      	bpl.n	80014f8 <__swbuf_r+0x68>
 80014ac:	6923      	ldr	r3, [r4, #16]
 80014ae:	b31b      	cbz	r3, 80014f8 <__swbuf_r+0x68>
 80014b0:	6823      	ldr	r3, [r4, #0]
 80014b2:	6922      	ldr	r2, [r4, #16]
 80014b4:	1a98      	subs	r0, r3, r2
 80014b6:	6963      	ldr	r3, [r4, #20]
 80014b8:	b2f6      	uxtb	r6, r6
 80014ba:	4283      	cmp	r3, r0
 80014bc:	4637      	mov	r7, r6
 80014be:	dc04      	bgt.n	80014ca <__swbuf_r+0x3a>
 80014c0:	4621      	mov	r1, r4
 80014c2:	4628      	mov	r0, r5
 80014c4:	f7ff ffbc 	bl	8001440 <_fflush_r>
 80014c8:	b9e0      	cbnz	r0, 8001504 <__swbuf_r+0x74>
 80014ca:	68a3      	ldr	r3, [r4, #8]
 80014cc:	3b01      	subs	r3, #1
 80014ce:	60a3      	str	r3, [r4, #8]
 80014d0:	6823      	ldr	r3, [r4, #0]
 80014d2:	1c5a      	adds	r2, r3, #1
 80014d4:	6022      	str	r2, [r4, #0]
 80014d6:	701e      	strb	r6, [r3, #0]
 80014d8:	6962      	ldr	r2, [r4, #20]
 80014da:	1c43      	adds	r3, r0, #1
 80014dc:	429a      	cmp	r2, r3
 80014de:	d004      	beq.n	80014ea <__swbuf_r+0x5a>
 80014e0:	89a3      	ldrh	r3, [r4, #12]
 80014e2:	07db      	lsls	r3, r3, #31
 80014e4:	d506      	bpl.n	80014f4 <__swbuf_r+0x64>
 80014e6:	2e0a      	cmp	r6, #10
 80014e8:	d104      	bne.n	80014f4 <__swbuf_r+0x64>
 80014ea:	4621      	mov	r1, r4
 80014ec:	4628      	mov	r0, r5
 80014ee:	f7ff ffa7 	bl	8001440 <_fflush_r>
 80014f2:	b938      	cbnz	r0, 8001504 <__swbuf_r+0x74>
 80014f4:	4638      	mov	r0, r7
 80014f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80014f8:	4621      	mov	r1, r4
 80014fa:	4628      	mov	r0, r5
 80014fc:	f000 f806 	bl	800150c <__swsetup_r>
 8001500:	2800      	cmp	r0, #0
 8001502:	d0d5      	beq.n	80014b0 <__swbuf_r+0x20>
 8001504:	f04f 37ff 	mov.w	r7, #4294967295
 8001508:	e7f4      	b.n	80014f4 <__swbuf_r+0x64>
	...

0800150c <__swsetup_r>:
 800150c:	b538      	push	{r3, r4, r5, lr}
 800150e:	4b2a      	ldr	r3, [pc, #168]	; (80015b8 <__swsetup_r+0xac>)
 8001510:	4605      	mov	r5, r0
 8001512:	6818      	ldr	r0, [r3, #0]
 8001514:	460c      	mov	r4, r1
 8001516:	b118      	cbz	r0, 8001520 <__swsetup_r+0x14>
 8001518:	6a03      	ldr	r3, [r0, #32]
 800151a:	b90b      	cbnz	r3, 8001520 <__swsetup_r+0x14>
 800151c:	f7ff fa38 	bl	8000990 <__sinit>
 8001520:	89a3      	ldrh	r3, [r4, #12]
 8001522:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001526:	0718      	lsls	r0, r3, #28
 8001528:	d422      	bmi.n	8001570 <__swsetup_r+0x64>
 800152a:	06d9      	lsls	r1, r3, #27
 800152c:	d407      	bmi.n	800153e <__swsetup_r+0x32>
 800152e:	2309      	movs	r3, #9
 8001530:	602b      	str	r3, [r5, #0]
 8001532:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001536:	81a3      	strh	r3, [r4, #12]
 8001538:	f04f 30ff 	mov.w	r0, #4294967295
 800153c:	e034      	b.n	80015a8 <__swsetup_r+0x9c>
 800153e:	0758      	lsls	r0, r3, #29
 8001540:	d512      	bpl.n	8001568 <__swsetup_r+0x5c>
 8001542:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001544:	b141      	cbz	r1, 8001558 <__swsetup_r+0x4c>
 8001546:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800154a:	4299      	cmp	r1, r3
 800154c:	d002      	beq.n	8001554 <__swsetup_r+0x48>
 800154e:	4628      	mov	r0, r5
 8001550:	f7ff fb24 	bl	8000b9c <_free_r>
 8001554:	2300      	movs	r3, #0
 8001556:	6363      	str	r3, [r4, #52]	; 0x34
 8001558:	89a3      	ldrh	r3, [r4, #12]
 800155a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800155e:	81a3      	strh	r3, [r4, #12]
 8001560:	2300      	movs	r3, #0
 8001562:	6063      	str	r3, [r4, #4]
 8001564:	6923      	ldr	r3, [r4, #16]
 8001566:	6023      	str	r3, [r4, #0]
 8001568:	89a3      	ldrh	r3, [r4, #12]
 800156a:	f043 0308 	orr.w	r3, r3, #8
 800156e:	81a3      	strh	r3, [r4, #12]
 8001570:	6923      	ldr	r3, [r4, #16]
 8001572:	b94b      	cbnz	r3, 8001588 <__swsetup_r+0x7c>
 8001574:	89a3      	ldrh	r3, [r4, #12]
 8001576:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800157a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800157e:	d003      	beq.n	8001588 <__swsetup_r+0x7c>
 8001580:	4621      	mov	r1, r4
 8001582:	4628      	mov	r0, r5
 8001584:	f000 f850 	bl	8001628 <__smakebuf_r>
 8001588:	89a0      	ldrh	r0, [r4, #12]
 800158a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800158e:	f010 0301 	ands.w	r3, r0, #1
 8001592:	d00a      	beq.n	80015aa <__swsetup_r+0x9e>
 8001594:	2300      	movs	r3, #0
 8001596:	60a3      	str	r3, [r4, #8]
 8001598:	6963      	ldr	r3, [r4, #20]
 800159a:	425b      	negs	r3, r3
 800159c:	61a3      	str	r3, [r4, #24]
 800159e:	6923      	ldr	r3, [r4, #16]
 80015a0:	b943      	cbnz	r3, 80015b4 <__swsetup_r+0xa8>
 80015a2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80015a6:	d1c4      	bne.n	8001532 <__swsetup_r+0x26>
 80015a8:	bd38      	pop	{r3, r4, r5, pc}
 80015aa:	0781      	lsls	r1, r0, #30
 80015ac:	bf58      	it	pl
 80015ae:	6963      	ldrpl	r3, [r4, #20]
 80015b0:	60a3      	str	r3, [r4, #8]
 80015b2:	e7f4      	b.n	800159e <__swsetup_r+0x92>
 80015b4:	2000      	movs	r0, #0
 80015b6:	e7f7      	b.n	80015a8 <__swsetup_r+0x9c>
 80015b8:	20000058 	.word	0x20000058

080015bc <_sbrk_r>:
 80015bc:	b538      	push	{r3, r4, r5, lr}
 80015be:	4d06      	ldr	r5, [pc, #24]	; (80015d8 <_sbrk_r+0x1c>)
 80015c0:	2300      	movs	r3, #0
 80015c2:	4604      	mov	r4, r0
 80015c4:	4608      	mov	r0, r1
 80015c6:	602b      	str	r3, [r5, #0]
 80015c8:	f7ff f816 	bl	80005f8 <_sbrk>
 80015cc:	1c43      	adds	r3, r0, #1
 80015ce:	d102      	bne.n	80015d6 <_sbrk_r+0x1a>
 80015d0:	682b      	ldr	r3, [r5, #0]
 80015d2:	b103      	cbz	r3, 80015d6 <_sbrk_r+0x1a>
 80015d4:	6023      	str	r3, [r4, #0]
 80015d6:	bd38      	pop	{r3, r4, r5, pc}
 80015d8:	200001b8 	.word	0x200001b8

080015dc <__swhatbuf_r>:
 80015dc:	b570      	push	{r4, r5, r6, lr}
 80015de:	460c      	mov	r4, r1
 80015e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80015e4:	2900      	cmp	r1, #0
 80015e6:	b096      	sub	sp, #88	; 0x58
 80015e8:	4615      	mov	r5, r2
 80015ea:	461e      	mov	r6, r3
 80015ec:	da0d      	bge.n	800160a <__swhatbuf_r+0x2e>
 80015ee:	89a3      	ldrh	r3, [r4, #12]
 80015f0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80015f4:	f04f 0100 	mov.w	r1, #0
 80015f8:	bf0c      	ite	eq
 80015fa:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80015fe:	2340      	movne	r3, #64	; 0x40
 8001600:	2000      	movs	r0, #0
 8001602:	6031      	str	r1, [r6, #0]
 8001604:	602b      	str	r3, [r5, #0]
 8001606:	b016      	add	sp, #88	; 0x58
 8001608:	bd70      	pop	{r4, r5, r6, pc}
 800160a:	466a      	mov	r2, sp
 800160c:	f000 f848 	bl	80016a0 <_fstat_r>
 8001610:	2800      	cmp	r0, #0
 8001612:	dbec      	blt.n	80015ee <__swhatbuf_r+0x12>
 8001614:	9901      	ldr	r1, [sp, #4]
 8001616:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800161a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800161e:	4259      	negs	r1, r3
 8001620:	4159      	adcs	r1, r3
 8001622:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001626:	e7eb      	b.n	8001600 <__swhatbuf_r+0x24>

08001628 <__smakebuf_r>:
 8001628:	898b      	ldrh	r3, [r1, #12]
 800162a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800162c:	079d      	lsls	r5, r3, #30
 800162e:	4606      	mov	r6, r0
 8001630:	460c      	mov	r4, r1
 8001632:	d507      	bpl.n	8001644 <__smakebuf_r+0x1c>
 8001634:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001638:	6023      	str	r3, [r4, #0]
 800163a:	6123      	str	r3, [r4, #16]
 800163c:	2301      	movs	r3, #1
 800163e:	6163      	str	r3, [r4, #20]
 8001640:	b002      	add	sp, #8
 8001642:	bd70      	pop	{r4, r5, r6, pc}
 8001644:	ab01      	add	r3, sp, #4
 8001646:	466a      	mov	r2, sp
 8001648:	f7ff ffc8 	bl	80015dc <__swhatbuf_r>
 800164c:	9900      	ldr	r1, [sp, #0]
 800164e:	4605      	mov	r5, r0
 8001650:	4630      	mov	r0, r6
 8001652:	f7ff fb0f 	bl	8000c74 <_malloc_r>
 8001656:	b948      	cbnz	r0, 800166c <__smakebuf_r+0x44>
 8001658:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800165c:	059a      	lsls	r2, r3, #22
 800165e:	d4ef      	bmi.n	8001640 <__smakebuf_r+0x18>
 8001660:	f023 0303 	bic.w	r3, r3, #3
 8001664:	f043 0302 	orr.w	r3, r3, #2
 8001668:	81a3      	strh	r3, [r4, #12]
 800166a:	e7e3      	b.n	8001634 <__smakebuf_r+0xc>
 800166c:	89a3      	ldrh	r3, [r4, #12]
 800166e:	6020      	str	r0, [r4, #0]
 8001670:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001674:	81a3      	strh	r3, [r4, #12]
 8001676:	9b00      	ldr	r3, [sp, #0]
 8001678:	6163      	str	r3, [r4, #20]
 800167a:	9b01      	ldr	r3, [sp, #4]
 800167c:	6120      	str	r0, [r4, #16]
 800167e:	b15b      	cbz	r3, 8001698 <__smakebuf_r+0x70>
 8001680:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001684:	4630      	mov	r0, r6
 8001686:	f000 f81d 	bl	80016c4 <_isatty_r>
 800168a:	b128      	cbz	r0, 8001698 <__smakebuf_r+0x70>
 800168c:	89a3      	ldrh	r3, [r4, #12]
 800168e:	f023 0303 	bic.w	r3, r3, #3
 8001692:	f043 0301 	orr.w	r3, r3, #1
 8001696:	81a3      	strh	r3, [r4, #12]
 8001698:	89a3      	ldrh	r3, [r4, #12]
 800169a:	431d      	orrs	r5, r3
 800169c:	81a5      	strh	r5, [r4, #12]
 800169e:	e7cf      	b.n	8001640 <__smakebuf_r+0x18>

080016a0 <_fstat_r>:
 80016a0:	b538      	push	{r3, r4, r5, lr}
 80016a2:	4d07      	ldr	r5, [pc, #28]	; (80016c0 <_fstat_r+0x20>)
 80016a4:	2300      	movs	r3, #0
 80016a6:	4604      	mov	r4, r0
 80016a8:	4608      	mov	r0, r1
 80016aa:	4611      	mov	r1, r2
 80016ac:	602b      	str	r3, [r5, #0]
 80016ae:	f7fe ff7a 	bl	80005a6 <_fstat>
 80016b2:	1c43      	adds	r3, r0, #1
 80016b4:	d102      	bne.n	80016bc <_fstat_r+0x1c>
 80016b6:	682b      	ldr	r3, [r5, #0]
 80016b8:	b103      	cbz	r3, 80016bc <_fstat_r+0x1c>
 80016ba:	6023      	str	r3, [r4, #0]
 80016bc:	bd38      	pop	{r3, r4, r5, pc}
 80016be:	bf00      	nop
 80016c0:	200001b8 	.word	0x200001b8

080016c4 <_isatty_r>:
 80016c4:	b538      	push	{r3, r4, r5, lr}
 80016c6:	4d06      	ldr	r5, [pc, #24]	; (80016e0 <_isatty_r+0x1c>)
 80016c8:	2300      	movs	r3, #0
 80016ca:	4604      	mov	r4, r0
 80016cc:	4608      	mov	r0, r1
 80016ce:	602b      	str	r3, [r5, #0]
 80016d0:	f7fe ff79 	bl	80005c6 <_isatty>
 80016d4:	1c43      	adds	r3, r0, #1
 80016d6:	d102      	bne.n	80016de <_isatty_r+0x1a>
 80016d8:	682b      	ldr	r3, [r5, #0]
 80016da:	b103      	cbz	r3, 80016de <_isatty_r+0x1a>
 80016dc:	6023      	str	r3, [r4, #0]
 80016de:	bd38      	pop	{r3, r4, r5, pc}
 80016e0:	200001b8 	.word	0x200001b8

080016e4 <_init>:
 80016e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016e6:	bf00      	nop
 80016e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016ea:	bc08      	pop	{r3}
 80016ec:	469e      	mov	lr, r3
 80016ee:	4770      	bx	lr

080016f0 <_fini>:
 80016f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016f2:	bf00      	nop
 80016f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016f6:	bc08      	pop	{r3}
 80016f8:	469e      	mov	lr, r3
 80016fa:	4770      	bx	lr
