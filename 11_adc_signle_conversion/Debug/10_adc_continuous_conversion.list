
10_adc_continuous_conversion.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000140c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  0800160c  0800160c  0001160c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001648  08001648  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08001648  08001648  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001648  08001648  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001648  08001648  00011648  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800164c  0800164c  0001164c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08001650  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  2000005c  080016ac  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  080016ac  000201c8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008a  2**0
                  CONTENTS, READONLY
 13 .debug_info   000015a6  00000000  00000000  000200cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000807  00000000  00000000  00021673  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001f8  00000000  00000000  00021e80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000154  00000000  00000000  00022078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f075  00000000  00000000  000221cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002ea1  00000000  00000000  00041241  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a916c  00000000  00000000  000440e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000d98  00000000  00000000  000ed250  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000b1  00000000  00000000  000edfe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000005c 	.word	0x2000005c
 800021c:	00000000 	.word	0x00000000
 8000220:	080015f4 	.word	0x080015f4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000060 	.word	0x20000060
 800023c:	080015f4 	.word	0x080015f4

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <pa4_adc_init>:
#define CH4_RANK1 (1U<<2)
#define SWSTART (1U<<30)
#define EOC (1U<<1)

void pa4_adc_init(void)
{
 80002e0:	b480      	push	{r7}
 80002e2:	af00      	add	r7, sp, #0
	// Enable clock access to GPIOA
	RCC->AHB1ENR |= GPIOAEN;
 80002e4:	4b18      	ldr	r3, [pc, #96]	; (8000348 <pa4_adc_init+0x68>)
 80002e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002e8:	4a17      	ldr	r2, [pc, #92]	; (8000348 <pa4_adc_init+0x68>)
 80002ea:	f043 0301 	orr.w	r3, r3, #1
 80002ee:	6313      	str	r3, [r2, #48]	; 0x30

	// Configure GPIOA pin (PA4) mode to analog mode
	GPIOA->MODER |= (1U<<9) | (1U<<8);
 80002f0:	4b16      	ldr	r3, [pc, #88]	; (800034c <pa4_adc_init+0x6c>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	4a15      	ldr	r2, [pc, #84]	; (800034c <pa4_adc_init+0x6c>)
 80002f6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80002fa:	6013      	str	r3, [r2, #0]

	// Enable clock access to ADC1
	RCC->APB2ENR |= ADC1EN;
 80002fc:	4b12      	ldr	r3, [pc, #72]	; (8000348 <pa4_adc_init+0x68>)
 80002fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000300:	4a11      	ldr	r2, [pc, #68]	; (8000348 <pa4_adc_init+0x68>)
 8000302:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000306:	6453      	str	r3, [r2, #68]	; 0x44

	// Configure ADC1
	// Set conversion mode
	ADC1->CR2 |= ADC1CONT;
 8000308:	4b11      	ldr	r3, [pc, #68]	; (8000350 <pa4_adc_init+0x70>)
 800030a:	689b      	ldr	r3, [r3, #8]
 800030c:	4a10      	ldr	r2, [pc, #64]	; (8000350 <pa4_adc_init+0x70>)
 800030e:	f043 0302 	orr.w	r3, r3, #2
 8000312:	6093      	str	r3, [r2, #8]

	// Set sequencer length
	ADC1->SQR1 = 0;
 8000314:	4b0e      	ldr	r3, [pc, #56]	; (8000350 <pa4_adc_init+0x70>)
 8000316:	2200      	movs	r2, #0
 8000318:	62da      	str	r2, [r3, #44]	; 0x2c

	// Set ADC channel
	ADC1->SQR3 |= CH4_RANK1;
 800031a:	4b0d      	ldr	r3, [pc, #52]	; (8000350 <pa4_adc_init+0x70>)
 800031c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800031e:	4a0c      	ldr	r2, [pc, #48]	; (8000350 <pa4_adc_init+0x70>)
 8000320:	f043 0304 	orr.w	r3, r3, #4
 8000324:	6353      	str	r3, [r2, #52]	; 0x34

	// Enable ADC
	ADC1->CR2 |= ADCON;
 8000326:	4b0a      	ldr	r3, [pc, #40]	; (8000350 <pa4_adc_init+0x70>)
 8000328:	689b      	ldr	r3, [r3, #8]
 800032a:	4a09      	ldr	r2, [pc, #36]	; (8000350 <pa4_adc_init+0x70>)
 800032c:	f043 0301 	orr.w	r3, r3, #1
 8000330:	6093      	str	r3, [r2, #8]

	// Start conversion
	ADC1->CR2 |= SWSTART;
 8000332:	4b07      	ldr	r3, [pc, #28]	; (8000350 <pa4_adc_init+0x70>)
 8000334:	689b      	ldr	r3, [r3, #8]
 8000336:	4a06      	ldr	r2, [pc, #24]	; (8000350 <pa4_adc_init+0x70>)
 8000338:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800033c:	6093      	str	r3, [r2, #8]
}
 800033e:	bf00      	nop
 8000340:	46bd      	mov	sp, r7
 8000342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000346:	4770      	bx	lr
 8000348:	40023800 	.word	0x40023800
 800034c:	40020000 	.word	0x40020000
 8000350:	40012000 	.word	0x40012000

08000354 <adc_get_data>:

uint32_t adc_get_data(void)
{
 8000354:	b480      	push	{r7}
 8000356:	af00      	add	r7, sp, #0
	// Wait for end-of-conversion flag
	while (!(ADC1->SR & EOC)) {}
 8000358:	bf00      	nop
 800035a:	4b06      	ldr	r3, [pc, #24]	; (8000374 <adc_get_data+0x20>)
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	f003 0302 	and.w	r3, r3, #2
 8000362:	2b00      	cmp	r3, #0
 8000364:	d0f9      	beq.n	800035a <adc_get_data+0x6>

	// Read results
	return (ADC1->DR);
 8000366:	4b03      	ldr	r3, [pc, #12]	; (8000374 <adc_get_data+0x20>)
 8000368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c

}
 800036a:	4618      	mov	r0, r3
 800036c:	46bd      	mov	sp, r7
 800036e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000372:	4770      	bx	lr
 8000374:	40012000 	.word	0x40012000

08000378 <set_pin_mode>:
 */

#include <gpio.h>

void set_pin_mode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000378:	b480      	push	{r7}
 800037a:	b089      	sub	sp, #36	; 0x24
 800037c:	af00      	add	r7, sp, #0
 800037e:	60f8      	str	r0, [r7, #12]
 8000380:	60b9      	str	r1, [r7, #8]
 8000382:	607a      	str	r2, [r7, #4]
	// set the relevant bit in the mode register
	// CLEARMASK explanation:
	// 0b 11 << 16 (shift 0b11 to position 16 (LSB occupies bit 16, MSB occupies bit 17))
	MODIFY_REG(GPIOx->MODER, (0x3 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000384:	68fb      	ldr	r3, [r7, #12]
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	68ba      	ldr	r2, [r7, #8]
 800038a:	617a      	str	r2, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800038c:	697a      	ldr	r2, [r7, #20]
 800038e:	fa92 f2a2 	rbit	r2, r2
 8000392:	613a      	str	r2, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000394:	693a      	ldr	r2, [r7, #16]
 8000396:	fab2 f282 	clz	r2, r2
 800039a:	b2d2      	uxtb	r2, r2
 800039c:	0052      	lsls	r2, r2, #1
 800039e:	2103      	movs	r1, #3
 80003a0:	fa01 f202 	lsl.w	r2, r1, r2
 80003a4:	43d2      	mvns	r2, r2
 80003a6:	401a      	ands	r2, r3
 80003a8:	68bb      	ldr	r3, [r7, #8]
 80003aa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80003ac:	69fb      	ldr	r3, [r7, #28]
 80003ae:	fa93 f3a3 	rbit	r3, r3
 80003b2:	61bb      	str	r3, [r7, #24]
  return result;
 80003b4:	69bb      	ldr	r3, [r7, #24]
 80003b6:	fab3 f383 	clz	r3, r3
 80003ba:	b2db      	uxtb	r3, r3
 80003bc:	005b      	lsls	r3, r3, #1
 80003be:	6879      	ldr	r1, [r7, #4]
 80003c0:	fa01 f303 	lsl.w	r3, r1, r3
 80003c4:	431a      	orrs	r2, r3
 80003c6:	68fb      	ldr	r3, [r7, #12]
 80003c8:	601a      	str	r2, [r3, #0]
}
 80003ca:	bf00      	nop
 80003cc:	3724      	adds	r7, #36	; 0x24
 80003ce:	46bd      	mov	sp, r7
 80003d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d4:	4770      	bx	lr
	...

080003d8 <main>:
#include <stdio.h>
#include "uart.h"
#include "adc.h"

int main(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	af00      	add	r7, sp, #0
	uart3_tx_init();
 80003dc:	f000 f966 	bl	80006ac <uart3_tx_init>
	pa4_adc_init();
 80003e0:	f7ff ff7e 	bl	80002e0 <pa4_adc_init>

	while(1)
	{
		printf("%d \n\r", adc_get_data());
 80003e4:	f7ff ffb6 	bl	8000354 <adc_get_data>
 80003e8:	4603      	mov	r3, r0
 80003ea:	4619      	mov	r1, r3
 80003ec:	4801      	ldr	r0, [pc, #4]	; (80003f4 <main+0x1c>)
 80003ee:	f000 fa8b 	bl	8000908 <iprintf>
 80003f2:	e7f7      	b.n	80003e4 <main+0xc>
 80003f4:	0800160c 	.word	0x0800160c

080003f8 <set_ahb1_periph_clock>:
 */

#include "rcc.h"

void set_ahb1_periph_clock(uint32_t periphs)
{
 80003f8:	b480      	push	{r7}
 80003fa:	b083      	sub	sp, #12
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
	SET_BIT(RCC->AHB1ENR, periphs);
 8000400:	4b05      	ldr	r3, [pc, #20]	; (8000418 <set_ahb1_periph_clock+0x20>)
 8000402:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000404:	4904      	ldr	r1, [pc, #16]	; (8000418 <set_ahb1_periph_clock+0x20>)
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	4313      	orrs	r3, r2
 800040a:	630b      	str	r3, [r1, #48]	; 0x30
}
 800040c:	bf00      	nop
 800040e:	370c      	adds	r7, #12
 8000410:	46bd      	mov	sp, r7
 8000412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000416:	4770      	bx	lr
 8000418:	40023800 	.word	0x40023800

0800041c <set_apb1_periph_clock>:
{
	SET_BIT(RCC->AHB2ENR, periphs);
}

void set_apb1_periph_clock(uint32_t periphs)
{
 800041c:	b480      	push	{r7}
 800041e:	b083      	sub	sp, #12
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
	SET_BIT(RCC->APB1ENR, periphs);
 8000424:	4b05      	ldr	r3, [pc, #20]	; (800043c <set_apb1_periph_clock+0x20>)
 8000426:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000428:	4904      	ldr	r1, [pc, #16]	; (800043c <set_apb1_periph_clock+0x20>)
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	4313      	orrs	r3, r2
 800042e:	640b      	str	r3, [r1, #64]	; 0x40
}
 8000430:	bf00      	nop
 8000432:	370c      	adds	r7, #12
 8000434:	46bd      	mov	sp, r7
 8000436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043a:	4770      	bx	lr
 800043c:	40023800 	.word	0x40023800

08000440 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b086      	sub	sp, #24
 8000444:	af00      	add	r7, sp, #0
 8000446:	60f8      	str	r0, [r7, #12]
 8000448:	60b9      	str	r1, [r7, #8]
 800044a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800044c:	2300      	movs	r3, #0
 800044e:	617b      	str	r3, [r7, #20]
 8000450:	e00a      	b.n	8000468 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000452:	f3af 8000 	nop.w
 8000456:	4601      	mov	r1, r0
 8000458:	68bb      	ldr	r3, [r7, #8]
 800045a:	1c5a      	adds	r2, r3, #1
 800045c:	60ba      	str	r2, [r7, #8]
 800045e:	b2ca      	uxtb	r2, r1
 8000460:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000462:	697b      	ldr	r3, [r7, #20]
 8000464:	3301      	adds	r3, #1
 8000466:	617b      	str	r3, [r7, #20]
 8000468:	697a      	ldr	r2, [r7, #20]
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	429a      	cmp	r2, r3
 800046e:	dbf0      	blt.n	8000452 <_read+0x12>
  }

  return len;
 8000470:	687b      	ldr	r3, [r7, #4]
}
 8000472:	4618      	mov	r0, r3
 8000474:	3718      	adds	r7, #24
 8000476:	46bd      	mov	sp, r7
 8000478:	bd80      	pop	{r7, pc}

0800047a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800047a:	b580      	push	{r7, lr}
 800047c:	b086      	sub	sp, #24
 800047e:	af00      	add	r7, sp, #0
 8000480:	60f8      	str	r0, [r7, #12]
 8000482:	60b9      	str	r1, [r7, #8]
 8000484:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000486:	2300      	movs	r3, #0
 8000488:	617b      	str	r3, [r7, #20]
 800048a:	e009      	b.n	80004a0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800048c:	68bb      	ldr	r3, [r7, #8]
 800048e:	1c5a      	adds	r2, r3, #1
 8000490:	60ba      	str	r2, [r7, #8]
 8000492:	781b      	ldrb	r3, [r3, #0]
 8000494:	4618      	mov	r0, r3
 8000496:	f000 f88d 	bl	80005b4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800049a:	697b      	ldr	r3, [r7, #20]
 800049c:	3301      	adds	r3, #1
 800049e:	617b      	str	r3, [r7, #20]
 80004a0:	697a      	ldr	r2, [r7, #20]
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	429a      	cmp	r2, r3
 80004a6:	dbf1      	blt.n	800048c <_write+0x12>
  }
  return len;
 80004a8:	687b      	ldr	r3, [r7, #4]
}
 80004aa:	4618      	mov	r0, r3
 80004ac:	3718      	adds	r7, #24
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bd80      	pop	{r7, pc}

080004b2 <_close>:

int _close(int file)
{
 80004b2:	b480      	push	{r7}
 80004b4:	b083      	sub	sp, #12
 80004b6:	af00      	add	r7, sp, #0
 80004b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80004ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80004be:	4618      	mov	r0, r3
 80004c0:	370c      	adds	r7, #12
 80004c2:	46bd      	mov	sp, r7
 80004c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c8:	4770      	bx	lr

080004ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80004ca:	b480      	push	{r7}
 80004cc:	b083      	sub	sp, #12
 80004ce:	af00      	add	r7, sp, #0
 80004d0:	6078      	str	r0, [r7, #4]
 80004d2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80004d4:	683b      	ldr	r3, [r7, #0]
 80004d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80004da:	605a      	str	r2, [r3, #4]
  return 0;
 80004dc:	2300      	movs	r3, #0
}
 80004de:	4618      	mov	r0, r3
 80004e0:	370c      	adds	r7, #12
 80004e2:	46bd      	mov	sp, r7
 80004e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e8:	4770      	bx	lr

080004ea <_isatty>:

int _isatty(int file)
{
 80004ea:	b480      	push	{r7}
 80004ec:	b083      	sub	sp, #12
 80004ee:	af00      	add	r7, sp, #0
 80004f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80004f2:	2301      	movs	r3, #1
}
 80004f4:	4618      	mov	r0, r3
 80004f6:	370c      	adds	r7, #12
 80004f8:	46bd      	mov	sp, r7
 80004fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fe:	4770      	bx	lr

08000500 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000500:	b480      	push	{r7}
 8000502:	b085      	sub	sp, #20
 8000504:	af00      	add	r7, sp, #0
 8000506:	60f8      	str	r0, [r7, #12]
 8000508:	60b9      	str	r1, [r7, #8]
 800050a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800050c:	2300      	movs	r3, #0
}
 800050e:	4618      	mov	r0, r3
 8000510:	3714      	adds	r7, #20
 8000512:	46bd      	mov	sp, r7
 8000514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000518:	4770      	bx	lr
	...

0800051c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b086      	sub	sp, #24
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000524:	4a14      	ldr	r2, [pc, #80]	; (8000578 <_sbrk+0x5c>)
 8000526:	4b15      	ldr	r3, [pc, #84]	; (800057c <_sbrk+0x60>)
 8000528:	1ad3      	subs	r3, r2, r3
 800052a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800052c:	697b      	ldr	r3, [r7, #20]
 800052e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000530:	4b13      	ldr	r3, [pc, #76]	; (8000580 <_sbrk+0x64>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	2b00      	cmp	r3, #0
 8000536:	d102      	bne.n	800053e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000538:	4b11      	ldr	r3, [pc, #68]	; (8000580 <_sbrk+0x64>)
 800053a:	4a12      	ldr	r2, [pc, #72]	; (8000584 <_sbrk+0x68>)
 800053c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800053e:	4b10      	ldr	r3, [pc, #64]	; (8000580 <_sbrk+0x64>)
 8000540:	681a      	ldr	r2, [r3, #0]
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	4413      	add	r3, r2
 8000546:	693a      	ldr	r2, [r7, #16]
 8000548:	429a      	cmp	r2, r3
 800054a:	d207      	bcs.n	800055c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800054c:	f000 fa80 	bl	8000a50 <__errno>
 8000550:	4603      	mov	r3, r0
 8000552:	220c      	movs	r2, #12
 8000554:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000556:	f04f 33ff 	mov.w	r3, #4294967295
 800055a:	e009      	b.n	8000570 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800055c:	4b08      	ldr	r3, [pc, #32]	; (8000580 <_sbrk+0x64>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000562:	4b07      	ldr	r3, [pc, #28]	; (8000580 <_sbrk+0x64>)
 8000564:	681a      	ldr	r2, [r3, #0]
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	4413      	add	r3, r2
 800056a:	4a05      	ldr	r2, [pc, #20]	; (8000580 <_sbrk+0x64>)
 800056c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800056e:	68fb      	ldr	r3, [r7, #12]
}
 8000570:	4618      	mov	r0, r3
 8000572:	3718      	adds	r7, #24
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	20080000 	.word	0x20080000
 800057c:	00000400 	.word	0x00000400
 8000580:	20000078 	.word	0x20000078
 8000584:	200001c8 	.word	0x200001c8

08000588 <uart_write>:

#define		GPIODEN					(1U<<3)
#define		GPIO_ALTERNATE_MODE 	0x2

void uart_write(USART_TypeDef *USARTx, uint8_t value)
{
 8000588:	b480      	push	{r7}
 800058a:	b083      	sub	sp, #12
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
 8000590:	460b      	mov	r3, r1
 8000592:	70fb      	strb	r3, [r7, #3]
	// Make sure transmit data register is empty
	while (!(USARTx->ISR & USART_ISR_TXE)) {}
 8000594:	bf00      	nop
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	69db      	ldr	r3, [r3, #28]
 800059a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d0f9      	beq.n	8000596 <uart_write+0xe>

	// Write value into transmit data register
	USARTx->TDR = value;
 80005a2:	78fa      	ldrb	r2, [r7, #3]
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	629a      	str	r2, [r3, #40]	; 0x28

}
 80005a8:	bf00      	nop
 80005aa:	370c      	adds	r7, #12
 80005ac:	46bd      	mov	sp, r7
 80005ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b2:	4770      	bx	lr

080005b4 <__io_putchar>:

	// Read value out of receive data register
	return (READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
}

int __io_putchar(int ch) {
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
	uart_write(USART3, ch);
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	b2db      	uxtb	r3, r3
 80005c0:	4619      	mov	r1, r3
 80005c2:	4804      	ldr	r0, [pc, #16]	; (80005d4 <__io_putchar+0x20>)
 80005c4:	f7ff ffe0 	bl	8000588 <uart_write>
	return ch;
 80005c8:	687b      	ldr	r3, [r7, #4]
}
 80005ca:	4618      	mov	r0, r3
 80005cc:	3708      	adds	r7, #8
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	40004800 	.word	0x40004800

080005d8 <uart_enable>:

static void uart_enable(USART_TypeDef *USARTx)
{
 80005d8:	b480      	push	{r7}
 80005da:	b083      	sub	sp, #12
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
	SET_BIT(USARTx->CR1, USART_CR1_UE);
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	f043 0201 	orr.w	r2, r3, #1
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	601a      	str	r2, [r3, #0]
}
 80005ec:	bf00      	nop
 80005ee:	370c      	adds	r7, #12
 80005f0:	46bd      	mov	sp, r7
 80005f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f6:	4770      	bx	lr

080005f8 <set_uart_transfer_direction>:

static void set_uart_transfer_direction(USART_TypeDef *USARTx, uint32_t TransferDirection)
{
 80005f8:	b480      	push	{r7}
 80005fa:	b083      	sub	sp, #12
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
 8000600:	6039      	str	r1, [r7, #0]
	MODIFY_REG(USARTx->CR1, (USART_CR1_RE |USART_CR1_TE), TransferDirection);
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	f023 020c 	bic.w	r2, r3, #12
 800060a:	683b      	ldr	r3, [r7, #0]
 800060c:	431a      	orrs	r2, r3
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	601a      	str	r2, [r3, #0]
}
 8000612:	bf00      	nop
 8000614:	370c      	adds	r7, #12
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr

0800061e <compute_uart_div>:

static uint16_t compute_uart_div(uint32_t PeriphClk, uint32_t BaudRate)
{
 800061e:	b480      	push	{r7}
 8000620:	b083      	sub	sp, #12
 8000622:	af00      	add	r7, sp, #0
 8000624:	6078      	str	r0, [r7, #4]
 8000626:	6039      	str	r1, [r7, #0]
	return (PeriphClk + (BaudRate/2U))/BaudRate;
 8000628:	683b      	ldr	r3, [r7, #0]
 800062a:	085a      	lsrs	r2, r3, #1
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	441a      	add	r2, r3
 8000630:	683b      	ldr	r3, [r7, #0]
 8000632:	fbb2 f3f3 	udiv	r3, r2, r3
 8000636:	b29b      	uxth	r3, r3
}
 8000638:	4618      	mov	r0, r3
 800063a:	370c      	adds	r7, #12
 800063c:	46bd      	mov	sp, r7
 800063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000642:	4770      	bx	lr

08000644 <uart_set_baudrate>:

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b084      	sub	sp, #16
 8000648:	af00      	add	r7, sp, #0
 800064a:	60f8      	str	r0, [r7, #12]
 800064c:	60b9      	str	r1, [r7, #8]
 800064e:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_div(PeriphClk, BaudRate);
 8000650:	6879      	ldr	r1, [r7, #4]
 8000652:	68b8      	ldr	r0, [r7, #8]
 8000654:	f7ff ffe3 	bl	800061e <compute_uart_div>
 8000658:	4603      	mov	r3, r0
 800065a:	461a      	mov	r2, r3
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	60da      	str	r2, [r3, #12]
}
 8000660:	bf00      	nop
 8000662:	3710      	adds	r7, #16
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}

08000668 <config_uart_parameters>:

static void config_uart_parameters(USART_TypeDef *USARTx, uint32_t DataWidth, uint32_t Parity, uint32_t StopBits)
{
 8000668:	b480      	push	{r7}
 800066a:	b085      	sub	sp, #20
 800066c:	af00      	add	r7, sp, #0
 800066e:	60f8      	str	r0, [r7, #12]
 8000670:	60b9      	str	r1, [r7, #8]
 8000672:	607a      	str	r2, [r7, #4]
 8000674:	603b      	str	r3, [r7, #0]
	MODIFY_REG(USARTx->CR1, (USART_CR1_PS | USART_CR1_PCE | USART_CR1_M), Parity | DataWidth);
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	681a      	ldr	r2, [r3, #0]
 800067a:	4b0b      	ldr	r3, [pc, #44]	; (80006a8 <config_uart_parameters+0x40>)
 800067c:	4013      	ands	r3, r2
 800067e:	6879      	ldr	r1, [r7, #4]
 8000680:	68ba      	ldr	r2, [r7, #8]
 8000682:	430a      	orrs	r2, r1
 8000684:	431a      	orrs	r2, r3
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	601a      	str	r2, [r3, #0]
	MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	685b      	ldr	r3, [r3, #4]
 800068e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8000692:	683b      	ldr	r3, [r7, #0]
 8000694:	431a      	orrs	r2, r3
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	605a      	str	r2, [r3, #4]
}
 800069a:	bf00      	nop
 800069c:	3714      	adds	r7, #20
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	efffe9ff 	.word	0xefffe9ff

080006ac <uart3_tx_init>:

void uart3_tx_init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
	// To get pin ready as USART pin:
	// 1. Enable clock access to GPIOD
	set_ahb1_periph_clock(GPIODEN);
 80006b0:	2008      	movs	r0, #8
 80006b2:	f7ff fea1 	bl	80003f8 <set_ahb1_periph_clock>

	// 2. Set PD8 mode to alternate function
	set_pin_mode(GPIOD, UART3_TX, GPIO_ALTERNATE_MODE);
 80006b6:	2202      	movs	r2, #2
 80006b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006bc:	4819      	ldr	r0, [pc, #100]	; (8000724 <uart3_tx_init+0x78>)
 80006be:	f7ff fe5b 	bl	8000378 <set_pin_mode>

	// 3. Set alternate function type to USART for PD8
	GPIOD->AFR[1] |= (1U<<0);
 80006c2:	4b18      	ldr	r3, [pc, #96]	; (8000724 <uart3_tx_init+0x78>)
 80006c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006c6:	4a17      	ldr	r2, [pc, #92]	; (8000724 <uart3_tx_init+0x78>)
 80006c8:	f043 0301 	orr.w	r3, r3, #1
 80006cc:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOD->AFR[1] |= (1U<<1);
 80006ce:	4b15      	ldr	r3, [pc, #84]	; (8000724 <uart3_tx_init+0x78>)
 80006d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006d2:	4a14      	ldr	r2, [pc, #80]	; (8000724 <uart3_tx_init+0x78>)
 80006d4:	f043 0302 	orr.w	r3, r3, #2
 80006d8:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOD->AFR[1] |= (1U<<2);
 80006da:	4b12      	ldr	r3, [pc, #72]	; (8000724 <uart3_tx_init+0x78>)
 80006dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006de:	4a11      	ldr	r2, [pc, #68]	; (8000724 <uart3_tx_init+0x78>)
 80006e0:	f043 0304 	orr.w	r3, r3, #4
 80006e4:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOD->AFR[1] &= ~(1U<<3);
 80006e6:	4b0f      	ldr	r3, [pc, #60]	; (8000724 <uart3_tx_init+0x78>)
 80006e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006ea:	4a0e      	ldr	r2, [pc, #56]	; (8000724 <uart3_tx_init+0x78>)
 80006ec:	f023 0308 	bic.w	r3, r3, #8
 80006f0:	6253      	str	r3, [r2, #36]	; 0x24

	// To get USART/UART peripheral ready:
	// Enable clock to USART3 module
	set_apb1_periph_clock(USART3EN);
 80006f2:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80006f6:	f7ff fe91 	bl	800041c <set_apb1_periph_clock>

	// Configure USART parameters
	config_uart_parameters(USART3, UART_DATAWIDTH_8B, UART_PARITY_NONE, UART_STOPBITS_1);
 80006fa:	2300      	movs	r3, #0
 80006fc:	2200      	movs	r2, #0
 80006fe:	2100      	movs	r1, #0
 8000700:	4809      	ldr	r0, [pc, #36]	; (8000728 <uart3_tx_init+0x7c>)
 8000702:	f7ff ffb1 	bl	8000668 <config_uart_parameters>
	set_uart_transfer_direction(USART3, USART_CR1_TE);
 8000706:	2108      	movs	r1, #8
 8000708:	4807      	ldr	r0, [pc, #28]	; (8000728 <uart3_tx_init+0x7c>)
 800070a:	f7ff ff75 	bl	80005f8 <set_uart_transfer_direction>

	// Set baudrate
	uart_set_baudrate(USART3, 16000000, 57600);
 800070e:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000712:	4906      	ldr	r1, [pc, #24]	; (800072c <uart3_tx_init+0x80>)
 8000714:	4804      	ldr	r0, [pc, #16]	; (8000728 <uart3_tx_init+0x7c>)
 8000716:	f7ff ff95 	bl	8000644 <uart_set_baudrate>

	// Enable USART
	//USART3->CR1 |= USART_CR1_UE;
	uart_enable(USART3);
 800071a:	4803      	ldr	r0, [pc, #12]	; (8000728 <uart3_tx_init+0x7c>)
 800071c:	f7ff ff5c 	bl	80005d8 <uart_enable>
}
 8000720:	bf00      	nop
 8000722:	bd80      	pop	{r7, pc}
 8000724:	40020c00 	.word	0x40020c00
 8000728:	40004800 	.word	0x40004800
 800072c:	00f42400 	.word	0x00f42400

08000730 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000730:	480d      	ldr	r0, [pc, #52]	; (8000768 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000732:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000734:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000738:	480c      	ldr	r0, [pc, #48]	; (800076c <LoopForever+0x6>)
  ldr r1, =_edata
 800073a:	490d      	ldr	r1, [pc, #52]	; (8000770 <LoopForever+0xa>)
  ldr r2, =_sidata
 800073c:	4a0d      	ldr	r2, [pc, #52]	; (8000774 <LoopForever+0xe>)
  movs r3, #0
 800073e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000740:	e002      	b.n	8000748 <LoopCopyDataInit>

08000742 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000742:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000744:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000746:	3304      	adds	r3, #4

08000748 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000748:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800074a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800074c:	d3f9      	bcc.n	8000742 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800074e:	4a0a      	ldr	r2, [pc, #40]	; (8000778 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000750:	4c0a      	ldr	r4, [pc, #40]	; (800077c <LoopForever+0x16>)
  movs r3, #0
 8000752:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000754:	e001      	b.n	800075a <LoopFillZerobss>

08000756 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000756:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000758:	3204      	adds	r2, #4

0800075a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800075a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800075c:	d3fb      	bcc.n	8000756 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800075e:	f000 f97d 	bl	8000a5c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000762:	f7ff fe39 	bl	80003d8 <main>

08000766 <LoopForever>:

LoopForever:
  b LoopForever
 8000766:	e7fe      	b.n	8000766 <LoopForever>
  ldr   r0, =_estack
 8000768:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800076c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000770:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000774:	08001650 	.word	0x08001650
  ldr r2, =_sbss
 8000778:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800077c:	200001c8 	.word	0x200001c8

08000780 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000780:	e7fe      	b.n	8000780 <ADC_IRQHandler>
	...

08000784 <std>:
 8000784:	2300      	movs	r3, #0
 8000786:	b510      	push	{r4, lr}
 8000788:	4604      	mov	r4, r0
 800078a:	e9c0 3300 	strd	r3, r3, [r0]
 800078e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000792:	6083      	str	r3, [r0, #8]
 8000794:	8181      	strh	r1, [r0, #12]
 8000796:	6643      	str	r3, [r0, #100]	; 0x64
 8000798:	81c2      	strh	r2, [r0, #14]
 800079a:	6183      	str	r3, [r0, #24]
 800079c:	4619      	mov	r1, r3
 800079e:	2208      	movs	r2, #8
 80007a0:	305c      	adds	r0, #92	; 0x5c
 80007a2:	f000 f906 	bl	80009b2 <memset>
 80007a6:	4b0d      	ldr	r3, [pc, #52]	; (80007dc <std+0x58>)
 80007a8:	6263      	str	r3, [r4, #36]	; 0x24
 80007aa:	4b0d      	ldr	r3, [pc, #52]	; (80007e0 <std+0x5c>)
 80007ac:	62a3      	str	r3, [r4, #40]	; 0x28
 80007ae:	4b0d      	ldr	r3, [pc, #52]	; (80007e4 <std+0x60>)
 80007b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80007b2:	4b0d      	ldr	r3, [pc, #52]	; (80007e8 <std+0x64>)
 80007b4:	6323      	str	r3, [r4, #48]	; 0x30
 80007b6:	4b0d      	ldr	r3, [pc, #52]	; (80007ec <std+0x68>)
 80007b8:	6224      	str	r4, [r4, #32]
 80007ba:	429c      	cmp	r4, r3
 80007bc:	d006      	beq.n	80007cc <std+0x48>
 80007be:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80007c2:	4294      	cmp	r4, r2
 80007c4:	d002      	beq.n	80007cc <std+0x48>
 80007c6:	33d0      	adds	r3, #208	; 0xd0
 80007c8:	429c      	cmp	r4, r3
 80007ca:	d105      	bne.n	80007d8 <std+0x54>
 80007cc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80007d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007d4:	f000 b966 	b.w	8000aa4 <__retarget_lock_init_recursive>
 80007d8:	bd10      	pop	{r4, pc}
 80007da:	bf00      	nop
 80007dc:	0800092d 	.word	0x0800092d
 80007e0:	0800094f 	.word	0x0800094f
 80007e4:	08000987 	.word	0x08000987
 80007e8:	080009ab 	.word	0x080009ab
 80007ec:	2000007c 	.word	0x2000007c

080007f0 <stdio_exit_handler>:
 80007f0:	4a02      	ldr	r2, [pc, #8]	; (80007fc <stdio_exit_handler+0xc>)
 80007f2:	4903      	ldr	r1, [pc, #12]	; (8000800 <stdio_exit_handler+0x10>)
 80007f4:	4803      	ldr	r0, [pc, #12]	; (8000804 <stdio_exit_handler+0x14>)
 80007f6:	f000 b869 	b.w	80008cc <_fwalk_sglue>
 80007fa:	bf00      	nop
 80007fc:	20000000 	.word	0x20000000
 8000800:	08001351 	.word	0x08001351
 8000804:	2000000c 	.word	0x2000000c

08000808 <cleanup_stdio>:
 8000808:	6841      	ldr	r1, [r0, #4]
 800080a:	4b0c      	ldr	r3, [pc, #48]	; (800083c <cleanup_stdio+0x34>)
 800080c:	4299      	cmp	r1, r3
 800080e:	b510      	push	{r4, lr}
 8000810:	4604      	mov	r4, r0
 8000812:	d001      	beq.n	8000818 <cleanup_stdio+0x10>
 8000814:	f000 fd9c 	bl	8001350 <_fflush_r>
 8000818:	68a1      	ldr	r1, [r4, #8]
 800081a:	4b09      	ldr	r3, [pc, #36]	; (8000840 <cleanup_stdio+0x38>)
 800081c:	4299      	cmp	r1, r3
 800081e:	d002      	beq.n	8000826 <cleanup_stdio+0x1e>
 8000820:	4620      	mov	r0, r4
 8000822:	f000 fd95 	bl	8001350 <_fflush_r>
 8000826:	68e1      	ldr	r1, [r4, #12]
 8000828:	4b06      	ldr	r3, [pc, #24]	; (8000844 <cleanup_stdio+0x3c>)
 800082a:	4299      	cmp	r1, r3
 800082c:	d004      	beq.n	8000838 <cleanup_stdio+0x30>
 800082e:	4620      	mov	r0, r4
 8000830:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000834:	f000 bd8c 	b.w	8001350 <_fflush_r>
 8000838:	bd10      	pop	{r4, pc}
 800083a:	bf00      	nop
 800083c:	2000007c 	.word	0x2000007c
 8000840:	200000e4 	.word	0x200000e4
 8000844:	2000014c 	.word	0x2000014c

08000848 <global_stdio_init.part.0>:
 8000848:	b510      	push	{r4, lr}
 800084a:	4b0b      	ldr	r3, [pc, #44]	; (8000878 <global_stdio_init.part.0+0x30>)
 800084c:	4c0b      	ldr	r4, [pc, #44]	; (800087c <global_stdio_init.part.0+0x34>)
 800084e:	4a0c      	ldr	r2, [pc, #48]	; (8000880 <global_stdio_init.part.0+0x38>)
 8000850:	601a      	str	r2, [r3, #0]
 8000852:	4620      	mov	r0, r4
 8000854:	2200      	movs	r2, #0
 8000856:	2104      	movs	r1, #4
 8000858:	f7ff ff94 	bl	8000784 <std>
 800085c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8000860:	2201      	movs	r2, #1
 8000862:	2109      	movs	r1, #9
 8000864:	f7ff ff8e 	bl	8000784 <std>
 8000868:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800086c:	2202      	movs	r2, #2
 800086e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000872:	2112      	movs	r1, #18
 8000874:	f7ff bf86 	b.w	8000784 <std>
 8000878:	200001b4 	.word	0x200001b4
 800087c:	2000007c 	.word	0x2000007c
 8000880:	080007f1 	.word	0x080007f1

08000884 <__sfp_lock_acquire>:
 8000884:	4801      	ldr	r0, [pc, #4]	; (800088c <__sfp_lock_acquire+0x8>)
 8000886:	f000 b90e 	b.w	8000aa6 <__retarget_lock_acquire_recursive>
 800088a:	bf00      	nop
 800088c:	200001bd 	.word	0x200001bd

08000890 <__sfp_lock_release>:
 8000890:	4801      	ldr	r0, [pc, #4]	; (8000898 <__sfp_lock_release+0x8>)
 8000892:	f000 b909 	b.w	8000aa8 <__retarget_lock_release_recursive>
 8000896:	bf00      	nop
 8000898:	200001bd 	.word	0x200001bd

0800089c <__sinit>:
 800089c:	b510      	push	{r4, lr}
 800089e:	4604      	mov	r4, r0
 80008a0:	f7ff fff0 	bl	8000884 <__sfp_lock_acquire>
 80008a4:	6a23      	ldr	r3, [r4, #32]
 80008a6:	b11b      	cbz	r3, 80008b0 <__sinit+0x14>
 80008a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80008ac:	f7ff bff0 	b.w	8000890 <__sfp_lock_release>
 80008b0:	4b04      	ldr	r3, [pc, #16]	; (80008c4 <__sinit+0x28>)
 80008b2:	6223      	str	r3, [r4, #32]
 80008b4:	4b04      	ldr	r3, [pc, #16]	; (80008c8 <__sinit+0x2c>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d1f5      	bne.n	80008a8 <__sinit+0xc>
 80008bc:	f7ff ffc4 	bl	8000848 <global_stdio_init.part.0>
 80008c0:	e7f2      	b.n	80008a8 <__sinit+0xc>
 80008c2:	bf00      	nop
 80008c4:	08000809 	.word	0x08000809
 80008c8:	200001b4 	.word	0x200001b4

080008cc <_fwalk_sglue>:
 80008cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80008d0:	4607      	mov	r7, r0
 80008d2:	4688      	mov	r8, r1
 80008d4:	4614      	mov	r4, r2
 80008d6:	2600      	movs	r6, #0
 80008d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80008dc:	f1b9 0901 	subs.w	r9, r9, #1
 80008e0:	d505      	bpl.n	80008ee <_fwalk_sglue+0x22>
 80008e2:	6824      	ldr	r4, [r4, #0]
 80008e4:	2c00      	cmp	r4, #0
 80008e6:	d1f7      	bne.n	80008d8 <_fwalk_sglue+0xc>
 80008e8:	4630      	mov	r0, r6
 80008ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80008ee:	89ab      	ldrh	r3, [r5, #12]
 80008f0:	2b01      	cmp	r3, #1
 80008f2:	d907      	bls.n	8000904 <_fwalk_sglue+0x38>
 80008f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80008f8:	3301      	adds	r3, #1
 80008fa:	d003      	beq.n	8000904 <_fwalk_sglue+0x38>
 80008fc:	4629      	mov	r1, r5
 80008fe:	4638      	mov	r0, r7
 8000900:	47c0      	blx	r8
 8000902:	4306      	orrs	r6, r0
 8000904:	3568      	adds	r5, #104	; 0x68
 8000906:	e7e9      	b.n	80008dc <_fwalk_sglue+0x10>

08000908 <iprintf>:
 8000908:	b40f      	push	{r0, r1, r2, r3}
 800090a:	b507      	push	{r0, r1, r2, lr}
 800090c:	4906      	ldr	r1, [pc, #24]	; (8000928 <iprintf+0x20>)
 800090e:	ab04      	add	r3, sp, #16
 8000910:	6808      	ldr	r0, [r1, #0]
 8000912:	f853 2b04 	ldr.w	r2, [r3], #4
 8000916:	6881      	ldr	r1, [r0, #8]
 8000918:	9301      	str	r3, [sp, #4]
 800091a:	f000 f9e9 	bl	8000cf0 <_vfiprintf_r>
 800091e:	b003      	add	sp, #12
 8000920:	f85d eb04 	ldr.w	lr, [sp], #4
 8000924:	b004      	add	sp, #16
 8000926:	4770      	bx	lr
 8000928:	20000058 	.word	0x20000058

0800092c <__sread>:
 800092c:	b510      	push	{r4, lr}
 800092e:	460c      	mov	r4, r1
 8000930:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000934:	f000 f868 	bl	8000a08 <_read_r>
 8000938:	2800      	cmp	r0, #0
 800093a:	bfab      	itete	ge
 800093c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800093e:	89a3      	ldrhlt	r3, [r4, #12]
 8000940:	181b      	addge	r3, r3, r0
 8000942:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000946:	bfac      	ite	ge
 8000948:	6563      	strge	r3, [r4, #84]	; 0x54
 800094a:	81a3      	strhlt	r3, [r4, #12]
 800094c:	bd10      	pop	{r4, pc}

0800094e <__swrite>:
 800094e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000952:	461f      	mov	r7, r3
 8000954:	898b      	ldrh	r3, [r1, #12]
 8000956:	05db      	lsls	r3, r3, #23
 8000958:	4605      	mov	r5, r0
 800095a:	460c      	mov	r4, r1
 800095c:	4616      	mov	r6, r2
 800095e:	d505      	bpl.n	800096c <__swrite+0x1e>
 8000960:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000964:	2302      	movs	r3, #2
 8000966:	2200      	movs	r2, #0
 8000968:	f000 f83c 	bl	80009e4 <_lseek_r>
 800096c:	89a3      	ldrh	r3, [r4, #12]
 800096e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000972:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000976:	81a3      	strh	r3, [r4, #12]
 8000978:	4632      	mov	r2, r6
 800097a:	463b      	mov	r3, r7
 800097c:	4628      	mov	r0, r5
 800097e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000982:	f000 b853 	b.w	8000a2c <_write_r>

08000986 <__sseek>:
 8000986:	b510      	push	{r4, lr}
 8000988:	460c      	mov	r4, r1
 800098a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800098e:	f000 f829 	bl	80009e4 <_lseek_r>
 8000992:	1c43      	adds	r3, r0, #1
 8000994:	89a3      	ldrh	r3, [r4, #12]
 8000996:	bf15      	itete	ne
 8000998:	6560      	strne	r0, [r4, #84]	; 0x54
 800099a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800099e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80009a2:	81a3      	strheq	r3, [r4, #12]
 80009a4:	bf18      	it	ne
 80009a6:	81a3      	strhne	r3, [r4, #12]
 80009a8:	bd10      	pop	{r4, pc}

080009aa <__sclose>:
 80009aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80009ae:	f000 b809 	b.w	80009c4 <_close_r>

080009b2 <memset>:
 80009b2:	4402      	add	r2, r0
 80009b4:	4603      	mov	r3, r0
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d100      	bne.n	80009bc <memset+0xa>
 80009ba:	4770      	bx	lr
 80009bc:	f803 1b01 	strb.w	r1, [r3], #1
 80009c0:	e7f9      	b.n	80009b6 <memset+0x4>
	...

080009c4 <_close_r>:
 80009c4:	b538      	push	{r3, r4, r5, lr}
 80009c6:	4d06      	ldr	r5, [pc, #24]	; (80009e0 <_close_r+0x1c>)
 80009c8:	2300      	movs	r3, #0
 80009ca:	4604      	mov	r4, r0
 80009cc:	4608      	mov	r0, r1
 80009ce:	602b      	str	r3, [r5, #0]
 80009d0:	f7ff fd6f 	bl	80004b2 <_close>
 80009d4:	1c43      	adds	r3, r0, #1
 80009d6:	d102      	bne.n	80009de <_close_r+0x1a>
 80009d8:	682b      	ldr	r3, [r5, #0]
 80009da:	b103      	cbz	r3, 80009de <_close_r+0x1a>
 80009dc:	6023      	str	r3, [r4, #0]
 80009de:	bd38      	pop	{r3, r4, r5, pc}
 80009e0:	200001b8 	.word	0x200001b8

080009e4 <_lseek_r>:
 80009e4:	b538      	push	{r3, r4, r5, lr}
 80009e6:	4d07      	ldr	r5, [pc, #28]	; (8000a04 <_lseek_r+0x20>)
 80009e8:	4604      	mov	r4, r0
 80009ea:	4608      	mov	r0, r1
 80009ec:	4611      	mov	r1, r2
 80009ee:	2200      	movs	r2, #0
 80009f0:	602a      	str	r2, [r5, #0]
 80009f2:	461a      	mov	r2, r3
 80009f4:	f7ff fd84 	bl	8000500 <_lseek>
 80009f8:	1c43      	adds	r3, r0, #1
 80009fa:	d102      	bne.n	8000a02 <_lseek_r+0x1e>
 80009fc:	682b      	ldr	r3, [r5, #0]
 80009fe:	b103      	cbz	r3, 8000a02 <_lseek_r+0x1e>
 8000a00:	6023      	str	r3, [r4, #0]
 8000a02:	bd38      	pop	{r3, r4, r5, pc}
 8000a04:	200001b8 	.word	0x200001b8

08000a08 <_read_r>:
 8000a08:	b538      	push	{r3, r4, r5, lr}
 8000a0a:	4d07      	ldr	r5, [pc, #28]	; (8000a28 <_read_r+0x20>)
 8000a0c:	4604      	mov	r4, r0
 8000a0e:	4608      	mov	r0, r1
 8000a10:	4611      	mov	r1, r2
 8000a12:	2200      	movs	r2, #0
 8000a14:	602a      	str	r2, [r5, #0]
 8000a16:	461a      	mov	r2, r3
 8000a18:	f7ff fd12 	bl	8000440 <_read>
 8000a1c:	1c43      	adds	r3, r0, #1
 8000a1e:	d102      	bne.n	8000a26 <_read_r+0x1e>
 8000a20:	682b      	ldr	r3, [r5, #0]
 8000a22:	b103      	cbz	r3, 8000a26 <_read_r+0x1e>
 8000a24:	6023      	str	r3, [r4, #0]
 8000a26:	bd38      	pop	{r3, r4, r5, pc}
 8000a28:	200001b8 	.word	0x200001b8

08000a2c <_write_r>:
 8000a2c:	b538      	push	{r3, r4, r5, lr}
 8000a2e:	4d07      	ldr	r5, [pc, #28]	; (8000a4c <_write_r+0x20>)
 8000a30:	4604      	mov	r4, r0
 8000a32:	4608      	mov	r0, r1
 8000a34:	4611      	mov	r1, r2
 8000a36:	2200      	movs	r2, #0
 8000a38:	602a      	str	r2, [r5, #0]
 8000a3a:	461a      	mov	r2, r3
 8000a3c:	f7ff fd1d 	bl	800047a <_write>
 8000a40:	1c43      	adds	r3, r0, #1
 8000a42:	d102      	bne.n	8000a4a <_write_r+0x1e>
 8000a44:	682b      	ldr	r3, [r5, #0]
 8000a46:	b103      	cbz	r3, 8000a4a <_write_r+0x1e>
 8000a48:	6023      	str	r3, [r4, #0]
 8000a4a:	bd38      	pop	{r3, r4, r5, pc}
 8000a4c:	200001b8 	.word	0x200001b8

08000a50 <__errno>:
 8000a50:	4b01      	ldr	r3, [pc, #4]	; (8000a58 <__errno+0x8>)
 8000a52:	6818      	ldr	r0, [r3, #0]
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	20000058 	.word	0x20000058

08000a5c <__libc_init_array>:
 8000a5c:	b570      	push	{r4, r5, r6, lr}
 8000a5e:	4d0d      	ldr	r5, [pc, #52]	; (8000a94 <__libc_init_array+0x38>)
 8000a60:	4c0d      	ldr	r4, [pc, #52]	; (8000a98 <__libc_init_array+0x3c>)
 8000a62:	1b64      	subs	r4, r4, r5
 8000a64:	10a4      	asrs	r4, r4, #2
 8000a66:	2600      	movs	r6, #0
 8000a68:	42a6      	cmp	r6, r4
 8000a6a:	d109      	bne.n	8000a80 <__libc_init_array+0x24>
 8000a6c:	4d0b      	ldr	r5, [pc, #44]	; (8000a9c <__libc_init_array+0x40>)
 8000a6e:	4c0c      	ldr	r4, [pc, #48]	; (8000aa0 <__libc_init_array+0x44>)
 8000a70:	f000 fdc0 	bl	80015f4 <_init>
 8000a74:	1b64      	subs	r4, r4, r5
 8000a76:	10a4      	asrs	r4, r4, #2
 8000a78:	2600      	movs	r6, #0
 8000a7a:	42a6      	cmp	r6, r4
 8000a7c:	d105      	bne.n	8000a8a <__libc_init_array+0x2e>
 8000a7e:	bd70      	pop	{r4, r5, r6, pc}
 8000a80:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a84:	4798      	blx	r3
 8000a86:	3601      	adds	r6, #1
 8000a88:	e7ee      	b.n	8000a68 <__libc_init_array+0xc>
 8000a8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a8e:	4798      	blx	r3
 8000a90:	3601      	adds	r6, #1
 8000a92:	e7f2      	b.n	8000a7a <__libc_init_array+0x1e>
 8000a94:	08001648 	.word	0x08001648
 8000a98:	08001648 	.word	0x08001648
 8000a9c:	08001648 	.word	0x08001648
 8000aa0:	0800164c 	.word	0x0800164c

08000aa4 <__retarget_lock_init_recursive>:
 8000aa4:	4770      	bx	lr

08000aa6 <__retarget_lock_acquire_recursive>:
 8000aa6:	4770      	bx	lr

08000aa8 <__retarget_lock_release_recursive>:
 8000aa8:	4770      	bx	lr
	...

08000aac <_free_r>:
 8000aac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000aae:	2900      	cmp	r1, #0
 8000ab0:	d044      	beq.n	8000b3c <_free_r+0x90>
 8000ab2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000ab6:	9001      	str	r0, [sp, #4]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	f1a1 0404 	sub.w	r4, r1, #4
 8000abe:	bfb8      	it	lt
 8000ac0:	18e4      	addlt	r4, r4, r3
 8000ac2:	f000 f8df 	bl	8000c84 <__malloc_lock>
 8000ac6:	4a1e      	ldr	r2, [pc, #120]	; (8000b40 <_free_r+0x94>)
 8000ac8:	9801      	ldr	r0, [sp, #4]
 8000aca:	6813      	ldr	r3, [r2, #0]
 8000acc:	b933      	cbnz	r3, 8000adc <_free_r+0x30>
 8000ace:	6063      	str	r3, [r4, #4]
 8000ad0:	6014      	str	r4, [r2, #0]
 8000ad2:	b003      	add	sp, #12
 8000ad4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000ad8:	f000 b8da 	b.w	8000c90 <__malloc_unlock>
 8000adc:	42a3      	cmp	r3, r4
 8000ade:	d908      	bls.n	8000af2 <_free_r+0x46>
 8000ae0:	6825      	ldr	r5, [r4, #0]
 8000ae2:	1961      	adds	r1, r4, r5
 8000ae4:	428b      	cmp	r3, r1
 8000ae6:	bf01      	itttt	eq
 8000ae8:	6819      	ldreq	r1, [r3, #0]
 8000aea:	685b      	ldreq	r3, [r3, #4]
 8000aec:	1949      	addeq	r1, r1, r5
 8000aee:	6021      	streq	r1, [r4, #0]
 8000af0:	e7ed      	b.n	8000ace <_free_r+0x22>
 8000af2:	461a      	mov	r2, r3
 8000af4:	685b      	ldr	r3, [r3, #4]
 8000af6:	b10b      	cbz	r3, 8000afc <_free_r+0x50>
 8000af8:	42a3      	cmp	r3, r4
 8000afa:	d9fa      	bls.n	8000af2 <_free_r+0x46>
 8000afc:	6811      	ldr	r1, [r2, #0]
 8000afe:	1855      	adds	r5, r2, r1
 8000b00:	42a5      	cmp	r5, r4
 8000b02:	d10b      	bne.n	8000b1c <_free_r+0x70>
 8000b04:	6824      	ldr	r4, [r4, #0]
 8000b06:	4421      	add	r1, r4
 8000b08:	1854      	adds	r4, r2, r1
 8000b0a:	42a3      	cmp	r3, r4
 8000b0c:	6011      	str	r1, [r2, #0]
 8000b0e:	d1e0      	bne.n	8000ad2 <_free_r+0x26>
 8000b10:	681c      	ldr	r4, [r3, #0]
 8000b12:	685b      	ldr	r3, [r3, #4]
 8000b14:	6053      	str	r3, [r2, #4]
 8000b16:	440c      	add	r4, r1
 8000b18:	6014      	str	r4, [r2, #0]
 8000b1a:	e7da      	b.n	8000ad2 <_free_r+0x26>
 8000b1c:	d902      	bls.n	8000b24 <_free_r+0x78>
 8000b1e:	230c      	movs	r3, #12
 8000b20:	6003      	str	r3, [r0, #0]
 8000b22:	e7d6      	b.n	8000ad2 <_free_r+0x26>
 8000b24:	6825      	ldr	r5, [r4, #0]
 8000b26:	1961      	adds	r1, r4, r5
 8000b28:	428b      	cmp	r3, r1
 8000b2a:	bf04      	itt	eq
 8000b2c:	6819      	ldreq	r1, [r3, #0]
 8000b2e:	685b      	ldreq	r3, [r3, #4]
 8000b30:	6063      	str	r3, [r4, #4]
 8000b32:	bf04      	itt	eq
 8000b34:	1949      	addeq	r1, r1, r5
 8000b36:	6021      	streq	r1, [r4, #0]
 8000b38:	6054      	str	r4, [r2, #4]
 8000b3a:	e7ca      	b.n	8000ad2 <_free_r+0x26>
 8000b3c:	b003      	add	sp, #12
 8000b3e:	bd30      	pop	{r4, r5, pc}
 8000b40:	200001c0 	.word	0x200001c0

08000b44 <sbrk_aligned>:
 8000b44:	b570      	push	{r4, r5, r6, lr}
 8000b46:	4e0e      	ldr	r6, [pc, #56]	; (8000b80 <sbrk_aligned+0x3c>)
 8000b48:	460c      	mov	r4, r1
 8000b4a:	6831      	ldr	r1, [r6, #0]
 8000b4c:	4605      	mov	r5, r0
 8000b4e:	b911      	cbnz	r1, 8000b56 <sbrk_aligned+0x12>
 8000b50:	f000 fcbc 	bl	80014cc <_sbrk_r>
 8000b54:	6030      	str	r0, [r6, #0]
 8000b56:	4621      	mov	r1, r4
 8000b58:	4628      	mov	r0, r5
 8000b5a:	f000 fcb7 	bl	80014cc <_sbrk_r>
 8000b5e:	1c43      	adds	r3, r0, #1
 8000b60:	d00a      	beq.n	8000b78 <sbrk_aligned+0x34>
 8000b62:	1cc4      	adds	r4, r0, #3
 8000b64:	f024 0403 	bic.w	r4, r4, #3
 8000b68:	42a0      	cmp	r0, r4
 8000b6a:	d007      	beq.n	8000b7c <sbrk_aligned+0x38>
 8000b6c:	1a21      	subs	r1, r4, r0
 8000b6e:	4628      	mov	r0, r5
 8000b70:	f000 fcac 	bl	80014cc <_sbrk_r>
 8000b74:	3001      	adds	r0, #1
 8000b76:	d101      	bne.n	8000b7c <sbrk_aligned+0x38>
 8000b78:	f04f 34ff 	mov.w	r4, #4294967295
 8000b7c:	4620      	mov	r0, r4
 8000b7e:	bd70      	pop	{r4, r5, r6, pc}
 8000b80:	200001c4 	.word	0x200001c4

08000b84 <_malloc_r>:
 8000b84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000b88:	1ccd      	adds	r5, r1, #3
 8000b8a:	f025 0503 	bic.w	r5, r5, #3
 8000b8e:	3508      	adds	r5, #8
 8000b90:	2d0c      	cmp	r5, #12
 8000b92:	bf38      	it	cc
 8000b94:	250c      	movcc	r5, #12
 8000b96:	2d00      	cmp	r5, #0
 8000b98:	4607      	mov	r7, r0
 8000b9a:	db01      	blt.n	8000ba0 <_malloc_r+0x1c>
 8000b9c:	42a9      	cmp	r1, r5
 8000b9e:	d905      	bls.n	8000bac <_malloc_r+0x28>
 8000ba0:	230c      	movs	r3, #12
 8000ba2:	603b      	str	r3, [r7, #0]
 8000ba4:	2600      	movs	r6, #0
 8000ba6:	4630      	mov	r0, r6
 8000ba8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000bac:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8000c80 <_malloc_r+0xfc>
 8000bb0:	f000 f868 	bl	8000c84 <__malloc_lock>
 8000bb4:	f8d8 3000 	ldr.w	r3, [r8]
 8000bb8:	461c      	mov	r4, r3
 8000bba:	bb5c      	cbnz	r4, 8000c14 <_malloc_r+0x90>
 8000bbc:	4629      	mov	r1, r5
 8000bbe:	4638      	mov	r0, r7
 8000bc0:	f7ff ffc0 	bl	8000b44 <sbrk_aligned>
 8000bc4:	1c43      	adds	r3, r0, #1
 8000bc6:	4604      	mov	r4, r0
 8000bc8:	d155      	bne.n	8000c76 <_malloc_r+0xf2>
 8000bca:	f8d8 4000 	ldr.w	r4, [r8]
 8000bce:	4626      	mov	r6, r4
 8000bd0:	2e00      	cmp	r6, #0
 8000bd2:	d145      	bne.n	8000c60 <_malloc_r+0xdc>
 8000bd4:	2c00      	cmp	r4, #0
 8000bd6:	d048      	beq.n	8000c6a <_malloc_r+0xe6>
 8000bd8:	6823      	ldr	r3, [r4, #0]
 8000bda:	4631      	mov	r1, r6
 8000bdc:	4638      	mov	r0, r7
 8000bde:	eb04 0903 	add.w	r9, r4, r3
 8000be2:	f000 fc73 	bl	80014cc <_sbrk_r>
 8000be6:	4581      	cmp	r9, r0
 8000be8:	d13f      	bne.n	8000c6a <_malloc_r+0xe6>
 8000bea:	6821      	ldr	r1, [r4, #0]
 8000bec:	1a6d      	subs	r5, r5, r1
 8000bee:	4629      	mov	r1, r5
 8000bf0:	4638      	mov	r0, r7
 8000bf2:	f7ff ffa7 	bl	8000b44 <sbrk_aligned>
 8000bf6:	3001      	adds	r0, #1
 8000bf8:	d037      	beq.n	8000c6a <_malloc_r+0xe6>
 8000bfa:	6823      	ldr	r3, [r4, #0]
 8000bfc:	442b      	add	r3, r5
 8000bfe:	6023      	str	r3, [r4, #0]
 8000c00:	f8d8 3000 	ldr.w	r3, [r8]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d038      	beq.n	8000c7a <_malloc_r+0xf6>
 8000c08:	685a      	ldr	r2, [r3, #4]
 8000c0a:	42a2      	cmp	r2, r4
 8000c0c:	d12b      	bne.n	8000c66 <_malloc_r+0xe2>
 8000c0e:	2200      	movs	r2, #0
 8000c10:	605a      	str	r2, [r3, #4]
 8000c12:	e00f      	b.n	8000c34 <_malloc_r+0xb0>
 8000c14:	6822      	ldr	r2, [r4, #0]
 8000c16:	1b52      	subs	r2, r2, r5
 8000c18:	d41f      	bmi.n	8000c5a <_malloc_r+0xd6>
 8000c1a:	2a0b      	cmp	r2, #11
 8000c1c:	d917      	bls.n	8000c4e <_malloc_r+0xca>
 8000c1e:	1961      	adds	r1, r4, r5
 8000c20:	42a3      	cmp	r3, r4
 8000c22:	6025      	str	r5, [r4, #0]
 8000c24:	bf18      	it	ne
 8000c26:	6059      	strne	r1, [r3, #4]
 8000c28:	6863      	ldr	r3, [r4, #4]
 8000c2a:	bf08      	it	eq
 8000c2c:	f8c8 1000 	streq.w	r1, [r8]
 8000c30:	5162      	str	r2, [r4, r5]
 8000c32:	604b      	str	r3, [r1, #4]
 8000c34:	4638      	mov	r0, r7
 8000c36:	f104 060b 	add.w	r6, r4, #11
 8000c3a:	f000 f829 	bl	8000c90 <__malloc_unlock>
 8000c3e:	f026 0607 	bic.w	r6, r6, #7
 8000c42:	1d23      	adds	r3, r4, #4
 8000c44:	1af2      	subs	r2, r6, r3
 8000c46:	d0ae      	beq.n	8000ba6 <_malloc_r+0x22>
 8000c48:	1b9b      	subs	r3, r3, r6
 8000c4a:	50a3      	str	r3, [r4, r2]
 8000c4c:	e7ab      	b.n	8000ba6 <_malloc_r+0x22>
 8000c4e:	42a3      	cmp	r3, r4
 8000c50:	6862      	ldr	r2, [r4, #4]
 8000c52:	d1dd      	bne.n	8000c10 <_malloc_r+0x8c>
 8000c54:	f8c8 2000 	str.w	r2, [r8]
 8000c58:	e7ec      	b.n	8000c34 <_malloc_r+0xb0>
 8000c5a:	4623      	mov	r3, r4
 8000c5c:	6864      	ldr	r4, [r4, #4]
 8000c5e:	e7ac      	b.n	8000bba <_malloc_r+0x36>
 8000c60:	4634      	mov	r4, r6
 8000c62:	6876      	ldr	r6, [r6, #4]
 8000c64:	e7b4      	b.n	8000bd0 <_malloc_r+0x4c>
 8000c66:	4613      	mov	r3, r2
 8000c68:	e7cc      	b.n	8000c04 <_malloc_r+0x80>
 8000c6a:	230c      	movs	r3, #12
 8000c6c:	603b      	str	r3, [r7, #0]
 8000c6e:	4638      	mov	r0, r7
 8000c70:	f000 f80e 	bl	8000c90 <__malloc_unlock>
 8000c74:	e797      	b.n	8000ba6 <_malloc_r+0x22>
 8000c76:	6025      	str	r5, [r4, #0]
 8000c78:	e7dc      	b.n	8000c34 <_malloc_r+0xb0>
 8000c7a:	605b      	str	r3, [r3, #4]
 8000c7c:	deff      	udf	#255	; 0xff
 8000c7e:	bf00      	nop
 8000c80:	200001c0 	.word	0x200001c0

08000c84 <__malloc_lock>:
 8000c84:	4801      	ldr	r0, [pc, #4]	; (8000c8c <__malloc_lock+0x8>)
 8000c86:	f7ff bf0e 	b.w	8000aa6 <__retarget_lock_acquire_recursive>
 8000c8a:	bf00      	nop
 8000c8c:	200001bc 	.word	0x200001bc

08000c90 <__malloc_unlock>:
 8000c90:	4801      	ldr	r0, [pc, #4]	; (8000c98 <__malloc_unlock+0x8>)
 8000c92:	f7ff bf09 	b.w	8000aa8 <__retarget_lock_release_recursive>
 8000c96:	bf00      	nop
 8000c98:	200001bc 	.word	0x200001bc

08000c9c <__sfputc_r>:
 8000c9c:	6893      	ldr	r3, [r2, #8]
 8000c9e:	3b01      	subs	r3, #1
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	b410      	push	{r4}
 8000ca4:	6093      	str	r3, [r2, #8]
 8000ca6:	da08      	bge.n	8000cba <__sfputc_r+0x1e>
 8000ca8:	6994      	ldr	r4, [r2, #24]
 8000caa:	42a3      	cmp	r3, r4
 8000cac:	db01      	blt.n	8000cb2 <__sfputc_r+0x16>
 8000cae:	290a      	cmp	r1, #10
 8000cb0:	d103      	bne.n	8000cba <__sfputc_r+0x1e>
 8000cb2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000cb6:	f000 bb73 	b.w	80013a0 <__swbuf_r>
 8000cba:	6813      	ldr	r3, [r2, #0]
 8000cbc:	1c58      	adds	r0, r3, #1
 8000cbe:	6010      	str	r0, [r2, #0]
 8000cc0:	7019      	strb	r1, [r3, #0]
 8000cc2:	4608      	mov	r0, r1
 8000cc4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000cc8:	4770      	bx	lr

08000cca <__sfputs_r>:
 8000cca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ccc:	4606      	mov	r6, r0
 8000cce:	460f      	mov	r7, r1
 8000cd0:	4614      	mov	r4, r2
 8000cd2:	18d5      	adds	r5, r2, r3
 8000cd4:	42ac      	cmp	r4, r5
 8000cd6:	d101      	bne.n	8000cdc <__sfputs_r+0x12>
 8000cd8:	2000      	movs	r0, #0
 8000cda:	e007      	b.n	8000cec <__sfputs_r+0x22>
 8000cdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000ce0:	463a      	mov	r2, r7
 8000ce2:	4630      	mov	r0, r6
 8000ce4:	f7ff ffda 	bl	8000c9c <__sfputc_r>
 8000ce8:	1c43      	adds	r3, r0, #1
 8000cea:	d1f3      	bne.n	8000cd4 <__sfputs_r+0xa>
 8000cec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000cf0 <_vfiprintf_r>:
 8000cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000cf4:	460d      	mov	r5, r1
 8000cf6:	b09d      	sub	sp, #116	; 0x74
 8000cf8:	4614      	mov	r4, r2
 8000cfa:	4698      	mov	r8, r3
 8000cfc:	4606      	mov	r6, r0
 8000cfe:	b118      	cbz	r0, 8000d08 <_vfiprintf_r+0x18>
 8000d00:	6a03      	ldr	r3, [r0, #32]
 8000d02:	b90b      	cbnz	r3, 8000d08 <_vfiprintf_r+0x18>
 8000d04:	f7ff fdca 	bl	800089c <__sinit>
 8000d08:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000d0a:	07d9      	lsls	r1, r3, #31
 8000d0c:	d405      	bmi.n	8000d1a <_vfiprintf_r+0x2a>
 8000d0e:	89ab      	ldrh	r3, [r5, #12]
 8000d10:	059a      	lsls	r2, r3, #22
 8000d12:	d402      	bmi.n	8000d1a <_vfiprintf_r+0x2a>
 8000d14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000d16:	f7ff fec6 	bl	8000aa6 <__retarget_lock_acquire_recursive>
 8000d1a:	89ab      	ldrh	r3, [r5, #12]
 8000d1c:	071b      	lsls	r3, r3, #28
 8000d1e:	d501      	bpl.n	8000d24 <_vfiprintf_r+0x34>
 8000d20:	692b      	ldr	r3, [r5, #16]
 8000d22:	b99b      	cbnz	r3, 8000d4c <_vfiprintf_r+0x5c>
 8000d24:	4629      	mov	r1, r5
 8000d26:	4630      	mov	r0, r6
 8000d28:	f000 fb78 	bl	800141c <__swsetup_r>
 8000d2c:	b170      	cbz	r0, 8000d4c <_vfiprintf_r+0x5c>
 8000d2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000d30:	07dc      	lsls	r4, r3, #31
 8000d32:	d504      	bpl.n	8000d3e <_vfiprintf_r+0x4e>
 8000d34:	f04f 30ff 	mov.w	r0, #4294967295
 8000d38:	b01d      	add	sp, #116	; 0x74
 8000d3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d3e:	89ab      	ldrh	r3, [r5, #12]
 8000d40:	0598      	lsls	r0, r3, #22
 8000d42:	d4f7      	bmi.n	8000d34 <_vfiprintf_r+0x44>
 8000d44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000d46:	f7ff feaf 	bl	8000aa8 <__retarget_lock_release_recursive>
 8000d4a:	e7f3      	b.n	8000d34 <_vfiprintf_r+0x44>
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	9309      	str	r3, [sp, #36]	; 0x24
 8000d50:	2320      	movs	r3, #32
 8000d52:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000d56:	f8cd 800c 	str.w	r8, [sp, #12]
 8000d5a:	2330      	movs	r3, #48	; 0x30
 8000d5c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8000f10 <_vfiprintf_r+0x220>
 8000d60:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000d64:	f04f 0901 	mov.w	r9, #1
 8000d68:	4623      	mov	r3, r4
 8000d6a:	469a      	mov	sl, r3
 8000d6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000d70:	b10a      	cbz	r2, 8000d76 <_vfiprintf_r+0x86>
 8000d72:	2a25      	cmp	r2, #37	; 0x25
 8000d74:	d1f9      	bne.n	8000d6a <_vfiprintf_r+0x7a>
 8000d76:	ebba 0b04 	subs.w	fp, sl, r4
 8000d7a:	d00b      	beq.n	8000d94 <_vfiprintf_r+0xa4>
 8000d7c:	465b      	mov	r3, fp
 8000d7e:	4622      	mov	r2, r4
 8000d80:	4629      	mov	r1, r5
 8000d82:	4630      	mov	r0, r6
 8000d84:	f7ff ffa1 	bl	8000cca <__sfputs_r>
 8000d88:	3001      	adds	r0, #1
 8000d8a:	f000 80a9 	beq.w	8000ee0 <_vfiprintf_r+0x1f0>
 8000d8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000d90:	445a      	add	r2, fp
 8000d92:	9209      	str	r2, [sp, #36]	; 0x24
 8000d94:	f89a 3000 	ldrb.w	r3, [sl]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	f000 80a1 	beq.w	8000ee0 <_vfiprintf_r+0x1f0>
 8000d9e:	2300      	movs	r3, #0
 8000da0:	f04f 32ff 	mov.w	r2, #4294967295
 8000da4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000da8:	f10a 0a01 	add.w	sl, sl, #1
 8000dac:	9304      	str	r3, [sp, #16]
 8000dae:	9307      	str	r3, [sp, #28]
 8000db0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000db4:	931a      	str	r3, [sp, #104]	; 0x68
 8000db6:	4654      	mov	r4, sl
 8000db8:	2205      	movs	r2, #5
 8000dba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000dbe:	4854      	ldr	r0, [pc, #336]	; (8000f10 <_vfiprintf_r+0x220>)
 8000dc0:	f7ff fa3e 	bl	8000240 <memchr>
 8000dc4:	9a04      	ldr	r2, [sp, #16]
 8000dc6:	b9d8      	cbnz	r0, 8000e00 <_vfiprintf_r+0x110>
 8000dc8:	06d1      	lsls	r1, r2, #27
 8000dca:	bf44      	itt	mi
 8000dcc:	2320      	movmi	r3, #32
 8000dce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000dd2:	0713      	lsls	r3, r2, #28
 8000dd4:	bf44      	itt	mi
 8000dd6:	232b      	movmi	r3, #43	; 0x2b
 8000dd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000ddc:	f89a 3000 	ldrb.w	r3, [sl]
 8000de0:	2b2a      	cmp	r3, #42	; 0x2a
 8000de2:	d015      	beq.n	8000e10 <_vfiprintf_r+0x120>
 8000de4:	9a07      	ldr	r2, [sp, #28]
 8000de6:	4654      	mov	r4, sl
 8000de8:	2000      	movs	r0, #0
 8000dea:	f04f 0c0a 	mov.w	ip, #10
 8000dee:	4621      	mov	r1, r4
 8000df0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000df4:	3b30      	subs	r3, #48	; 0x30
 8000df6:	2b09      	cmp	r3, #9
 8000df8:	d94d      	bls.n	8000e96 <_vfiprintf_r+0x1a6>
 8000dfa:	b1b0      	cbz	r0, 8000e2a <_vfiprintf_r+0x13a>
 8000dfc:	9207      	str	r2, [sp, #28]
 8000dfe:	e014      	b.n	8000e2a <_vfiprintf_r+0x13a>
 8000e00:	eba0 0308 	sub.w	r3, r0, r8
 8000e04:	fa09 f303 	lsl.w	r3, r9, r3
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	9304      	str	r3, [sp, #16]
 8000e0c:	46a2      	mov	sl, r4
 8000e0e:	e7d2      	b.n	8000db6 <_vfiprintf_r+0xc6>
 8000e10:	9b03      	ldr	r3, [sp, #12]
 8000e12:	1d19      	adds	r1, r3, #4
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	9103      	str	r1, [sp, #12]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	bfbb      	ittet	lt
 8000e1c:	425b      	neglt	r3, r3
 8000e1e:	f042 0202 	orrlt.w	r2, r2, #2
 8000e22:	9307      	strge	r3, [sp, #28]
 8000e24:	9307      	strlt	r3, [sp, #28]
 8000e26:	bfb8      	it	lt
 8000e28:	9204      	strlt	r2, [sp, #16]
 8000e2a:	7823      	ldrb	r3, [r4, #0]
 8000e2c:	2b2e      	cmp	r3, #46	; 0x2e
 8000e2e:	d10c      	bne.n	8000e4a <_vfiprintf_r+0x15a>
 8000e30:	7863      	ldrb	r3, [r4, #1]
 8000e32:	2b2a      	cmp	r3, #42	; 0x2a
 8000e34:	d134      	bne.n	8000ea0 <_vfiprintf_r+0x1b0>
 8000e36:	9b03      	ldr	r3, [sp, #12]
 8000e38:	1d1a      	adds	r2, r3, #4
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	9203      	str	r2, [sp, #12]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	bfb8      	it	lt
 8000e42:	f04f 33ff 	movlt.w	r3, #4294967295
 8000e46:	3402      	adds	r4, #2
 8000e48:	9305      	str	r3, [sp, #20]
 8000e4a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8000f20 <_vfiprintf_r+0x230>
 8000e4e:	7821      	ldrb	r1, [r4, #0]
 8000e50:	2203      	movs	r2, #3
 8000e52:	4650      	mov	r0, sl
 8000e54:	f7ff f9f4 	bl	8000240 <memchr>
 8000e58:	b138      	cbz	r0, 8000e6a <_vfiprintf_r+0x17a>
 8000e5a:	9b04      	ldr	r3, [sp, #16]
 8000e5c:	eba0 000a 	sub.w	r0, r0, sl
 8000e60:	2240      	movs	r2, #64	; 0x40
 8000e62:	4082      	lsls	r2, r0
 8000e64:	4313      	orrs	r3, r2
 8000e66:	3401      	adds	r4, #1
 8000e68:	9304      	str	r3, [sp, #16]
 8000e6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000e6e:	4829      	ldr	r0, [pc, #164]	; (8000f14 <_vfiprintf_r+0x224>)
 8000e70:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000e74:	2206      	movs	r2, #6
 8000e76:	f7ff f9e3 	bl	8000240 <memchr>
 8000e7a:	2800      	cmp	r0, #0
 8000e7c:	d03f      	beq.n	8000efe <_vfiprintf_r+0x20e>
 8000e7e:	4b26      	ldr	r3, [pc, #152]	; (8000f18 <_vfiprintf_r+0x228>)
 8000e80:	bb1b      	cbnz	r3, 8000eca <_vfiprintf_r+0x1da>
 8000e82:	9b03      	ldr	r3, [sp, #12]
 8000e84:	3307      	adds	r3, #7
 8000e86:	f023 0307 	bic.w	r3, r3, #7
 8000e8a:	3308      	adds	r3, #8
 8000e8c:	9303      	str	r3, [sp, #12]
 8000e8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000e90:	443b      	add	r3, r7
 8000e92:	9309      	str	r3, [sp, #36]	; 0x24
 8000e94:	e768      	b.n	8000d68 <_vfiprintf_r+0x78>
 8000e96:	fb0c 3202 	mla	r2, ip, r2, r3
 8000e9a:	460c      	mov	r4, r1
 8000e9c:	2001      	movs	r0, #1
 8000e9e:	e7a6      	b.n	8000dee <_vfiprintf_r+0xfe>
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	3401      	adds	r4, #1
 8000ea4:	9305      	str	r3, [sp, #20]
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	f04f 0c0a 	mov.w	ip, #10
 8000eac:	4620      	mov	r0, r4
 8000eae:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000eb2:	3a30      	subs	r2, #48	; 0x30
 8000eb4:	2a09      	cmp	r2, #9
 8000eb6:	d903      	bls.n	8000ec0 <_vfiprintf_r+0x1d0>
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d0c6      	beq.n	8000e4a <_vfiprintf_r+0x15a>
 8000ebc:	9105      	str	r1, [sp, #20]
 8000ebe:	e7c4      	b.n	8000e4a <_vfiprintf_r+0x15a>
 8000ec0:	fb0c 2101 	mla	r1, ip, r1, r2
 8000ec4:	4604      	mov	r4, r0
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	e7f0      	b.n	8000eac <_vfiprintf_r+0x1bc>
 8000eca:	ab03      	add	r3, sp, #12
 8000ecc:	9300      	str	r3, [sp, #0]
 8000ece:	462a      	mov	r2, r5
 8000ed0:	4b12      	ldr	r3, [pc, #72]	; (8000f1c <_vfiprintf_r+0x22c>)
 8000ed2:	a904      	add	r1, sp, #16
 8000ed4:	4630      	mov	r0, r6
 8000ed6:	f3af 8000 	nop.w
 8000eda:	4607      	mov	r7, r0
 8000edc:	1c78      	adds	r0, r7, #1
 8000ede:	d1d6      	bne.n	8000e8e <_vfiprintf_r+0x19e>
 8000ee0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000ee2:	07d9      	lsls	r1, r3, #31
 8000ee4:	d405      	bmi.n	8000ef2 <_vfiprintf_r+0x202>
 8000ee6:	89ab      	ldrh	r3, [r5, #12]
 8000ee8:	059a      	lsls	r2, r3, #22
 8000eea:	d402      	bmi.n	8000ef2 <_vfiprintf_r+0x202>
 8000eec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000eee:	f7ff fddb 	bl	8000aa8 <__retarget_lock_release_recursive>
 8000ef2:	89ab      	ldrh	r3, [r5, #12]
 8000ef4:	065b      	lsls	r3, r3, #25
 8000ef6:	f53f af1d 	bmi.w	8000d34 <_vfiprintf_r+0x44>
 8000efa:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000efc:	e71c      	b.n	8000d38 <_vfiprintf_r+0x48>
 8000efe:	ab03      	add	r3, sp, #12
 8000f00:	9300      	str	r3, [sp, #0]
 8000f02:	462a      	mov	r2, r5
 8000f04:	4b05      	ldr	r3, [pc, #20]	; (8000f1c <_vfiprintf_r+0x22c>)
 8000f06:	a904      	add	r1, sp, #16
 8000f08:	4630      	mov	r0, r6
 8000f0a:	f000 f879 	bl	8001000 <_printf_i>
 8000f0e:	e7e4      	b.n	8000eda <_vfiprintf_r+0x1ea>
 8000f10:	08001612 	.word	0x08001612
 8000f14:	0800161c 	.word	0x0800161c
 8000f18:	00000000 	.word	0x00000000
 8000f1c:	08000ccb 	.word	0x08000ccb
 8000f20:	08001618 	.word	0x08001618

08000f24 <_printf_common>:
 8000f24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f28:	4616      	mov	r6, r2
 8000f2a:	4699      	mov	r9, r3
 8000f2c:	688a      	ldr	r2, [r1, #8]
 8000f2e:	690b      	ldr	r3, [r1, #16]
 8000f30:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000f34:	4293      	cmp	r3, r2
 8000f36:	bfb8      	it	lt
 8000f38:	4613      	movlt	r3, r2
 8000f3a:	6033      	str	r3, [r6, #0]
 8000f3c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000f40:	4607      	mov	r7, r0
 8000f42:	460c      	mov	r4, r1
 8000f44:	b10a      	cbz	r2, 8000f4a <_printf_common+0x26>
 8000f46:	3301      	adds	r3, #1
 8000f48:	6033      	str	r3, [r6, #0]
 8000f4a:	6823      	ldr	r3, [r4, #0]
 8000f4c:	0699      	lsls	r1, r3, #26
 8000f4e:	bf42      	ittt	mi
 8000f50:	6833      	ldrmi	r3, [r6, #0]
 8000f52:	3302      	addmi	r3, #2
 8000f54:	6033      	strmi	r3, [r6, #0]
 8000f56:	6825      	ldr	r5, [r4, #0]
 8000f58:	f015 0506 	ands.w	r5, r5, #6
 8000f5c:	d106      	bne.n	8000f6c <_printf_common+0x48>
 8000f5e:	f104 0a19 	add.w	sl, r4, #25
 8000f62:	68e3      	ldr	r3, [r4, #12]
 8000f64:	6832      	ldr	r2, [r6, #0]
 8000f66:	1a9b      	subs	r3, r3, r2
 8000f68:	42ab      	cmp	r3, r5
 8000f6a:	dc26      	bgt.n	8000fba <_printf_common+0x96>
 8000f6c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000f70:	1e13      	subs	r3, r2, #0
 8000f72:	6822      	ldr	r2, [r4, #0]
 8000f74:	bf18      	it	ne
 8000f76:	2301      	movne	r3, #1
 8000f78:	0692      	lsls	r2, r2, #26
 8000f7a:	d42b      	bmi.n	8000fd4 <_printf_common+0xb0>
 8000f7c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000f80:	4649      	mov	r1, r9
 8000f82:	4638      	mov	r0, r7
 8000f84:	47c0      	blx	r8
 8000f86:	3001      	adds	r0, #1
 8000f88:	d01e      	beq.n	8000fc8 <_printf_common+0xa4>
 8000f8a:	6823      	ldr	r3, [r4, #0]
 8000f8c:	6922      	ldr	r2, [r4, #16]
 8000f8e:	f003 0306 	and.w	r3, r3, #6
 8000f92:	2b04      	cmp	r3, #4
 8000f94:	bf02      	ittt	eq
 8000f96:	68e5      	ldreq	r5, [r4, #12]
 8000f98:	6833      	ldreq	r3, [r6, #0]
 8000f9a:	1aed      	subeq	r5, r5, r3
 8000f9c:	68a3      	ldr	r3, [r4, #8]
 8000f9e:	bf0c      	ite	eq
 8000fa0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000fa4:	2500      	movne	r5, #0
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	bfc4      	itt	gt
 8000faa:	1a9b      	subgt	r3, r3, r2
 8000fac:	18ed      	addgt	r5, r5, r3
 8000fae:	2600      	movs	r6, #0
 8000fb0:	341a      	adds	r4, #26
 8000fb2:	42b5      	cmp	r5, r6
 8000fb4:	d11a      	bne.n	8000fec <_printf_common+0xc8>
 8000fb6:	2000      	movs	r0, #0
 8000fb8:	e008      	b.n	8000fcc <_printf_common+0xa8>
 8000fba:	2301      	movs	r3, #1
 8000fbc:	4652      	mov	r2, sl
 8000fbe:	4649      	mov	r1, r9
 8000fc0:	4638      	mov	r0, r7
 8000fc2:	47c0      	blx	r8
 8000fc4:	3001      	adds	r0, #1
 8000fc6:	d103      	bne.n	8000fd0 <_printf_common+0xac>
 8000fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fd0:	3501      	adds	r5, #1
 8000fd2:	e7c6      	b.n	8000f62 <_printf_common+0x3e>
 8000fd4:	18e1      	adds	r1, r4, r3
 8000fd6:	1c5a      	adds	r2, r3, #1
 8000fd8:	2030      	movs	r0, #48	; 0x30
 8000fda:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000fde:	4422      	add	r2, r4
 8000fe0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000fe4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000fe8:	3302      	adds	r3, #2
 8000fea:	e7c7      	b.n	8000f7c <_printf_common+0x58>
 8000fec:	2301      	movs	r3, #1
 8000fee:	4622      	mov	r2, r4
 8000ff0:	4649      	mov	r1, r9
 8000ff2:	4638      	mov	r0, r7
 8000ff4:	47c0      	blx	r8
 8000ff6:	3001      	adds	r0, #1
 8000ff8:	d0e6      	beq.n	8000fc8 <_printf_common+0xa4>
 8000ffa:	3601      	adds	r6, #1
 8000ffc:	e7d9      	b.n	8000fb2 <_printf_common+0x8e>
	...

08001000 <_printf_i>:
 8001000:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001004:	7e0f      	ldrb	r7, [r1, #24]
 8001006:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001008:	2f78      	cmp	r7, #120	; 0x78
 800100a:	4691      	mov	r9, r2
 800100c:	4680      	mov	r8, r0
 800100e:	460c      	mov	r4, r1
 8001010:	469a      	mov	sl, r3
 8001012:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001016:	d807      	bhi.n	8001028 <_printf_i+0x28>
 8001018:	2f62      	cmp	r7, #98	; 0x62
 800101a:	d80a      	bhi.n	8001032 <_printf_i+0x32>
 800101c:	2f00      	cmp	r7, #0
 800101e:	f000 80d4 	beq.w	80011ca <_printf_i+0x1ca>
 8001022:	2f58      	cmp	r7, #88	; 0x58
 8001024:	f000 80c0 	beq.w	80011a8 <_printf_i+0x1a8>
 8001028:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800102c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001030:	e03a      	b.n	80010a8 <_printf_i+0xa8>
 8001032:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001036:	2b15      	cmp	r3, #21
 8001038:	d8f6      	bhi.n	8001028 <_printf_i+0x28>
 800103a:	a101      	add	r1, pc, #4	; (adr r1, 8001040 <_printf_i+0x40>)
 800103c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001040:	08001099 	.word	0x08001099
 8001044:	080010ad 	.word	0x080010ad
 8001048:	08001029 	.word	0x08001029
 800104c:	08001029 	.word	0x08001029
 8001050:	08001029 	.word	0x08001029
 8001054:	08001029 	.word	0x08001029
 8001058:	080010ad 	.word	0x080010ad
 800105c:	08001029 	.word	0x08001029
 8001060:	08001029 	.word	0x08001029
 8001064:	08001029 	.word	0x08001029
 8001068:	08001029 	.word	0x08001029
 800106c:	080011b1 	.word	0x080011b1
 8001070:	080010d9 	.word	0x080010d9
 8001074:	0800116b 	.word	0x0800116b
 8001078:	08001029 	.word	0x08001029
 800107c:	08001029 	.word	0x08001029
 8001080:	080011d3 	.word	0x080011d3
 8001084:	08001029 	.word	0x08001029
 8001088:	080010d9 	.word	0x080010d9
 800108c:	08001029 	.word	0x08001029
 8001090:	08001029 	.word	0x08001029
 8001094:	08001173 	.word	0x08001173
 8001098:	682b      	ldr	r3, [r5, #0]
 800109a:	1d1a      	adds	r2, r3, #4
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	602a      	str	r2, [r5, #0]
 80010a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80010a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80010a8:	2301      	movs	r3, #1
 80010aa:	e09f      	b.n	80011ec <_printf_i+0x1ec>
 80010ac:	6820      	ldr	r0, [r4, #0]
 80010ae:	682b      	ldr	r3, [r5, #0]
 80010b0:	0607      	lsls	r7, r0, #24
 80010b2:	f103 0104 	add.w	r1, r3, #4
 80010b6:	6029      	str	r1, [r5, #0]
 80010b8:	d501      	bpl.n	80010be <_printf_i+0xbe>
 80010ba:	681e      	ldr	r6, [r3, #0]
 80010bc:	e003      	b.n	80010c6 <_printf_i+0xc6>
 80010be:	0646      	lsls	r6, r0, #25
 80010c0:	d5fb      	bpl.n	80010ba <_printf_i+0xba>
 80010c2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80010c6:	2e00      	cmp	r6, #0
 80010c8:	da03      	bge.n	80010d2 <_printf_i+0xd2>
 80010ca:	232d      	movs	r3, #45	; 0x2d
 80010cc:	4276      	negs	r6, r6
 80010ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80010d2:	485a      	ldr	r0, [pc, #360]	; (800123c <_printf_i+0x23c>)
 80010d4:	230a      	movs	r3, #10
 80010d6:	e012      	b.n	80010fe <_printf_i+0xfe>
 80010d8:	682b      	ldr	r3, [r5, #0]
 80010da:	6820      	ldr	r0, [r4, #0]
 80010dc:	1d19      	adds	r1, r3, #4
 80010de:	6029      	str	r1, [r5, #0]
 80010e0:	0605      	lsls	r5, r0, #24
 80010e2:	d501      	bpl.n	80010e8 <_printf_i+0xe8>
 80010e4:	681e      	ldr	r6, [r3, #0]
 80010e6:	e002      	b.n	80010ee <_printf_i+0xee>
 80010e8:	0641      	lsls	r1, r0, #25
 80010ea:	d5fb      	bpl.n	80010e4 <_printf_i+0xe4>
 80010ec:	881e      	ldrh	r6, [r3, #0]
 80010ee:	4853      	ldr	r0, [pc, #332]	; (800123c <_printf_i+0x23c>)
 80010f0:	2f6f      	cmp	r7, #111	; 0x6f
 80010f2:	bf0c      	ite	eq
 80010f4:	2308      	moveq	r3, #8
 80010f6:	230a      	movne	r3, #10
 80010f8:	2100      	movs	r1, #0
 80010fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80010fe:	6865      	ldr	r5, [r4, #4]
 8001100:	60a5      	str	r5, [r4, #8]
 8001102:	2d00      	cmp	r5, #0
 8001104:	bfa2      	ittt	ge
 8001106:	6821      	ldrge	r1, [r4, #0]
 8001108:	f021 0104 	bicge.w	r1, r1, #4
 800110c:	6021      	strge	r1, [r4, #0]
 800110e:	b90e      	cbnz	r6, 8001114 <_printf_i+0x114>
 8001110:	2d00      	cmp	r5, #0
 8001112:	d04b      	beq.n	80011ac <_printf_i+0x1ac>
 8001114:	4615      	mov	r5, r2
 8001116:	fbb6 f1f3 	udiv	r1, r6, r3
 800111a:	fb03 6711 	mls	r7, r3, r1, r6
 800111e:	5dc7      	ldrb	r7, [r0, r7]
 8001120:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001124:	4637      	mov	r7, r6
 8001126:	42bb      	cmp	r3, r7
 8001128:	460e      	mov	r6, r1
 800112a:	d9f4      	bls.n	8001116 <_printf_i+0x116>
 800112c:	2b08      	cmp	r3, #8
 800112e:	d10b      	bne.n	8001148 <_printf_i+0x148>
 8001130:	6823      	ldr	r3, [r4, #0]
 8001132:	07de      	lsls	r6, r3, #31
 8001134:	d508      	bpl.n	8001148 <_printf_i+0x148>
 8001136:	6923      	ldr	r3, [r4, #16]
 8001138:	6861      	ldr	r1, [r4, #4]
 800113a:	4299      	cmp	r1, r3
 800113c:	bfde      	ittt	le
 800113e:	2330      	movle	r3, #48	; 0x30
 8001140:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001144:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001148:	1b52      	subs	r2, r2, r5
 800114a:	6122      	str	r2, [r4, #16]
 800114c:	f8cd a000 	str.w	sl, [sp]
 8001150:	464b      	mov	r3, r9
 8001152:	aa03      	add	r2, sp, #12
 8001154:	4621      	mov	r1, r4
 8001156:	4640      	mov	r0, r8
 8001158:	f7ff fee4 	bl	8000f24 <_printf_common>
 800115c:	3001      	adds	r0, #1
 800115e:	d14a      	bne.n	80011f6 <_printf_i+0x1f6>
 8001160:	f04f 30ff 	mov.w	r0, #4294967295
 8001164:	b004      	add	sp, #16
 8001166:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800116a:	6823      	ldr	r3, [r4, #0]
 800116c:	f043 0320 	orr.w	r3, r3, #32
 8001170:	6023      	str	r3, [r4, #0]
 8001172:	4833      	ldr	r0, [pc, #204]	; (8001240 <_printf_i+0x240>)
 8001174:	2778      	movs	r7, #120	; 0x78
 8001176:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800117a:	6823      	ldr	r3, [r4, #0]
 800117c:	6829      	ldr	r1, [r5, #0]
 800117e:	061f      	lsls	r7, r3, #24
 8001180:	f851 6b04 	ldr.w	r6, [r1], #4
 8001184:	d402      	bmi.n	800118c <_printf_i+0x18c>
 8001186:	065f      	lsls	r7, r3, #25
 8001188:	bf48      	it	mi
 800118a:	b2b6      	uxthmi	r6, r6
 800118c:	07df      	lsls	r7, r3, #31
 800118e:	bf48      	it	mi
 8001190:	f043 0320 	orrmi.w	r3, r3, #32
 8001194:	6029      	str	r1, [r5, #0]
 8001196:	bf48      	it	mi
 8001198:	6023      	strmi	r3, [r4, #0]
 800119a:	b91e      	cbnz	r6, 80011a4 <_printf_i+0x1a4>
 800119c:	6823      	ldr	r3, [r4, #0]
 800119e:	f023 0320 	bic.w	r3, r3, #32
 80011a2:	6023      	str	r3, [r4, #0]
 80011a4:	2310      	movs	r3, #16
 80011a6:	e7a7      	b.n	80010f8 <_printf_i+0xf8>
 80011a8:	4824      	ldr	r0, [pc, #144]	; (800123c <_printf_i+0x23c>)
 80011aa:	e7e4      	b.n	8001176 <_printf_i+0x176>
 80011ac:	4615      	mov	r5, r2
 80011ae:	e7bd      	b.n	800112c <_printf_i+0x12c>
 80011b0:	682b      	ldr	r3, [r5, #0]
 80011b2:	6826      	ldr	r6, [r4, #0]
 80011b4:	6961      	ldr	r1, [r4, #20]
 80011b6:	1d18      	adds	r0, r3, #4
 80011b8:	6028      	str	r0, [r5, #0]
 80011ba:	0635      	lsls	r5, r6, #24
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	d501      	bpl.n	80011c4 <_printf_i+0x1c4>
 80011c0:	6019      	str	r1, [r3, #0]
 80011c2:	e002      	b.n	80011ca <_printf_i+0x1ca>
 80011c4:	0670      	lsls	r0, r6, #25
 80011c6:	d5fb      	bpl.n	80011c0 <_printf_i+0x1c0>
 80011c8:	8019      	strh	r1, [r3, #0]
 80011ca:	2300      	movs	r3, #0
 80011cc:	6123      	str	r3, [r4, #16]
 80011ce:	4615      	mov	r5, r2
 80011d0:	e7bc      	b.n	800114c <_printf_i+0x14c>
 80011d2:	682b      	ldr	r3, [r5, #0]
 80011d4:	1d1a      	adds	r2, r3, #4
 80011d6:	602a      	str	r2, [r5, #0]
 80011d8:	681d      	ldr	r5, [r3, #0]
 80011da:	6862      	ldr	r2, [r4, #4]
 80011dc:	2100      	movs	r1, #0
 80011de:	4628      	mov	r0, r5
 80011e0:	f7ff f82e 	bl	8000240 <memchr>
 80011e4:	b108      	cbz	r0, 80011ea <_printf_i+0x1ea>
 80011e6:	1b40      	subs	r0, r0, r5
 80011e8:	6060      	str	r0, [r4, #4]
 80011ea:	6863      	ldr	r3, [r4, #4]
 80011ec:	6123      	str	r3, [r4, #16]
 80011ee:	2300      	movs	r3, #0
 80011f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80011f4:	e7aa      	b.n	800114c <_printf_i+0x14c>
 80011f6:	6923      	ldr	r3, [r4, #16]
 80011f8:	462a      	mov	r2, r5
 80011fa:	4649      	mov	r1, r9
 80011fc:	4640      	mov	r0, r8
 80011fe:	47d0      	blx	sl
 8001200:	3001      	adds	r0, #1
 8001202:	d0ad      	beq.n	8001160 <_printf_i+0x160>
 8001204:	6823      	ldr	r3, [r4, #0]
 8001206:	079b      	lsls	r3, r3, #30
 8001208:	d413      	bmi.n	8001232 <_printf_i+0x232>
 800120a:	68e0      	ldr	r0, [r4, #12]
 800120c:	9b03      	ldr	r3, [sp, #12]
 800120e:	4298      	cmp	r0, r3
 8001210:	bfb8      	it	lt
 8001212:	4618      	movlt	r0, r3
 8001214:	e7a6      	b.n	8001164 <_printf_i+0x164>
 8001216:	2301      	movs	r3, #1
 8001218:	4632      	mov	r2, r6
 800121a:	4649      	mov	r1, r9
 800121c:	4640      	mov	r0, r8
 800121e:	47d0      	blx	sl
 8001220:	3001      	adds	r0, #1
 8001222:	d09d      	beq.n	8001160 <_printf_i+0x160>
 8001224:	3501      	adds	r5, #1
 8001226:	68e3      	ldr	r3, [r4, #12]
 8001228:	9903      	ldr	r1, [sp, #12]
 800122a:	1a5b      	subs	r3, r3, r1
 800122c:	42ab      	cmp	r3, r5
 800122e:	dcf2      	bgt.n	8001216 <_printf_i+0x216>
 8001230:	e7eb      	b.n	800120a <_printf_i+0x20a>
 8001232:	2500      	movs	r5, #0
 8001234:	f104 0619 	add.w	r6, r4, #25
 8001238:	e7f5      	b.n	8001226 <_printf_i+0x226>
 800123a:	bf00      	nop
 800123c:	08001623 	.word	0x08001623
 8001240:	08001634 	.word	0x08001634

08001244 <__sflush_r>:
 8001244:	898a      	ldrh	r2, [r1, #12]
 8001246:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800124a:	4605      	mov	r5, r0
 800124c:	0710      	lsls	r0, r2, #28
 800124e:	460c      	mov	r4, r1
 8001250:	d458      	bmi.n	8001304 <__sflush_r+0xc0>
 8001252:	684b      	ldr	r3, [r1, #4]
 8001254:	2b00      	cmp	r3, #0
 8001256:	dc05      	bgt.n	8001264 <__sflush_r+0x20>
 8001258:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800125a:	2b00      	cmp	r3, #0
 800125c:	dc02      	bgt.n	8001264 <__sflush_r+0x20>
 800125e:	2000      	movs	r0, #0
 8001260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001264:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001266:	2e00      	cmp	r6, #0
 8001268:	d0f9      	beq.n	800125e <__sflush_r+0x1a>
 800126a:	2300      	movs	r3, #0
 800126c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001270:	682f      	ldr	r7, [r5, #0]
 8001272:	6a21      	ldr	r1, [r4, #32]
 8001274:	602b      	str	r3, [r5, #0]
 8001276:	d032      	beq.n	80012de <__sflush_r+0x9a>
 8001278:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800127a:	89a3      	ldrh	r3, [r4, #12]
 800127c:	075a      	lsls	r2, r3, #29
 800127e:	d505      	bpl.n	800128c <__sflush_r+0x48>
 8001280:	6863      	ldr	r3, [r4, #4]
 8001282:	1ac0      	subs	r0, r0, r3
 8001284:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001286:	b10b      	cbz	r3, 800128c <__sflush_r+0x48>
 8001288:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800128a:	1ac0      	subs	r0, r0, r3
 800128c:	2300      	movs	r3, #0
 800128e:	4602      	mov	r2, r0
 8001290:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001292:	6a21      	ldr	r1, [r4, #32]
 8001294:	4628      	mov	r0, r5
 8001296:	47b0      	blx	r6
 8001298:	1c43      	adds	r3, r0, #1
 800129a:	89a3      	ldrh	r3, [r4, #12]
 800129c:	d106      	bne.n	80012ac <__sflush_r+0x68>
 800129e:	6829      	ldr	r1, [r5, #0]
 80012a0:	291d      	cmp	r1, #29
 80012a2:	d82b      	bhi.n	80012fc <__sflush_r+0xb8>
 80012a4:	4a29      	ldr	r2, [pc, #164]	; (800134c <__sflush_r+0x108>)
 80012a6:	410a      	asrs	r2, r1
 80012a8:	07d6      	lsls	r6, r2, #31
 80012aa:	d427      	bmi.n	80012fc <__sflush_r+0xb8>
 80012ac:	2200      	movs	r2, #0
 80012ae:	6062      	str	r2, [r4, #4]
 80012b0:	04d9      	lsls	r1, r3, #19
 80012b2:	6922      	ldr	r2, [r4, #16]
 80012b4:	6022      	str	r2, [r4, #0]
 80012b6:	d504      	bpl.n	80012c2 <__sflush_r+0x7e>
 80012b8:	1c42      	adds	r2, r0, #1
 80012ba:	d101      	bne.n	80012c0 <__sflush_r+0x7c>
 80012bc:	682b      	ldr	r3, [r5, #0]
 80012be:	b903      	cbnz	r3, 80012c2 <__sflush_r+0x7e>
 80012c0:	6560      	str	r0, [r4, #84]	; 0x54
 80012c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80012c4:	602f      	str	r7, [r5, #0]
 80012c6:	2900      	cmp	r1, #0
 80012c8:	d0c9      	beq.n	800125e <__sflush_r+0x1a>
 80012ca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80012ce:	4299      	cmp	r1, r3
 80012d0:	d002      	beq.n	80012d8 <__sflush_r+0x94>
 80012d2:	4628      	mov	r0, r5
 80012d4:	f7ff fbea 	bl	8000aac <_free_r>
 80012d8:	2000      	movs	r0, #0
 80012da:	6360      	str	r0, [r4, #52]	; 0x34
 80012dc:	e7c0      	b.n	8001260 <__sflush_r+0x1c>
 80012de:	2301      	movs	r3, #1
 80012e0:	4628      	mov	r0, r5
 80012e2:	47b0      	blx	r6
 80012e4:	1c41      	adds	r1, r0, #1
 80012e6:	d1c8      	bne.n	800127a <__sflush_r+0x36>
 80012e8:	682b      	ldr	r3, [r5, #0]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d0c5      	beq.n	800127a <__sflush_r+0x36>
 80012ee:	2b1d      	cmp	r3, #29
 80012f0:	d001      	beq.n	80012f6 <__sflush_r+0xb2>
 80012f2:	2b16      	cmp	r3, #22
 80012f4:	d101      	bne.n	80012fa <__sflush_r+0xb6>
 80012f6:	602f      	str	r7, [r5, #0]
 80012f8:	e7b1      	b.n	800125e <__sflush_r+0x1a>
 80012fa:	89a3      	ldrh	r3, [r4, #12]
 80012fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001300:	81a3      	strh	r3, [r4, #12]
 8001302:	e7ad      	b.n	8001260 <__sflush_r+0x1c>
 8001304:	690f      	ldr	r7, [r1, #16]
 8001306:	2f00      	cmp	r7, #0
 8001308:	d0a9      	beq.n	800125e <__sflush_r+0x1a>
 800130a:	0793      	lsls	r3, r2, #30
 800130c:	680e      	ldr	r6, [r1, #0]
 800130e:	bf08      	it	eq
 8001310:	694b      	ldreq	r3, [r1, #20]
 8001312:	600f      	str	r7, [r1, #0]
 8001314:	bf18      	it	ne
 8001316:	2300      	movne	r3, #0
 8001318:	eba6 0807 	sub.w	r8, r6, r7
 800131c:	608b      	str	r3, [r1, #8]
 800131e:	f1b8 0f00 	cmp.w	r8, #0
 8001322:	dd9c      	ble.n	800125e <__sflush_r+0x1a>
 8001324:	6a21      	ldr	r1, [r4, #32]
 8001326:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001328:	4643      	mov	r3, r8
 800132a:	463a      	mov	r2, r7
 800132c:	4628      	mov	r0, r5
 800132e:	47b0      	blx	r6
 8001330:	2800      	cmp	r0, #0
 8001332:	dc06      	bgt.n	8001342 <__sflush_r+0xfe>
 8001334:	89a3      	ldrh	r3, [r4, #12]
 8001336:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800133a:	81a3      	strh	r3, [r4, #12]
 800133c:	f04f 30ff 	mov.w	r0, #4294967295
 8001340:	e78e      	b.n	8001260 <__sflush_r+0x1c>
 8001342:	4407      	add	r7, r0
 8001344:	eba8 0800 	sub.w	r8, r8, r0
 8001348:	e7e9      	b.n	800131e <__sflush_r+0xda>
 800134a:	bf00      	nop
 800134c:	dfbffffe 	.word	0xdfbffffe

08001350 <_fflush_r>:
 8001350:	b538      	push	{r3, r4, r5, lr}
 8001352:	690b      	ldr	r3, [r1, #16]
 8001354:	4605      	mov	r5, r0
 8001356:	460c      	mov	r4, r1
 8001358:	b913      	cbnz	r3, 8001360 <_fflush_r+0x10>
 800135a:	2500      	movs	r5, #0
 800135c:	4628      	mov	r0, r5
 800135e:	bd38      	pop	{r3, r4, r5, pc}
 8001360:	b118      	cbz	r0, 800136a <_fflush_r+0x1a>
 8001362:	6a03      	ldr	r3, [r0, #32]
 8001364:	b90b      	cbnz	r3, 800136a <_fflush_r+0x1a>
 8001366:	f7ff fa99 	bl	800089c <__sinit>
 800136a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d0f3      	beq.n	800135a <_fflush_r+0xa>
 8001372:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001374:	07d0      	lsls	r0, r2, #31
 8001376:	d404      	bmi.n	8001382 <_fflush_r+0x32>
 8001378:	0599      	lsls	r1, r3, #22
 800137a:	d402      	bmi.n	8001382 <_fflush_r+0x32>
 800137c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800137e:	f7ff fb92 	bl	8000aa6 <__retarget_lock_acquire_recursive>
 8001382:	4628      	mov	r0, r5
 8001384:	4621      	mov	r1, r4
 8001386:	f7ff ff5d 	bl	8001244 <__sflush_r>
 800138a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800138c:	07da      	lsls	r2, r3, #31
 800138e:	4605      	mov	r5, r0
 8001390:	d4e4      	bmi.n	800135c <_fflush_r+0xc>
 8001392:	89a3      	ldrh	r3, [r4, #12]
 8001394:	059b      	lsls	r3, r3, #22
 8001396:	d4e1      	bmi.n	800135c <_fflush_r+0xc>
 8001398:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800139a:	f7ff fb85 	bl	8000aa8 <__retarget_lock_release_recursive>
 800139e:	e7dd      	b.n	800135c <_fflush_r+0xc>

080013a0 <__swbuf_r>:
 80013a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013a2:	460e      	mov	r6, r1
 80013a4:	4614      	mov	r4, r2
 80013a6:	4605      	mov	r5, r0
 80013a8:	b118      	cbz	r0, 80013b2 <__swbuf_r+0x12>
 80013aa:	6a03      	ldr	r3, [r0, #32]
 80013ac:	b90b      	cbnz	r3, 80013b2 <__swbuf_r+0x12>
 80013ae:	f7ff fa75 	bl	800089c <__sinit>
 80013b2:	69a3      	ldr	r3, [r4, #24]
 80013b4:	60a3      	str	r3, [r4, #8]
 80013b6:	89a3      	ldrh	r3, [r4, #12]
 80013b8:	071a      	lsls	r2, r3, #28
 80013ba:	d525      	bpl.n	8001408 <__swbuf_r+0x68>
 80013bc:	6923      	ldr	r3, [r4, #16]
 80013be:	b31b      	cbz	r3, 8001408 <__swbuf_r+0x68>
 80013c0:	6823      	ldr	r3, [r4, #0]
 80013c2:	6922      	ldr	r2, [r4, #16]
 80013c4:	1a98      	subs	r0, r3, r2
 80013c6:	6963      	ldr	r3, [r4, #20]
 80013c8:	b2f6      	uxtb	r6, r6
 80013ca:	4283      	cmp	r3, r0
 80013cc:	4637      	mov	r7, r6
 80013ce:	dc04      	bgt.n	80013da <__swbuf_r+0x3a>
 80013d0:	4621      	mov	r1, r4
 80013d2:	4628      	mov	r0, r5
 80013d4:	f7ff ffbc 	bl	8001350 <_fflush_r>
 80013d8:	b9e0      	cbnz	r0, 8001414 <__swbuf_r+0x74>
 80013da:	68a3      	ldr	r3, [r4, #8]
 80013dc:	3b01      	subs	r3, #1
 80013de:	60a3      	str	r3, [r4, #8]
 80013e0:	6823      	ldr	r3, [r4, #0]
 80013e2:	1c5a      	adds	r2, r3, #1
 80013e4:	6022      	str	r2, [r4, #0]
 80013e6:	701e      	strb	r6, [r3, #0]
 80013e8:	6962      	ldr	r2, [r4, #20]
 80013ea:	1c43      	adds	r3, r0, #1
 80013ec:	429a      	cmp	r2, r3
 80013ee:	d004      	beq.n	80013fa <__swbuf_r+0x5a>
 80013f0:	89a3      	ldrh	r3, [r4, #12]
 80013f2:	07db      	lsls	r3, r3, #31
 80013f4:	d506      	bpl.n	8001404 <__swbuf_r+0x64>
 80013f6:	2e0a      	cmp	r6, #10
 80013f8:	d104      	bne.n	8001404 <__swbuf_r+0x64>
 80013fa:	4621      	mov	r1, r4
 80013fc:	4628      	mov	r0, r5
 80013fe:	f7ff ffa7 	bl	8001350 <_fflush_r>
 8001402:	b938      	cbnz	r0, 8001414 <__swbuf_r+0x74>
 8001404:	4638      	mov	r0, r7
 8001406:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001408:	4621      	mov	r1, r4
 800140a:	4628      	mov	r0, r5
 800140c:	f000 f806 	bl	800141c <__swsetup_r>
 8001410:	2800      	cmp	r0, #0
 8001412:	d0d5      	beq.n	80013c0 <__swbuf_r+0x20>
 8001414:	f04f 37ff 	mov.w	r7, #4294967295
 8001418:	e7f4      	b.n	8001404 <__swbuf_r+0x64>
	...

0800141c <__swsetup_r>:
 800141c:	b538      	push	{r3, r4, r5, lr}
 800141e:	4b2a      	ldr	r3, [pc, #168]	; (80014c8 <__swsetup_r+0xac>)
 8001420:	4605      	mov	r5, r0
 8001422:	6818      	ldr	r0, [r3, #0]
 8001424:	460c      	mov	r4, r1
 8001426:	b118      	cbz	r0, 8001430 <__swsetup_r+0x14>
 8001428:	6a03      	ldr	r3, [r0, #32]
 800142a:	b90b      	cbnz	r3, 8001430 <__swsetup_r+0x14>
 800142c:	f7ff fa36 	bl	800089c <__sinit>
 8001430:	89a3      	ldrh	r3, [r4, #12]
 8001432:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001436:	0718      	lsls	r0, r3, #28
 8001438:	d422      	bmi.n	8001480 <__swsetup_r+0x64>
 800143a:	06d9      	lsls	r1, r3, #27
 800143c:	d407      	bmi.n	800144e <__swsetup_r+0x32>
 800143e:	2309      	movs	r3, #9
 8001440:	602b      	str	r3, [r5, #0]
 8001442:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001446:	81a3      	strh	r3, [r4, #12]
 8001448:	f04f 30ff 	mov.w	r0, #4294967295
 800144c:	e034      	b.n	80014b8 <__swsetup_r+0x9c>
 800144e:	0758      	lsls	r0, r3, #29
 8001450:	d512      	bpl.n	8001478 <__swsetup_r+0x5c>
 8001452:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001454:	b141      	cbz	r1, 8001468 <__swsetup_r+0x4c>
 8001456:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800145a:	4299      	cmp	r1, r3
 800145c:	d002      	beq.n	8001464 <__swsetup_r+0x48>
 800145e:	4628      	mov	r0, r5
 8001460:	f7ff fb24 	bl	8000aac <_free_r>
 8001464:	2300      	movs	r3, #0
 8001466:	6363      	str	r3, [r4, #52]	; 0x34
 8001468:	89a3      	ldrh	r3, [r4, #12]
 800146a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800146e:	81a3      	strh	r3, [r4, #12]
 8001470:	2300      	movs	r3, #0
 8001472:	6063      	str	r3, [r4, #4]
 8001474:	6923      	ldr	r3, [r4, #16]
 8001476:	6023      	str	r3, [r4, #0]
 8001478:	89a3      	ldrh	r3, [r4, #12]
 800147a:	f043 0308 	orr.w	r3, r3, #8
 800147e:	81a3      	strh	r3, [r4, #12]
 8001480:	6923      	ldr	r3, [r4, #16]
 8001482:	b94b      	cbnz	r3, 8001498 <__swsetup_r+0x7c>
 8001484:	89a3      	ldrh	r3, [r4, #12]
 8001486:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800148a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800148e:	d003      	beq.n	8001498 <__swsetup_r+0x7c>
 8001490:	4621      	mov	r1, r4
 8001492:	4628      	mov	r0, r5
 8001494:	f000 f850 	bl	8001538 <__smakebuf_r>
 8001498:	89a0      	ldrh	r0, [r4, #12]
 800149a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800149e:	f010 0301 	ands.w	r3, r0, #1
 80014a2:	d00a      	beq.n	80014ba <__swsetup_r+0x9e>
 80014a4:	2300      	movs	r3, #0
 80014a6:	60a3      	str	r3, [r4, #8]
 80014a8:	6963      	ldr	r3, [r4, #20]
 80014aa:	425b      	negs	r3, r3
 80014ac:	61a3      	str	r3, [r4, #24]
 80014ae:	6923      	ldr	r3, [r4, #16]
 80014b0:	b943      	cbnz	r3, 80014c4 <__swsetup_r+0xa8>
 80014b2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80014b6:	d1c4      	bne.n	8001442 <__swsetup_r+0x26>
 80014b8:	bd38      	pop	{r3, r4, r5, pc}
 80014ba:	0781      	lsls	r1, r0, #30
 80014bc:	bf58      	it	pl
 80014be:	6963      	ldrpl	r3, [r4, #20]
 80014c0:	60a3      	str	r3, [r4, #8]
 80014c2:	e7f4      	b.n	80014ae <__swsetup_r+0x92>
 80014c4:	2000      	movs	r0, #0
 80014c6:	e7f7      	b.n	80014b8 <__swsetup_r+0x9c>
 80014c8:	20000058 	.word	0x20000058

080014cc <_sbrk_r>:
 80014cc:	b538      	push	{r3, r4, r5, lr}
 80014ce:	4d06      	ldr	r5, [pc, #24]	; (80014e8 <_sbrk_r+0x1c>)
 80014d0:	2300      	movs	r3, #0
 80014d2:	4604      	mov	r4, r0
 80014d4:	4608      	mov	r0, r1
 80014d6:	602b      	str	r3, [r5, #0]
 80014d8:	f7ff f820 	bl	800051c <_sbrk>
 80014dc:	1c43      	adds	r3, r0, #1
 80014de:	d102      	bne.n	80014e6 <_sbrk_r+0x1a>
 80014e0:	682b      	ldr	r3, [r5, #0]
 80014e2:	b103      	cbz	r3, 80014e6 <_sbrk_r+0x1a>
 80014e4:	6023      	str	r3, [r4, #0]
 80014e6:	bd38      	pop	{r3, r4, r5, pc}
 80014e8:	200001b8 	.word	0x200001b8

080014ec <__swhatbuf_r>:
 80014ec:	b570      	push	{r4, r5, r6, lr}
 80014ee:	460c      	mov	r4, r1
 80014f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80014f4:	2900      	cmp	r1, #0
 80014f6:	b096      	sub	sp, #88	; 0x58
 80014f8:	4615      	mov	r5, r2
 80014fa:	461e      	mov	r6, r3
 80014fc:	da0d      	bge.n	800151a <__swhatbuf_r+0x2e>
 80014fe:	89a3      	ldrh	r3, [r4, #12]
 8001500:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001504:	f04f 0100 	mov.w	r1, #0
 8001508:	bf0c      	ite	eq
 800150a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800150e:	2340      	movne	r3, #64	; 0x40
 8001510:	2000      	movs	r0, #0
 8001512:	6031      	str	r1, [r6, #0]
 8001514:	602b      	str	r3, [r5, #0]
 8001516:	b016      	add	sp, #88	; 0x58
 8001518:	bd70      	pop	{r4, r5, r6, pc}
 800151a:	466a      	mov	r2, sp
 800151c:	f000 f848 	bl	80015b0 <_fstat_r>
 8001520:	2800      	cmp	r0, #0
 8001522:	dbec      	blt.n	80014fe <__swhatbuf_r+0x12>
 8001524:	9901      	ldr	r1, [sp, #4]
 8001526:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800152a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800152e:	4259      	negs	r1, r3
 8001530:	4159      	adcs	r1, r3
 8001532:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001536:	e7eb      	b.n	8001510 <__swhatbuf_r+0x24>

08001538 <__smakebuf_r>:
 8001538:	898b      	ldrh	r3, [r1, #12]
 800153a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800153c:	079d      	lsls	r5, r3, #30
 800153e:	4606      	mov	r6, r0
 8001540:	460c      	mov	r4, r1
 8001542:	d507      	bpl.n	8001554 <__smakebuf_r+0x1c>
 8001544:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001548:	6023      	str	r3, [r4, #0]
 800154a:	6123      	str	r3, [r4, #16]
 800154c:	2301      	movs	r3, #1
 800154e:	6163      	str	r3, [r4, #20]
 8001550:	b002      	add	sp, #8
 8001552:	bd70      	pop	{r4, r5, r6, pc}
 8001554:	ab01      	add	r3, sp, #4
 8001556:	466a      	mov	r2, sp
 8001558:	f7ff ffc8 	bl	80014ec <__swhatbuf_r>
 800155c:	9900      	ldr	r1, [sp, #0]
 800155e:	4605      	mov	r5, r0
 8001560:	4630      	mov	r0, r6
 8001562:	f7ff fb0f 	bl	8000b84 <_malloc_r>
 8001566:	b948      	cbnz	r0, 800157c <__smakebuf_r+0x44>
 8001568:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800156c:	059a      	lsls	r2, r3, #22
 800156e:	d4ef      	bmi.n	8001550 <__smakebuf_r+0x18>
 8001570:	f023 0303 	bic.w	r3, r3, #3
 8001574:	f043 0302 	orr.w	r3, r3, #2
 8001578:	81a3      	strh	r3, [r4, #12]
 800157a:	e7e3      	b.n	8001544 <__smakebuf_r+0xc>
 800157c:	89a3      	ldrh	r3, [r4, #12]
 800157e:	6020      	str	r0, [r4, #0]
 8001580:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001584:	81a3      	strh	r3, [r4, #12]
 8001586:	9b00      	ldr	r3, [sp, #0]
 8001588:	6163      	str	r3, [r4, #20]
 800158a:	9b01      	ldr	r3, [sp, #4]
 800158c:	6120      	str	r0, [r4, #16]
 800158e:	b15b      	cbz	r3, 80015a8 <__smakebuf_r+0x70>
 8001590:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001594:	4630      	mov	r0, r6
 8001596:	f000 f81d 	bl	80015d4 <_isatty_r>
 800159a:	b128      	cbz	r0, 80015a8 <__smakebuf_r+0x70>
 800159c:	89a3      	ldrh	r3, [r4, #12]
 800159e:	f023 0303 	bic.w	r3, r3, #3
 80015a2:	f043 0301 	orr.w	r3, r3, #1
 80015a6:	81a3      	strh	r3, [r4, #12]
 80015a8:	89a3      	ldrh	r3, [r4, #12]
 80015aa:	431d      	orrs	r5, r3
 80015ac:	81a5      	strh	r5, [r4, #12]
 80015ae:	e7cf      	b.n	8001550 <__smakebuf_r+0x18>

080015b0 <_fstat_r>:
 80015b0:	b538      	push	{r3, r4, r5, lr}
 80015b2:	4d07      	ldr	r5, [pc, #28]	; (80015d0 <_fstat_r+0x20>)
 80015b4:	2300      	movs	r3, #0
 80015b6:	4604      	mov	r4, r0
 80015b8:	4608      	mov	r0, r1
 80015ba:	4611      	mov	r1, r2
 80015bc:	602b      	str	r3, [r5, #0]
 80015be:	f7fe ff84 	bl	80004ca <_fstat>
 80015c2:	1c43      	adds	r3, r0, #1
 80015c4:	d102      	bne.n	80015cc <_fstat_r+0x1c>
 80015c6:	682b      	ldr	r3, [r5, #0]
 80015c8:	b103      	cbz	r3, 80015cc <_fstat_r+0x1c>
 80015ca:	6023      	str	r3, [r4, #0]
 80015cc:	bd38      	pop	{r3, r4, r5, pc}
 80015ce:	bf00      	nop
 80015d0:	200001b8 	.word	0x200001b8

080015d4 <_isatty_r>:
 80015d4:	b538      	push	{r3, r4, r5, lr}
 80015d6:	4d06      	ldr	r5, [pc, #24]	; (80015f0 <_isatty_r+0x1c>)
 80015d8:	2300      	movs	r3, #0
 80015da:	4604      	mov	r4, r0
 80015dc:	4608      	mov	r0, r1
 80015de:	602b      	str	r3, [r5, #0]
 80015e0:	f7fe ff83 	bl	80004ea <_isatty>
 80015e4:	1c43      	adds	r3, r0, #1
 80015e6:	d102      	bne.n	80015ee <_isatty_r+0x1a>
 80015e8:	682b      	ldr	r3, [r5, #0]
 80015ea:	b103      	cbz	r3, 80015ee <_isatty_r+0x1a>
 80015ec:	6023      	str	r3, [r4, #0]
 80015ee:	bd38      	pop	{r3, r4, r5, pc}
 80015f0:	200001b8 	.word	0x200001b8

080015f4 <_init>:
 80015f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015f6:	bf00      	nop
 80015f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80015fa:	bc08      	pop	{r3}
 80015fc:	469e      	mov	lr, r3
 80015fe:	4770      	bx	lr

08001600 <_fini>:
 8001600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001602:	bf00      	nop
 8001604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001606:	bc08      	pop	{r3}
 8001608:	469e      	mov	lr, r3
 800160a:	4770      	bx	lr
