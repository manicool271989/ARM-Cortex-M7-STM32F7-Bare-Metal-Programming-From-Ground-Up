
19_uart_rx_interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000508  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000700  08000708  00010708  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000700  08000700  00010708  2**0
                  CONTENTS
  4 .ARM          00000000  08000700  08000700  00010708  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000700  08000708  00010708  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000700  08000700  00010700  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000704  08000704  00010704  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010708  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  08000708  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000708  00020020  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00010708  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00010736  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000126a  00000000  00000000  00010779  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000065d  00000000  00000000  000119e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000178  00000000  00000000  00012040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000100  00000000  00000000  000121b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e0c0  00000000  00000000  000122b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002195  00000000  00000000  00030378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a781a  00000000  00000000  0003250d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000448  00000000  00000000  000d9d28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009e  00000000  00000000  000da170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000000 	.word	0x20000000
 8000214:	00000000 	.word	0x00000000
 8000218:	080006e8 	.word	0x080006e8

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000004 	.word	0x20000004
 8000234:	080006e8 	.word	0x080006e8

08000238 <set_pin_mode>:
 */

#include "gpio.h"

void set_pin_mode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000238:	b480      	push	{r7}
 800023a:	b089      	sub	sp, #36	; 0x24
 800023c:	af00      	add	r7, sp, #0
 800023e:	60f8      	str	r0, [r7, #12]
 8000240:	60b9      	str	r1, [r7, #8]
 8000242:	607a      	str	r2, [r7, #4]
	// set the relevant bit in the mode register
	// CLEARMASK explanation:
	// 0b 11 << 16 (shift 0b11 to position 16 (LSB occupies bit 16, MSB occupies bit 17))
	MODIFY_REG(GPIOx->MODER, (0x3 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000244:	68fb      	ldr	r3, [r7, #12]
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	68ba      	ldr	r2, [r7, #8]
 800024a:	617a      	str	r2, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800024c:	697a      	ldr	r2, [r7, #20]
 800024e:	fa92 f2a2 	rbit	r2, r2
 8000252:	613a      	str	r2, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000254:	693a      	ldr	r2, [r7, #16]
 8000256:	fab2 f282 	clz	r2, r2
 800025a:	b2d2      	uxtb	r2, r2
 800025c:	0052      	lsls	r2, r2, #1
 800025e:	2103      	movs	r1, #3
 8000260:	fa01 f202 	lsl.w	r2, r1, r2
 8000264:	43d2      	mvns	r2, r2
 8000266:	401a      	ands	r2, r3
 8000268:	68bb      	ldr	r3, [r7, #8]
 800026a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800026c:	69fb      	ldr	r3, [r7, #28]
 800026e:	fa93 f3a3 	rbit	r3, r3
 8000272:	61bb      	str	r3, [r7, #24]
  return result;
 8000274:	69bb      	ldr	r3, [r7, #24]
 8000276:	fab3 f383 	clz	r3, r3
 800027a:	b2db      	uxtb	r3, r3
 800027c:	005b      	lsls	r3, r3, #1
 800027e:	6879      	ldr	r1, [r7, #4]
 8000280:	fa01 f303 	lsl.w	r3, r1, r3
 8000284:	431a      	orrs	r2, r3
 8000286:	68fb      	ldr	r3, [r7, #12]
 8000288:	601a      	str	r2, [r3, #0]
}
 800028a:	bf00      	nop
 800028c:	3724      	adds	r7, #36	; 0x24
 800028e:	46bd      	mov	sp, r7
 8000290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000294:	4770      	bx	lr
	...

08000298 <all_leds_init>:
// Configure the GPIOB_MODE_R register. MODER0, MODER7, and MODER14 will each be set to 2'b01 to configure them as outputs.

#include "led.h"

void all_leds_init(void)
{
 8000298:	b480      	push	{r7}
 800029a:	af00      	add	r7, sp, #0
	// Enable clock access to port B.
	RCC->AHB1ENR |= GPIOB_CLK_EN;
 800029c:	4b0b      	ldr	r3, [pc, #44]	; (80002cc <all_leds_init+0x34>)
 800029e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002a0:	4a0a      	ldr	r2, [pc, #40]	; (80002cc <all_leds_init+0x34>)
 80002a2:	f043 0302 	orr.w	r3, r3, #2
 80002a6:	6313      	str	r3, [r2, #48]	; 0x30

	// Configure GPIOs as outputs to drive LEDs.
	GPIOB->MODER |= USER_LED1_MODER0 | USER_LED2_MODER0 | USER_LED3_MODER0;
 80002a8:	4b09      	ldr	r3, [pc, #36]	; (80002d0 <all_leds_init+0x38>)
 80002aa:	681a      	ldr	r2, [r3, #0]
 80002ac:	4908      	ldr	r1, [pc, #32]	; (80002d0 <all_leds_init+0x38>)
 80002ae:	4b09      	ldr	r3, [pc, #36]	; (80002d4 <all_leds_init+0x3c>)
 80002b0:	4313      	orrs	r3, r2
 80002b2:	600b      	str	r3, [r1, #0]
	GPIOB->MODER &= ~(USER_LED1_MODER1 | USER_LED2_MODER1 | USER_LED3_MODER1);
 80002b4:	4b06      	ldr	r3, [pc, #24]	; (80002d0 <all_leds_init+0x38>)
 80002b6:	681a      	ldr	r2, [r3, #0]
 80002b8:	4905      	ldr	r1, [pc, #20]	; (80002d0 <all_leds_init+0x38>)
 80002ba:	4b07      	ldr	r3, [pc, #28]	; (80002d8 <all_leds_init+0x40>)
 80002bc:	4013      	ands	r3, r2
 80002be:	600b      	str	r3, [r1, #0]

}
 80002c0:	bf00      	nop
 80002c2:	46bd      	mov	sp, r7
 80002c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c8:	4770      	bx	lr
 80002ca:	bf00      	nop
 80002cc:	40023800 	.word	0x40023800
 80002d0:	40020400 	.word	0x40020400
 80002d4:	10004001 	.word	0x10004001
 80002d8:	dfff7ffd 	.word	0xdfff7ffd

080002dc <all_leds_on>:

void all_leds_on(void)
{
 80002dc:	b480      	push	{r7}
 80002de:	af00      	add	r7, sp, #0
	GPIOB->ODR |= red_led | green_led | blue_led;
 80002e0:	4b05      	ldr	r3, [pc, #20]	; (80002f8 <all_leds_on+0x1c>)
 80002e2:	695a      	ldr	r2, [r3, #20]
 80002e4:	4904      	ldr	r1, [pc, #16]	; (80002f8 <all_leds_on+0x1c>)
 80002e6:	f244 0381 	movw	r3, #16513	; 0x4081
 80002ea:	4313      	orrs	r3, r2
 80002ec:	614b      	str	r3, [r1, #20]
}
 80002ee:	bf00      	nop
 80002f0:	46bd      	mov	sp, r7
 80002f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f6:	4770      	bx	lr
 80002f8:	40020400 	.word	0x40020400

080002fc <all_leds_off>:

void all_leds_off(void)
{
 80002fc:	b480      	push	{r7}
 80002fe:	af00      	add	r7, sp, #0
	GPIOB->ODR &= ~(red_led | green_led | blue_led);
 8000300:	4b05      	ldr	r3, [pc, #20]	; (8000318 <all_leds_off+0x1c>)
 8000302:	695a      	ldr	r2, [r3, #20]
 8000304:	4904      	ldr	r1, [pc, #16]	; (8000318 <all_leds_off+0x1c>)
 8000306:	4b05      	ldr	r3, [pc, #20]	; (800031c <all_leds_off+0x20>)
 8000308:	4013      	ands	r3, r2
 800030a:	614b      	str	r3, [r1, #20]
}
 800030c:	bf00      	nop
 800030e:	46bd      	mov	sp, r7
 8000310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000314:	4770      	bx	lr
 8000316:	bf00      	nop
 8000318:	40020400 	.word	0x40020400
 800031c:	ffffbf7e 	.word	0xffffbf7e

08000320 <led_toggle>:
{
	GPIOB->ODR &= ~led;
}

void led_toggle(ledType led)
{
 8000320:	b480      	push	{r7}
 8000322:	b083      	sub	sp, #12
 8000324:	af00      	add	r7, sp, #0
 8000326:	6078      	str	r0, [r7, #4]
	GPIOB->ODR ^= led;
 8000328:	4b05      	ldr	r3, [pc, #20]	; (8000340 <led_toggle+0x20>)
 800032a:	695a      	ldr	r2, [r3, #20]
 800032c:	4904      	ldr	r1, [pc, #16]	; (8000340 <led_toggle+0x20>)
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	4053      	eors	r3, r2
 8000332:	614b      	str	r3, [r1, #20]
}
 8000334:	bf00      	nop
 8000336:	370c      	adds	r7, #12
 8000338:	46bd      	mov	sp, r7
 800033a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033e:	4770      	bx	lr
 8000340:	40020400 	.word	0x40020400

08000344 <main>:
#include "uart.h"
#include "led.h"

char ch;
int main()
{
 8000344:	b580      	push	{r7, lr}
 8000346:	af00      	add	r7, sp, #0


	all_leds_init();
 8000348:	f7ff ffa6 	bl	8000298 <all_leds_init>
	uart3_rx_interrupt_init();
 800034c:	f000 f914 	bl	8000578 <uart3_rx_interrupt_init>


	while(1)
	{
		switch(ch)
 8000350:	4b23      	ldr	r3, [pc, #140]	; (80003e0 <main+0x9c>)
 8000352:	781b      	ldrb	r3, [r3, #0]
 8000354:	2b30      	cmp	r3, #48	; 0x30
 8000356:	d02f      	beq.n	80003b8 <main+0x74>
 8000358:	2b30      	cmp	r3, #48	; 0x30
 800035a:	dbf9      	blt.n	8000350 <main+0xc>
 800035c:	2b72      	cmp	r3, #114	; 0x72
 800035e:	dcf7      	bgt.n	8000350 <main+0xc>
 8000360:	2b61      	cmp	r3, #97	; 0x61
 8000362:	dbf5      	blt.n	8000350 <main+0xc>
 8000364:	3b61      	subs	r3, #97	; 0x61
 8000366:	2b11      	cmp	r3, #17
 8000368:	d8f2      	bhi.n	8000350 <main+0xc>
 800036a:	a201      	add	r2, pc, #4	; (adr r2, 8000370 <main+0x2c>)
 800036c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000370:	080003bf 	.word	0x080003bf
 8000374:	080003d5 	.word	0x080003d5
 8000378:	08000351 	.word	0x08000351
 800037c:	08000351 	.word	0x08000351
 8000380:	08000351 	.word	0x08000351
 8000384:	08000351 	.word	0x08000351
 8000388:	080003cf 	.word	0x080003cf
 800038c:	08000351 	.word	0x08000351
 8000390:	08000351 	.word	0x08000351
 8000394:	08000351 	.word	0x08000351
 8000398:	08000351 	.word	0x08000351
 800039c:	08000351 	.word	0x08000351
 80003a0:	08000351 	.word	0x08000351
 80003a4:	08000351 	.word	0x08000351
 80003a8:	08000351 	.word	0x08000351
 80003ac:	08000351 	.word	0x08000351
 80003b0:	08000351 	.word	0x08000351
 80003b4:	080003c5 	.word	0x080003c5
		{
			case '0':
				all_leds_off();
 80003b8:	f7ff ffa0 	bl	80002fc <all_leds_off>
				break;
 80003bc:	e00e      	b.n	80003dc <main+0x98>
			case 'a':
				all_leds_on();
 80003be:	f7ff ff8d 	bl	80002dc <all_leds_on>
				break;
 80003c2:	e00b      	b.n	80003dc <main+0x98>
			case 'r':
				led_toggle(red_led);
 80003c4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80003c8:	f7ff ffaa 	bl	8000320 <led_toggle>
				break;
 80003cc:	e006      	b.n	80003dc <main+0x98>
			case 'g':
				led_toggle(green_led);
 80003ce:	2001      	movs	r0, #1
 80003d0:	f7ff ffa6 	bl	8000320 <led_toggle>
			case 'b':
				led_toggle(blue_led);
 80003d4:	2080      	movs	r0, #128	; 0x80
 80003d6:	f7ff ffa3 	bl	8000320 <led_toggle>
 80003da:	e7b9      	b.n	8000350 <main+0xc>
		switch(ch)
 80003dc:	e7b8      	b.n	8000350 <main+0xc>
 80003de:	bf00      	nop
 80003e0:	2000001c 	.word	0x2000001c

080003e4 <uart_rx_callback>:
		}
	}
}

static void uart_rx_callback(void)
{
 80003e4:	b480      	push	{r7}
 80003e6:	af00      	add	r7, sp, #0
	ch = (READ_BIT(USART3->RDR, USART_RDR_RDR) & 0xFFU);
 80003e8:	4b04      	ldr	r3, [pc, #16]	; (80003fc <uart_rx_callback+0x18>)
 80003ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003ec:	b2da      	uxtb	r2, r3
 80003ee:	4b04      	ldr	r3, [pc, #16]	; (8000400 <uart_rx_callback+0x1c>)
 80003f0:	701a      	strb	r2, [r3, #0]
}
 80003f2:	bf00      	nop
 80003f4:	46bd      	mov	sp, r7
 80003f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fa:	4770      	bx	lr
 80003fc:	40004800 	.word	0x40004800
 8000400:	2000001c 	.word	0x2000001c

08000404 <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	af00      	add	r7, sp, #0
	// Check if rxne interrupt occurred.
	if((USART3->ISR & ISR_RXNE) == ISR_RXNE)
 8000408:	4b04      	ldr	r3, [pc, #16]	; (800041c <USART3_IRQHandler+0x18>)
 800040a:	69db      	ldr	r3, [r3, #28]
 800040c:	f003 0320 	and.w	r3, r3, #32
 8000410:	2b20      	cmp	r3, #32
 8000412:	d101      	bne.n	8000418 <USART3_IRQHandler+0x14>
	{
		uart_rx_callback();
 8000414:	f7ff ffe6 	bl	80003e4 <uart_rx_callback>
	}
}
 8000418:	bf00      	nop
 800041a:	bd80      	pop	{r7, pc}
 800041c:	40004800 	.word	0x40004800

08000420 <set_ahb1_periph_clock>:
 */

#include "rcc.h"

void set_ahb1_periph_clock(uint32_t periphs)
{
 8000420:	b480      	push	{r7}
 8000422:	b083      	sub	sp, #12
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
	SET_BIT(RCC->AHB1ENR, periphs);
 8000428:	4b05      	ldr	r3, [pc, #20]	; (8000440 <set_ahb1_periph_clock+0x20>)
 800042a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800042c:	4904      	ldr	r1, [pc, #16]	; (8000440 <set_ahb1_periph_clock+0x20>)
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	4313      	orrs	r3, r2
 8000432:	630b      	str	r3, [r1, #48]	; 0x30
}
 8000434:	bf00      	nop
 8000436:	370c      	adds	r7, #12
 8000438:	46bd      	mov	sp, r7
 800043a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043e:	4770      	bx	lr
 8000440:	40023800 	.word	0x40023800

08000444 <set_apb1_periph_clock>:
{
	SET_BIT(RCC->AHB2ENR, periphs);
}

void set_apb1_periph_clock(uint32_t periphs)
{
 8000444:	b480      	push	{r7}
 8000446:	b083      	sub	sp, #12
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
	SET_BIT(RCC->APB1ENR, periphs);
 800044c:	4b05      	ldr	r3, [pc, #20]	; (8000464 <set_apb1_periph_clock+0x20>)
 800044e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000450:	4904      	ldr	r1, [pc, #16]	; (8000464 <set_apb1_periph_clock+0x20>)
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	4313      	orrs	r3, r2
 8000456:	640b      	str	r3, [r1, #64]	; 0x40
}
 8000458:	bf00      	nop
 800045a:	370c      	adds	r7, #12
 800045c:	46bd      	mov	sp, r7
 800045e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000462:	4770      	bx	lr
 8000464:	40023800 	.word	0x40023800

08000468 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000468:	b480      	push	{r7}
 800046a:	b083      	sub	sp, #12
 800046c:	af00      	add	r7, sp, #0
 800046e:	4603      	mov	r3, r0
 8000470:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000476:	2b00      	cmp	r3, #0
 8000478:	db0b      	blt.n	8000492 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800047a:	79fb      	ldrb	r3, [r7, #7]
 800047c:	f003 021f 	and.w	r2, r3, #31
 8000480:	4907      	ldr	r1, [pc, #28]	; (80004a0 <__NVIC_EnableIRQ+0x38>)
 8000482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000486:	095b      	lsrs	r3, r3, #5
 8000488:	2001      	movs	r0, #1
 800048a:	fa00 f202 	lsl.w	r2, r0, r2
 800048e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000492:	bf00      	nop
 8000494:	370c      	adds	r7, #12
 8000496:	46bd      	mov	sp, r7
 8000498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049c:	4770      	bx	lr
 800049e:	bf00      	nop
 80004a0:	e000e100 	.word	0xe000e100

080004a4 <uart_enable>:
	uart_write(USART3, ch);
	return ch;
}

static void uart_enable(USART_TypeDef *USARTx)
{
 80004a4:	b480      	push	{r7}
 80004a6:	b083      	sub	sp, #12
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
	SET_BIT(USARTx->CR1, USART_CR1_UE);
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	f043 0201 	orr.w	r2, r3, #1
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	601a      	str	r2, [r3, #0]
}
 80004b8:	bf00      	nop
 80004ba:	370c      	adds	r7, #12
 80004bc:	46bd      	mov	sp, r7
 80004be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c2:	4770      	bx	lr

080004c4 <set_uart_transfer_direction>:

static void set_uart_transfer_direction(USART_TypeDef *USARTx, uint32_t TransferDirection)
{
 80004c4:	b480      	push	{r7}
 80004c6:	b083      	sub	sp, #12
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
 80004cc:	6039      	str	r1, [r7, #0]
	MODIFY_REG(USARTx->CR1, (USART_CR1_RE |USART_CR1_TE), TransferDirection);
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	f023 020c 	bic.w	r2, r3, #12
 80004d6:	683b      	ldr	r3, [r7, #0]
 80004d8:	431a      	orrs	r2, r3
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	601a      	str	r2, [r3, #0]
}
 80004de:	bf00      	nop
 80004e0:	370c      	adds	r7, #12
 80004e2:	46bd      	mov	sp, r7
 80004e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e8:	4770      	bx	lr

080004ea <compute_uart_div>:

static uint16_t compute_uart_div(uint32_t PeriphClk, uint32_t BaudRate)
{
 80004ea:	b480      	push	{r7}
 80004ec:	b083      	sub	sp, #12
 80004ee:	af00      	add	r7, sp, #0
 80004f0:	6078      	str	r0, [r7, #4]
 80004f2:	6039      	str	r1, [r7, #0]
	return (PeriphClk + (BaudRate/2U))/BaudRate;
 80004f4:	683b      	ldr	r3, [r7, #0]
 80004f6:	085a      	lsrs	r2, r3, #1
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	441a      	add	r2, r3
 80004fc:	683b      	ldr	r3, [r7, #0]
 80004fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000502:	b29b      	uxth	r3, r3
}
 8000504:	4618      	mov	r0, r3
 8000506:	370c      	adds	r7, #12
 8000508:	46bd      	mov	sp, r7
 800050a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050e:	4770      	bx	lr

08000510 <uart_set_baudrate>:

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b084      	sub	sp, #16
 8000514:	af00      	add	r7, sp, #0
 8000516:	60f8      	str	r0, [r7, #12]
 8000518:	60b9      	str	r1, [r7, #8]
 800051a:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_div(PeriphClk, BaudRate);
 800051c:	6879      	ldr	r1, [r7, #4]
 800051e:	68b8      	ldr	r0, [r7, #8]
 8000520:	f7ff ffe3 	bl	80004ea <compute_uart_div>
 8000524:	4603      	mov	r3, r0
 8000526:	461a      	mov	r2, r3
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	60da      	str	r2, [r3, #12]
}
 800052c:	bf00      	nop
 800052e:	3710      	adds	r7, #16
 8000530:	46bd      	mov	sp, r7
 8000532:	bd80      	pop	{r7, pc}

08000534 <config_uart_parameters>:

static void config_uart_parameters(USART_TypeDef *USARTx, uint32_t DataWidth, uint32_t Parity, uint32_t StopBits)
{
 8000534:	b480      	push	{r7}
 8000536:	b085      	sub	sp, #20
 8000538:	af00      	add	r7, sp, #0
 800053a:	60f8      	str	r0, [r7, #12]
 800053c:	60b9      	str	r1, [r7, #8]
 800053e:	607a      	str	r2, [r7, #4]
 8000540:	603b      	str	r3, [r7, #0]
	MODIFY_REG(USARTx->CR1, (USART_CR1_PS | USART_CR1_PCE | USART_CR1_M), Parity | DataWidth);
 8000542:	68fb      	ldr	r3, [r7, #12]
 8000544:	681a      	ldr	r2, [r3, #0]
 8000546:	4b0b      	ldr	r3, [pc, #44]	; (8000574 <config_uart_parameters+0x40>)
 8000548:	4013      	ands	r3, r2
 800054a:	6879      	ldr	r1, [r7, #4]
 800054c:	68ba      	ldr	r2, [r7, #8]
 800054e:	430a      	orrs	r2, r1
 8000550:	431a      	orrs	r2, r3
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	601a      	str	r2, [r3, #0]
	MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8000556:	68fb      	ldr	r3, [r7, #12]
 8000558:	685b      	ldr	r3, [r3, #4]
 800055a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800055e:	683b      	ldr	r3, [r7, #0]
 8000560:	431a      	orrs	r2, r3
 8000562:	68fb      	ldr	r3, [r7, #12]
 8000564:	605a      	str	r2, [r3, #4]
}
 8000566:	bf00      	nop
 8000568:	3714      	adds	r7, #20
 800056a:	46bd      	mov	sp, r7
 800056c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop
 8000574:	efffe9ff 	.word	0xefffe9ff

08000578 <uart3_rx_interrupt_init>:

void uart3_rx_interrupt_init(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
	// To get pin ready as USART pin:
	// 1. Enable clock access to GPIOD
	set_ahb1_periph_clock(GPIODEN);
 800057c:	2008      	movs	r0, #8
 800057e:	f7ff ff4f 	bl	8000420 <set_ahb1_periph_clock>

	// 2. Set PD8 mode to alternate function
	set_pin_mode(GPIOD, UART3_TX, GPIO_ALTERNATE_MODE);
 8000582:	2202      	movs	r2, #2
 8000584:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000588:	482d      	ldr	r0, [pc, #180]	; (8000640 <uart3_rx_interrupt_init+0xc8>)
 800058a:	f7ff fe55 	bl	8000238 <set_pin_mode>
	// 2a. Set PD9 mode to alternate function
	set_pin_mode(GPIOD, UART3_RX, GPIO_ALTERNATE_MODE);
 800058e:	2202      	movs	r2, #2
 8000590:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000594:	482a      	ldr	r0, [pc, #168]	; (8000640 <uart3_rx_interrupt_init+0xc8>)
 8000596:	f7ff fe4f 	bl	8000238 <set_pin_mode>

	// 3. Set alternate function type to USART for PD8
	GPIOD->AFR[1] |= (1U<<0);
 800059a:	4b29      	ldr	r3, [pc, #164]	; (8000640 <uart3_rx_interrupt_init+0xc8>)
 800059c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800059e:	4a28      	ldr	r2, [pc, #160]	; (8000640 <uart3_rx_interrupt_init+0xc8>)
 80005a0:	f043 0301 	orr.w	r3, r3, #1
 80005a4:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOD->AFR[1] |= (1U<<1);
 80005a6:	4b26      	ldr	r3, [pc, #152]	; (8000640 <uart3_rx_interrupt_init+0xc8>)
 80005a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005aa:	4a25      	ldr	r2, [pc, #148]	; (8000640 <uart3_rx_interrupt_init+0xc8>)
 80005ac:	f043 0302 	orr.w	r3, r3, #2
 80005b0:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOD->AFR[1] |= (1U<<2);
 80005b2:	4b23      	ldr	r3, [pc, #140]	; (8000640 <uart3_rx_interrupt_init+0xc8>)
 80005b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005b6:	4a22      	ldr	r2, [pc, #136]	; (8000640 <uart3_rx_interrupt_init+0xc8>)
 80005b8:	f043 0304 	orr.w	r3, r3, #4
 80005bc:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOD->AFR[1] &= ~(1U<<3);
 80005be:	4b20      	ldr	r3, [pc, #128]	; (8000640 <uart3_rx_interrupt_init+0xc8>)
 80005c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005c2:	4a1f      	ldr	r2, [pc, #124]	; (8000640 <uart3_rx_interrupt_init+0xc8>)
 80005c4:	f023 0308 	bic.w	r3, r3, #8
 80005c8:	6253      	str	r3, [r2, #36]	; 0x24
	// 3a. Set alternate function type to USART for PD9
	GPIOD->AFR[1] |= (1U<<4);
 80005ca:	4b1d      	ldr	r3, [pc, #116]	; (8000640 <uart3_rx_interrupt_init+0xc8>)
 80005cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005ce:	4a1c      	ldr	r2, [pc, #112]	; (8000640 <uart3_rx_interrupt_init+0xc8>)
 80005d0:	f043 0310 	orr.w	r3, r3, #16
 80005d4:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOD->AFR[1] |= (1U<<5);
 80005d6:	4b1a      	ldr	r3, [pc, #104]	; (8000640 <uart3_rx_interrupt_init+0xc8>)
 80005d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005da:	4a19      	ldr	r2, [pc, #100]	; (8000640 <uart3_rx_interrupt_init+0xc8>)
 80005dc:	f043 0320 	orr.w	r3, r3, #32
 80005e0:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOD->AFR[1] |= (1U<<6);
 80005e2:	4b17      	ldr	r3, [pc, #92]	; (8000640 <uart3_rx_interrupt_init+0xc8>)
 80005e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005e6:	4a16      	ldr	r2, [pc, #88]	; (8000640 <uart3_rx_interrupt_init+0xc8>)
 80005e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005ec:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOD->AFR[1] &= ~(1U<<7);
 80005ee:	4b14      	ldr	r3, [pc, #80]	; (8000640 <uart3_rx_interrupt_init+0xc8>)
 80005f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005f2:	4a13      	ldr	r2, [pc, #76]	; (8000640 <uart3_rx_interrupt_init+0xc8>)
 80005f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80005f8:	6253      	str	r3, [r2, #36]	; 0x24
	//GPIOD->AFR[1]|=0x77;

	// To get USART/UART peripheral ready:
	// Enable clock to USART3 module
	set_apb1_periph_clock(USART3EN);
 80005fa:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80005fe:	f7ff ff21 	bl	8000444 <set_apb1_periph_clock>

	// Configure USART parameters
	config_uart_parameters(USART3, UART_DATAWIDTH_8B, UART_PARITY_NONE, UART_STOPBITS_1);
 8000602:	2300      	movs	r3, #0
 8000604:	2200      	movs	r2, #0
 8000606:	2100      	movs	r1, #0
 8000608:	480e      	ldr	r0, [pc, #56]	; (8000644 <uart3_rx_interrupt_init+0xcc>)
 800060a:	f7ff ff93 	bl	8000534 <config_uart_parameters>
	set_uart_transfer_direction(USART3, (USART_CR1_TE|USART_CR1_RE));
 800060e:	210c      	movs	r1, #12
 8000610:	480c      	ldr	r0, [pc, #48]	; (8000644 <uart3_rx_interrupt_init+0xcc>)
 8000612:	f7ff ff57 	bl	80004c4 <set_uart_transfer_direction>

	// Set baudrate
	uart_set_baudrate(USART3, 16000000, 57600);
 8000616:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 800061a:	490b      	ldr	r1, [pc, #44]	; (8000648 <uart3_rx_interrupt_init+0xd0>)
 800061c:	4809      	ldr	r0, [pc, #36]	; (8000644 <uart3_rx_interrupt_init+0xcc>)
 800061e:	f7ff ff77 	bl	8000510 <uart_set_baudrate>

	// Enable USART
	//USART3->CR1 |= USART_CR1_UE;
	uart_enable(USART3);
 8000622:	4808      	ldr	r0, [pc, #32]	; (8000644 <uart3_rx_interrupt_init+0xcc>)
 8000624:	f7ff ff3e 	bl	80004a4 <uart_enable>

	// Enable UART rxne interrupt.
	USART3->CR1 |= CR1_RXNEIE;
 8000628:	4b06      	ldr	r3, [pc, #24]	; (8000644 <uart3_rx_interrupt_init+0xcc>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a05      	ldr	r2, [pc, #20]	; (8000644 <uart3_rx_interrupt_init+0xcc>)
 800062e:	f043 0320 	orr.w	r3, r3, #32
 8000632:	6013      	str	r3, [r2, #0]

	// Enable UART interrupt in NVIC.
	NVIC_EnableIRQ(USART3_IRQn);
 8000634:	2027      	movs	r0, #39	; 0x27
 8000636:	f7ff ff17 	bl	8000468 <__NVIC_EnableIRQ>
}
 800063a:	bf00      	nop
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	40020c00 	.word	0x40020c00
 8000644:	40004800 	.word	0x40004800
 8000648:	00f42400 	.word	0x00f42400

0800064c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800064c:	480d      	ldr	r0, [pc, #52]	; (8000684 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800064e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000650:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000654:	480c      	ldr	r0, [pc, #48]	; (8000688 <LoopForever+0x6>)
  ldr r1, =_edata
 8000656:	490d      	ldr	r1, [pc, #52]	; (800068c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000658:	4a0d      	ldr	r2, [pc, #52]	; (8000690 <LoopForever+0xe>)
  movs r3, #0
 800065a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800065c:	e002      	b.n	8000664 <LoopCopyDataInit>

0800065e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800065e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000660:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000662:	3304      	adds	r3, #4

08000664 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000664:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000666:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000668:	d3f9      	bcc.n	800065e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800066a:	4a0a      	ldr	r2, [pc, #40]	; (8000694 <LoopForever+0x12>)
  ldr r4, =_ebss
 800066c:	4c0a      	ldr	r4, [pc, #40]	; (8000698 <LoopForever+0x16>)
  movs r3, #0
 800066e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000670:	e001      	b.n	8000676 <LoopFillZerobss>

08000672 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000672:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000674:	3204      	adds	r2, #4

08000676 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000676:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000678:	d3fb      	bcc.n	8000672 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800067a:	f000 f811 	bl	80006a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800067e:	f7ff fe61 	bl	8000344 <main>

08000682 <LoopForever>:

LoopForever:
  b LoopForever
 8000682:	e7fe      	b.n	8000682 <LoopForever>
  ldr   r0, =_estack
 8000684:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000688:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800068c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000690:	08000708 	.word	0x08000708
  ldr r2, =_sbss
 8000694:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000698:	20000020 	.word	0x20000020

0800069c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800069c:	e7fe      	b.n	800069c <ADC_IRQHandler>
	...

080006a0 <__libc_init_array>:
 80006a0:	b570      	push	{r4, r5, r6, lr}
 80006a2:	4d0d      	ldr	r5, [pc, #52]	; (80006d8 <__libc_init_array+0x38>)
 80006a4:	4c0d      	ldr	r4, [pc, #52]	; (80006dc <__libc_init_array+0x3c>)
 80006a6:	1b64      	subs	r4, r4, r5
 80006a8:	10a4      	asrs	r4, r4, #2
 80006aa:	2600      	movs	r6, #0
 80006ac:	42a6      	cmp	r6, r4
 80006ae:	d109      	bne.n	80006c4 <__libc_init_array+0x24>
 80006b0:	4d0b      	ldr	r5, [pc, #44]	; (80006e0 <__libc_init_array+0x40>)
 80006b2:	4c0c      	ldr	r4, [pc, #48]	; (80006e4 <__libc_init_array+0x44>)
 80006b4:	f000 f818 	bl	80006e8 <_init>
 80006b8:	1b64      	subs	r4, r4, r5
 80006ba:	10a4      	asrs	r4, r4, #2
 80006bc:	2600      	movs	r6, #0
 80006be:	42a6      	cmp	r6, r4
 80006c0:	d105      	bne.n	80006ce <__libc_init_array+0x2e>
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80006c8:	4798      	blx	r3
 80006ca:	3601      	adds	r6, #1
 80006cc:	e7ee      	b.n	80006ac <__libc_init_array+0xc>
 80006ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80006d2:	4798      	blx	r3
 80006d4:	3601      	adds	r6, #1
 80006d6:	e7f2      	b.n	80006be <__libc_init_array+0x1e>
 80006d8:	08000700 	.word	0x08000700
 80006dc:	08000700 	.word	0x08000700
 80006e0:	08000700 	.word	0x08000700
 80006e4:	08000704 	.word	0x08000704

080006e8 <_init>:
 80006e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006ea:	bf00      	nop
 80006ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006ee:	bc08      	pop	{r3}
 80006f0:	469e      	mov	lr, r3
 80006f2:	4770      	bx	lr

080006f4 <_fini>:
 80006f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006f6:	bf00      	nop
 80006f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006fa:	bc08      	pop	{r3}
 80006fc:	469e      	mov	lr, r3
 80006fe:	4770      	bx	lr
