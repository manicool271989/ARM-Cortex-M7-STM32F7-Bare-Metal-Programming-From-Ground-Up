
12_SysTick.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000408  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000600  08000608  00010608  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000600  08000600  00010608  2**0
                  CONTENTS
  4 .ARM          00000000  08000600  08000600  00010608  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000600  08000608  00010608  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000600  08000600  00010600  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000604  08000604  00010604  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010608  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000608  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000608  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00010608  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00010636  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000e32  00000000  00000000  00010679  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000061b  00000000  00000000  000114ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000178  00000000  00000000  00011ac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000f9  00000000  00000000  00011c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e199  00000000  00000000  00011d39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000026e6  00000000  00000000  0002fed2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a71e5  00000000  00000000  000325b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000400  00000000  00000000  000d97a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009e  00000000  00000000  000d9ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000000 	.word	0x20000000
 8000214:	00000000 	.word	0x00000000
 8000218:	080005e8 	.word	0x080005e8

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000004 	.word	0x20000004
 8000234:	080005e8 	.word	0x080005e8

08000238 <set_pin_mode>:
 */

#include "gpio.h"

void set_pin_mode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000238:	b480      	push	{r7}
 800023a:	b089      	sub	sp, #36	; 0x24
 800023c:	af00      	add	r7, sp, #0
 800023e:	60f8      	str	r0, [r7, #12]
 8000240:	60b9      	str	r1, [r7, #8]
 8000242:	607a      	str	r2, [r7, #4]
	// set the relevant bit in the mode register
	// CLEARMASK explanation:
	// 0b 11 << 16 (shift 0b11 to position 16 (LSB occupies bit 16, MSB occupies bit 17))
	MODIFY_REG(GPIOx->MODER, (0x3 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000244:	68fb      	ldr	r3, [r7, #12]
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	68ba      	ldr	r2, [r7, #8]
 800024a:	617a      	str	r2, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800024c:	697a      	ldr	r2, [r7, #20]
 800024e:	fa92 f2a2 	rbit	r2, r2
 8000252:	613a      	str	r2, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000254:	693a      	ldr	r2, [r7, #16]
 8000256:	fab2 f282 	clz	r2, r2
 800025a:	b2d2      	uxtb	r2, r2
 800025c:	0052      	lsls	r2, r2, #1
 800025e:	2103      	movs	r1, #3
 8000260:	fa01 f202 	lsl.w	r2, r1, r2
 8000264:	43d2      	mvns	r2, r2
 8000266:	401a      	ands	r2, r3
 8000268:	68bb      	ldr	r3, [r7, #8]
 800026a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800026c:	69fb      	ldr	r3, [r7, #28]
 800026e:	fa93 f3a3 	rbit	r3, r3
 8000272:	61bb      	str	r3, [r7, #24]
  return result;
 8000274:	69bb      	ldr	r3, [r7, #24]
 8000276:	fab3 f383 	clz	r3, r3
 800027a:	b2db      	uxtb	r3, r3
 800027c:	005b      	lsls	r3, r3, #1
 800027e:	6879      	ldr	r1, [r7, #4]
 8000280:	fa01 f303 	lsl.w	r3, r1, r3
 8000284:	431a      	orrs	r2, r3
 8000286:	68fb      	ldr	r3, [r7, #12]
 8000288:	601a      	str	r2, [r3, #0]
}
 800028a:	bf00      	nop
 800028c:	3724      	adds	r7, #36	; 0x24
 800028e:	46bd      	mov	sp, r7
 8000290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000294:	4770      	bx	lr
	...

08000298 <all_leds_init>:
// Configure the GPIOB_MODE_R register. MODER0, MODER7, and MODER14 will each be set to 2'b01 to configure them as outputs.

#include "led.h"

void all_leds_init(void)
{
 8000298:	b480      	push	{r7}
 800029a:	af00      	add	r7, sp, #0
	// Enable clock access to port B.
	RCC->AHB1ENR |= GPIOB_CLK_EN;
 800029c:	4b0b      	ldr	r3, [pc, #44]	; (80002cc <all_leds_init+0x34>)
 800029e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002a0:	4a0a      	ldr	r2, [pc, #40]	; (80002cc <all_leds_init+0x34>)
 80002a2:	f043 0302 	orr.w	r3, r3, #2
 80002a6:	6313      	str	r3, [r2, #48]	; 0x30

	// Configure GPIOs as outputs to drive LEDs.
	GPIOB->MODER |= USER_LED1_MODER0 | USER_LED2_MODER0 | USER_LED3_MODER0;
 80002a8:	4b09      	ldr	r3, [pc, #36]	; (80002d0 <all_leds_init+0x38>)
 80002aa:	681a      	ldr	r2, [r3, #0]
 80002ac:	4908      	ldr	r1, [pc, #32]	; (80002d0 <all_leds_init+0x38>)
 80002ae:	4b09      	ldr	r3, [pc, #36]	; (80002d4 <all_leds_init+0x3c>)
 80002b0:	4313      	orrs	r3, r2
 80002b2:	600b      	str	r3, [r1, #0]
	GPIOB->MODER &= ~(USER_LED1_MODER1 | USER_LED2_MODER1 | USER_LED3_MODER1);
 80002b4:	4b06      	ldr	r3, [pc, #24]	; (80002d0 <all_leds_init+0x38>)
 80002b6:	681a      	ldr	r2, [r3, #0]
 80002b8:	4905      	ldr	r1, [pc, #20]	; (80002d0 <all_leds_init+0x38>)
 80002ba:	4b07      	ldr	r3, [pc, #28]	; (80002d8 <all_leds_init+0x40>)
 80002bc:	4013      	ands	r3, r2
 80002be:	600b      	str	r3, [r1, #0]

}
 80002c0:	bf00      	nop
 80002c2:	46bd      	mov	sp, r7
 80002c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c8:	4770      	bx	lr
 80002ca:	bf00      	nop
 80002cc:	40023800 	.word	0x40023800
 80002d0:	40020400 	.word	0x40020400
 80002d4:	10004001 	.word	0x10004001
 80002d8:	dfff7ffd 	.word	0xdfff7ffd

080002dc <all_leds_toggle>:
{
	GPIOB->ODR &= ~(red_led | green_led | blue_led);
}

void all_leds_toggle(void)
{
 80002dc:	b480      	push	{r7}
 80002de:	af00      	add	r7, sp, #0
	GPIOB->ODR ^= red_led | green_led | blue_led;
 80002e0:	4b05      	ldr	r3, [pc, #20]	; (80002f8 <all_leds_toggle+0x1c>)
 80002e2:	695a      	ldr	r2, [r3, #20]
 80002e4:	4904      	ldr	r1, [pc, #16]	; (80002f8 <all_leds_toggle+0x1c>)
 80002e6:	f244 0381 	movw	r3, #16513	; 0x4081
 80002ea:	4053      	eors	r3, r2
 80002ec:	614b      	str	r3, [r1, #20]
}
 80002ee:	bf00      	nop
 80002f0:	46bd      	mov	sp, r7
 80002f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f6:	4770      	bx	lr
 80002f8:	40020400 	.word	0x40020400

080002fc <main>:

#define DELAY 50

char ch;
int main()
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	af00      	add	r7, sp, #0
	all_leds_init();
 8000300:	f7ff ffca 	bl	8000298 <all_leds_init>
	uart3_rxtx_init();
 8000304:	f000 f8c2 	bl	800048c <uart3_rxtx_init>

	while(1)
	{
		systickDelay(DELAY);
 8000308:	2032      	movs	r0, #50	; 0x32
 800030a:	f000 f827 	bl	800035c <systickDelay>
		all_leds_toggle();
 800030e:	f7ff ffe5 	bl	80002dc <all_leds_toggle>
		systickDelay(DELAY);
 8000312:	e7f9      	b.n	8000308 <main+0xc>

08000314 <set_ahb1_periph_clock>:
 */

#include "rcc.h"

void set_ahb1_periph_clock(uint32_t periphs)
{
 8000314:	b480      	push	{r7}
 8000316:	b083      	sub	sp, #12
 8000318:	af00      	add	r7, sp, #0
 800031a:	6078      	str	r0, [r7, #4]
	SET_BIT(RCC->AHB1ENR, periphs);
 800031c:	4b05      	ldr	r3, [pc, #20]	; (8000334 <set_ahb1_periph_clock+0x20>)
 800031e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000320:	4904      	ldr	r1, [pc, #16]	; (8000334 <set_ahb1_periph_clock+0x20>)
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	4313      	orrs	r3, r2
 8000326:	630b      	str	r3, [r1, #48]	; 0x30
}
 8000328:	bf00      	nop
 800032a:	370c      	adds	r7, #12
 800032c:	46bd      	mov	sp, r7
 800032e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000332:	4770      	bx	lr
 8000334:	40023800 	.word	0x40023800

08000338 <set_apb1_periph_clock>:
{
	SET_BIT(RCC->AHB2ENR, periphs);
}

void set_apb1_periph_clock(uint32_t periphs)
{
 8000338:	b480      	push	{r7}
 800033a:	b083      	sub	sp, #12
 800033c:	af00      	add	r7, sp, #0
 800033e:	6078      	str	r0, [r7, #4]
	SET_BIT(RCC->APB1ENR, periphs);
 8000340:	4b05      	ldr	r3, [pc, #20]	; (8000358 <set_apb1_periph_clock+0x20>)
 8000342:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000344:	4904      	ldr	r1, [pc, #16]	; (8000358 <set_apb1_periph_clock+0x20>)
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	4313      	orrs	r3, r2
 800034a:	640b      	str	r3, [r1, #64]	; 0x40
}
 800034c:	bf00      	nop
 800034e:	370c      	adds	r7, #12
 8000350:	46bd      	mov	sp, r7
 8000352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000356:	4770      	bx	lr
 8000358:	40023800 	.word	0x40023800

0800035c <systickDelay>:
#define CTRL_CLKSRC (1U<<2)
#define CTRL_ENABLE (1U<<0)
#define CTRL_COUNTFLAG (1U<<16)

void systickDelay(int delay)
{
 800035c:	b480      	push	{r7}
 800035e:	b085      	sub	sp, #20
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
	// Load the # of cycles to count down from.
	SysTick->LOAD = SYSTICK_LOAD_VAL;
 8000364:	4b13      	ldr	r3, [pc, #76]	; (80003b4 <systickDelay+0x58>)
 8000366:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800036a:	605a      	str	r2, [r3, #4]

	// Clear the current value register.
	SysTick->VAL = 0;
 800036c:	4b11      	ldr	r3, [pc, #68]	; (80003b4 <systickDelay+0x58>)
 800036e:	2200      	movs	r2, #0
 8000370:	609a      	str	r2, [r3, #8]

	// Set the clock source and enable the SysTick timer.
	SysTick->CTRL |= CTRL_CLKSRC | CTRL_ENABLE;
 8000372:	4b10      	ldr	r3, [pc, #64]	; (80003b4 <systickDelay+0x58>)
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	4a0f      	ldr	r2, [pc, #60]	; (80003b4 <systickDelay+0x58>)
 8000378:	f043 0305 	orr.w	r3, r3, #5
 800037c:	6013      	str	r3, [r2, #0]

	// Wait through the SysTick timer by delay number of times.
	for(int i = 0; i < delay; i++)
 800037e:	2300      	movs	r3, #0
 8000380:	60fb      	str	r3, [r7, #12]
 8000382:	e009      	b.n	8000398 <systickDelay+0x3c>
	{
		while((SysTick->CTRL & CTRL_COUNTFLAG) == 0)
 8000384:	bf00      	nop
 8000386:	4b0b      	ldr	r3, [pc, #44]	; (80003b4 <systickDelay+0x58>)
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800038e:	2b00      	cmp	r3, #0
 8000390:	d0f9      	beq.n	8000386 <systickDelay+0x2a>
	for(int i = 0; i < delay; i++)
 8000392:	68fb      	ldr	r3, [r7, #12]
 8000394:	3301      	adds	r3, #1
 8000396:	60fb      	str	r3, [r7, #12]
 8000398:	68fa      	ldr	r2, [r7, #12]
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	429a      	cmp	r2, r3
 800039e:	dbf1      	blt.n	8000384 <systickDelay+0x28>
		{
		}
	}

	// Disable SysTick
	SysTick->CTRL = 0;
 80003a0:	4b04      	ldr	r3, [pc, #16]	; (80003b4 <systickDelay+0x58>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	601a      	str	r2, [r3, #0]

}
 80003a6:	bf00      	nop
 80003a8:	3714      	adds	r7, #20
 80003aa:	46bd      	mov	sp, r7
 80003ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b0:	4770      	bx	lr
 80003b2:	bf00      	nop
 80003b4:	e000e010 	.word	0xe000e010

080003b8 <uart_enable>:
	uart_write(USART3, ch);
	return ch;
}

static void uart_enable(USART_TypeDef *USARTx)
{
 80003b8:	b480      	push	{r7}
 80003ba:	b083      	sub	sp, #12
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
	SET_BIT(USARTx->CR1, USART_CR1_UE);
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	f043 0201 	orr.w	r2, r3, #1
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	601a      	str	r2, [r3, #0]
}
 80003cc:	bf00      	nop
 80003ce:	370c      	adds	r7, #12
 80003d0:	46bd      	mov	sp, r7
 80003d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d6:	4770      	bx	lr

080003d8 <set_uart_transfer_direction>:

static void set_uart_transfer_direction(USART_TypeDef *USARTx, uint32_t TransferDirection)
{
 80003d8:	b480      	push	{r7}
 80003da:	b083      	sub	sp, #12
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]
 80003e0:	6039      	str	r1, [r7, #0]
	MODIFY_REG(USARTx->CR1, (USART_CR1_RE |USART_CR1_TE), TransferDirection);
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	f023 020c 	bic.w	r2, r3, #12
 80003ea:	683b      	ldr	r3, [r7, #0]
 80003ec:	431a      	orrs	r2, r3
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	601a      	str	r2, [r3, #0]
}
 80003f2:	bf00      	nop
 80003f4:	370c      	adds	r7, #12
 80003f6:	46bd      	mov	sp, r7
 80003f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fc:	4770      	bx	lr

080003fe <compute_uart_div>:

static uint16_t compute_uart_div(uint32_t PeriphClk, uint32_t BaudRate)
{
 80003fe:	b480      	push	{r7}
 8000400:	b083      	sub	sp, #12
 8000402:	af00      	add	r7, sp, #0
 8000404:	6078      	str	r0, [r7, #4]
 8000406:	6039      	str	r1, [r7, #0]
	return (PeriphClk + (BaudRate/2U))/BaudRate;
 8000408:	683b      	ldr	r3, [r7, #0]
 800040a:	085a      	lsrs	r2, r3, #1
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	441a      	add	r2, r3
 8000410:	683b      	ldr	r3, [r7, #0]
 8000412:	fbb2 f3f3 	udiv	r3, r2, r3
 8000416:	b29b      	uxth	r3, r3
}
 8000418:	4618      	mov	r0, r3
 800041a:	370c      	adds	r7, #12
 800041c:	46bd      	mov	sp, r7
 800041e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000422:	4770      	bx	lr

08000424 <uart_set_baudrate>:

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b084      	sub	sp, #16
 8000428:	af00      	add	r7, sp, #0
 800042a:	60f8      	str	r0, [r7, #12]
 800042c:	60b9      	str	r1, [r7, #8]
 800042e:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_div(PeriphClk, BaudRate);
 8000430:	6879      	ldr	r1, [r7, #4]
 8000432:	68b8      	ldr	r0, [r7, #8]
 8000434:	f7ff ffe3 	bl	80003fe <compute_uart_div>
 8000438:	4603      	mov	r3, r0
 800043a:	461a      	mov	r2, r3
 800043c:	68fb      	ldr	r3, [r7, #12]
 800043e:	60da      	str	r2, [r3, #12]
}
 8000440:	bf00      	nop
 8000442:	3710      	adds	r7, #16
 8000444:	46bd      	mov	sp, r7
 8000446:	bd80      	pop	{r7, pc}

08000448 <config_uart_parameters>:

static void config_uart_parameters(USART_TypeDef *USARTx, uint32_t DataWidth, uint32_t Parity, uint32_t StopBits)
{
 8000448:	b480      	push	{r7}
 800044a:	b085      	sub	sp, #20
 800044c:	af00      	add	r7, sp, #0
 800044e:	60f8      	str	r0, [r7, #12]
 8000450:	60b9      	str	r1, [r7, #8]
 8000452:	607a      	str	r2, [r7, #4]
 8000454:	603b      	str	r3, [r7, #0]
	MODIFY_REG(USARTx->CR1, (USART_CR1_PS | USART_CR1_PCE | USART_CR1_M), Parity | DataWidth);
 8000456:	68fb      	ldr	r3, [r7, #12]
 8000458:	681a      	ldr	r2, [r3, #0]
 800045a:	4b0b      	ldr	r3, [pc, #44]	; (8000488 <config_uart_parameters+0x40>)
 800045c:	4013      	ands	r3, r2
 800045e:	6879      	ldr	r1, [r7, #4]
 8000460:	68ba      	ldr	r2, [r7, #8]
 8000462:	430a      	orrs	r2, r1
 8000464:	431a      	orrs	r2, r3
 8000466:	68fb      	ldr	r3, [r7, #12]
 8000468:	601a      	str	r2, [r3, #0]
	MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800046a:	68fb      	ldr	r3, [r7, #12]
 800046c:	685b      	ldr	r3, [r3, #4]
 800046e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8000472:	683b      	ldr	r3, [r7, #0]
 8000474:	431a      	orrs	r2, r3
 8000476:	68fb      	ldr	r3, [r7, #12]
 8000478:	605a      	str	r2, [r3, #4]
}
 800047a:	bf00      	nop
 800047c:	3714      	adds	r7, #20
 800047e:	46bd      	mov	sp, r7
 8000480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000484:	4770      	bx	lr
 8000486:	bf00      	nop
 8000488:	efffe9ff 	.word	0xefffe9ff

0800048c <uart3_rxtx_init>:
	//USART3->CR1 |= USART_CR1_UE;
	uart_enable(USART3);
}

void uart3_rxtx_init(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	af00      	add	r7, sp, #0
	// To get pin ready as USART pin:
	// 1. Enable clock access to GPIOD
	set_ahb1_periph_clock(GPIODEN);
 8000490:	2008      	movs	r0, #8
 8000492:	f7ff ff3f 	bl	8000314 <set_ahb1_periph_clock>

	// 2. Set PD8 mode to alternate function
	set_pin_mode(GPIOD, UART3_TX, GPIO_ALTERNATE_MODE);
 8000496:	2202      	movs	r2, #2
 8000498:	f44f 7180 	mov.w	r1, #256	; 0x100
 800049c:	4828      	ldr	r0, [pc, #160]	; (8000540 <uart3_rxtx_init+0xb4>)
 800049e:	f7ff fecb 	bl	8000238 <set_pin_mode>
	// 2a. Set PD9 mode to alternate function
	set_pin_mode(GPIOD, UART3_RX, GPIO_ALTERNATE_MODE);
 80004a2:	2202      	movs	r2, #2
 80004a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004a8:	4825      	ldr	r0, [pc, #148]	; (8000540 <uart3_rxtx_init+0xb4>)
 80004aa:	f7ff fec5 	bl	8000238 <set_pin_mode>

	// 3. Set alternate function type to USART for PD8
	GPIOD->AFR[1] |= (1U<<0);
 80004ae:	4b24      	ldr	r3, [pc, #144]	; (8000540 <uart3_rxtx_init+0xb4>)
 80004b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004b2:	4a23      	ldr	r2, [pc, #140]	; (8000540 <uart3_rxtx_init+0xb4>)
 80004b4:	f043 0301 	orr.w	r3, r3, #1
 80004b8:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOD->AFR[1] |= (1U<<1);
 80004ba:	4b21      	ldr	r3, [pc, #132]	; (8000540 <uart3_rxtx_init+0xb4>)
 80004bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004be:	4a20      	ldr	r2, [pc, #128]	; (8000540 <uart3_rxtx_init+0xb4>)
 80004c0:	f043 0302 	orr.w	r3, r3, #2
 80004c4:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOD->AFR[1] |= (1U<<2);
 80004c6:	4b1e      	ldr	r3, [pc, #120]	; (8000540 <uart3_rxtx_init+0xb4>)
 80004c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004ca:	4a1d      	ldr	r2, [pc, #116]	; (8000540 <uart3_rxtx_init+0xb4>)
 80004cc:	f043 0304 	orr.w	r3, r3, #4
 80004d0:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOD->AFR[1] &= ~(1U<<3);
 80004d2:	4b1b      	ldr	r3, [pc, #108]	; (8000540 <uart3_rxtx_init+0xb4>)
 80004d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004d6:	4a1a      	ldr	r2, [pc, #104]	; (8000540 <uart3_rxtx_init+0xb4>)
 80004d8:	f023 0308 	bic.w	r3, r3, #8
 80004dc:	6253      	str	r3, [r2, #36]	; 0x24
	// 3a. Set alternate function type to USART for PD9
	GPIOD->AFR[1] |= (1U<<4);
 80004de:	4b18      	ldr	r3, [pc, #96]	; (8000540 <uart3_rxtx_init+0xb4>)
 80004e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004e2:	4a17      	ldr	r2, [pc, #92]	; (8000540 <uart3_rxtx_init+0xb4>)
 80004e4:	f043 0310 	orr.w	r3, r3, #16
 80004e8:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOD->AFR[1] |= (1U<<5);
 80004ea:	4b15      	ldr	r3, [pc, #84]	; (8000540 <uart3_rxtx_init+0xb4>)
 80004ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004ee:	4a14      	ldr	r2, [pc, #80]	; (8000540 <uart3_rxtx_init+0xb4>)
 80004f0:	f043 0320 	orr.w	r3, r3, #32
 80004f4:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOD->AFR[1] |= (1U<<6);
 80004f6:	4b12      	ldr	r3, [pc, #72]	; (8000540 <uart3_rxtx_init+0xb4>)
 80004f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004fa:	4a11      	ldr	r2, [pc, #68]	; (8000540 <uart3_rxtx_init+0xb4>)
 80004fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000500:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOD->AFR[1] &= ~(1U<<7);
 8000502:	4b0f      	ldr	r3, [pc, #60]	; (8000540 <uart3_rxtx_init+0xb4>)
 8000504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000506:	4a0e      	ldr	r2, [pc, #56]	; (8000540 <uart3_rxtx_init+0xb4>)
 8000508:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800050c:	6253      	str	r3, [r2, #36]	; 0x24
	//GPIOD->AFR[1]|=0x77;

	// To get USART/UART peripheral ready:
	// Enable clock to USART3 module
	set_apb1_periph_clock(USART3EN);
 800050e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000512:	f7ff ff11 	bl	8000338 <set_apb1_periph_clock>

	// Configure USART parameters
	config_uart_parameters(USART3, UART_DATAWIDTH_8B, UART_PARITY_NONE, UART_STOPBITS_1);
 8000516:	2300      	movs	r3, #0
 8000518:	2200      	movs	r2, #0
 800051a:	2100      	movs	r1, #0
 800051c:	4809      	ldr	r0, [pc, #36]	; (8000544 <uart3_rxtx_init+0xb8>)
 800051e:	f7ff ff93 	bl	8000448 <config_uart_parameters>
	set_uart_transfer_direction(USART3, (USART_CR1_TE|USART_CR1_RE));
 8000522:	210c      	movs	r1, #12
 8000524:	4807      	ldr	r0, [pc, #28]	; (8000544 <uart3_rxtx_init+0xb8>)
 8000526:	f7ff ff57 	bl	80003d8 <set_uart_transfer_direction>

	// Set baudrate
	uart_set_baudrate(USART3, 16000000, 57600);
 800052a:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 800052e:	4906      	ldr	r1, [pc, #24]	; (8000548 <uart3_rxtx_init+0xbc>)
 8000530:	4804      	ldr	r0, [pc, #16]	; (8000544 <uart3_rxtx_init+0xb8>)
 8000532:	f7ff ff77 	bl	8000424 <uart_set_baudrate>

	// Enable USART
	//USART3->CR1 |= USART_CR1_UE;
	uart_enable(USART3);
 8000536:	4803      	ldr	r0, [pc, #12]	; (8000544 <uart3_rxtx_init+0xb8>)
 8000538:	f7ff ff3e 	bl	80003b8 <uart_enable>
}
 800053c:	bf00      	nop
 800053e:	bd80      	pop	{r7, pc}
 8000540:	40020c00 	.word	0x40020c00
 8000544:	40004800 	.word	0x40004800
 8000548:	00f42400 	.word	0x00f42400

0800054c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800054c:	480d      	ldr	r0, [pc, #52]	; (8000584 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800054e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000550:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000554:	480c      	ldr	r0, [pc, #48]	; (8000588 <LoopForever+0x6>)
  ldr r1, =_edata
 8000556:	490d      	ldr	r1, [pc, #52]	; (800058c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000558:	4a0d      	ldr	r2, [pc, #52]	; (8000590 <LoopForever+0xe>)
  movs r3, #0
 800055a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800055c:	e002      	b.n	8000564 <LoopCopyDataInit>

0800055e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800055e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000560:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000562:	3304      	adds	r3, #4

08000564 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000564:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000566:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000568:	d3f9      	bcc.n	800055e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800056a:	4a0a      	ldr	r2, [pc, #40]	; (8000594 <LoopForever+0x12>)
  ldr r4, =_ebss
 800056c:	4c0a      	ldr	r4, [pc, #40]	; (8000598 <LoopForever+0x16>)
  movs r3, #0
 800056e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000570:	e001      	b.n	8000576 <LoopFillZerobss>

08000572 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000572:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000574:	3204      	adds	r2, #4

08000576 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000576:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000578:	d3fb      	bcc.n	8000572 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800057a:	f000 f811 	bl	80005a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800057e:	f7ff febd 	bl	80002fc <main>

08000582 <LoopForever>:

LoopForever:
  b LoopForever
 8000582:	e7fe      	b.n	8000582 <LoopForever>
  ldr   r0, =_estack
 8000584:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000588:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800058c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000590:	08000608 	.word	0x08000608
  ldr r2, =_sbss
 8000594:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000598:	2000001c 	.word	0x2000001c

0800059c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800059c:	e7fe      	b.n	800059c <ADC_IRQHandler>
	...

080005a0 <__libc_init_array>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	4d0d      	ldr	r5, [pc, #52]	; (80005d8 <__libc_init_array+0x38>)
 80005a4:	4c0d      	ldr	r4, [pc, #52]	; (80005dc <__libc_init_array+0x3c>)
 80005a6:	1b64      	subs	r4, r4, r5
 80005a8:	10a4      	asrs	r4, r4, #2
 80005aa:	2600      	movs	r6, #0
 80005ac:	42a6      	cmp	r6, r4
 80005ae:	d109      	bne.n	80005c4 <__libc_init_array+0x24>
 80005b0:	4d0b      	ldr	r5, [pc, #44]	; (80005e0 <__libc_init_array+0x40>)
 80005b2:	4c0c      	ldr	r4, [pc, #48]	; (80005e4 <__libc_init_array+0x44>)
 80005b4:	f000 f818 	bl	80005e8 <_init>
 80005b8:	1b64      	subs	r4, r4, r5
 80005ba:	10a4      	asrs	r4, r4, #2
 80005bc:	2600      	movs	r6, #0
 80005be:	42a6      	cmp	r6, r4
 80005c0:	d105      	bne.n	80005ce <__libc_init_array+0x2e>
 80005c2:	bd70      	pop	{r4, r5, r6, pc}
 80005c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80005c8:	4798      	blx	r3
 80005ca:	3601      	adds	r6, #1
 80005cc:	e7ee      	b.n	80005ac <__libc_init_array+0xc>
 80005ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80005d2:	4798      	blx	r3
 80005d4:	3601      	adds	r6, #1
 80005d6:	e7f2      	b.n	80005be <__libc_init_array+0x1e>
 80005d8:	08000600 	.word	0x08000600
 80005dc:	08000600 	.word	0x08000600
 80005e0:	08000600 	.word	0x08000600
 80005e4:	08000604 	.word	0x08000604

080005e8 <_init>:
 80005e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005ea:	bf00      	nop
 80005ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005ee:	bc08      	pop	{r3}
 80005f0:	469e      	mov	lr, r3
 80005f2:	4770      	bx	lr

080005f4 <_fini>:
 80005f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005f6:	bf00      	nop
 80005f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005fa:	bc08      	pop	{r3}
 80005fc:	469e      	mov	lr, r3
 80005fe:	4770      	bx	lr
