
18_uart_tx_interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003cc  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080005c4  080005cc  000105cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080005c4  080005c4  000105cc  2**0
                  CONTENTS
  4 .ARM          00000000  080005c4  080005c4  000105cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080005c4  080005cc  000105cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080005c4  080005c4  000105c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080005c8  080005c8  000105c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000105cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080005cc  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080005cc  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000105cc  2**0
                  CONTENTS, READONLY
 12 .comment      00000086  00000000  00000000  000105fa  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000122d  00000000  00000000  00010680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000062e  00000000  00000000  000118ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000178  00000000  00000000  00011ee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000ff  00000000  00000000  00012058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e0c0  00000000  00000000  00012157  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002185  00000000  00000000  00030217  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a7818  00000000  00000000  0003239c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000448  00000000  00000000  000d9bb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009e  00000000  00000000  000d9ffc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000000 	.word	0x20000000
 8000214:	00000000 	.word	0x00000000
 8000218:	080005ac 	.word	0x080005ac

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000004 	.word	0x20000004
 8000234:	080005ac 	.word	0x080005ac

08000238 <set_pin_mode>:
 */

#include "gpio.h"

void set_pin_mode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000238:	b480      	push	{r7}
 800023a:	b089      	sub	sp, #36	; 0x24
 800023c:	af00      	add	r7, sp, #0
 800023e:	60f8      	str	r0, [r7, #12]
 8000240:	60b9      	str	r1, [r7, #8]
 8000242:	607a      	str	r2, [r7, #4]
	// set the relevant bit in the mode register
	// CLEARMASK explanation:
	// 0b 11 << 16 (shift 0b11 to position 16 (LSB occupies bit 16, MSB occupies bit 17))
	MODIFY_REG(GPIOx->MODER, (0x3 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000244:	68fb      	ldr	r3, [r7, #12]
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	68ba      	ldr	r2, [r7, #8]
 800024a:	617a      	str	r2, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800024c:	697a      	ldr	r2, [r7, #20]
 800024e:	fa92 f2a2 	rbit	r2, r2
 8000252:	613a      	str	r2, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000254:	693a      	ldr	r2, [r7, #16]
 8000256:	fab2 f282 	clz	r2, r2
 800025a:	b2d2      	uxtb	r2, r2
 800025c:	0052      	lsls	r2, r2, #1
 800025e:	2103      	movs	r1, #3
 8000260:	fa01 f202 	lsl.w	r2, r1, r2
 8000264:	43d2      	mvns	r2, r2
 8000266:	401a      	ands	r2, r3
 8000268:	68bb      	ldr	r3, [r7, #8]
 800026a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800026c:	69fb      	ldr	r3, [r7, #28]
 800026e:	fa93 f3a3 	rbit	r3, r3
 8000272:	61bb      	str	r3, [r7, #24]
  return result;
 8000274:	69bb      	ldr	r3, [r7, #24]
 8000276:	fab3 f383 	clz	r3, r3
 800027a:	b2db      	uxtb	r3, r3
 800027c:	005b      	lsls	r3, r3, #1
 800027e:	6879      	ldr	r1, [r7, #4]
 8000280:	fa01 f303 	lsl.w	r3, r1, r3
 8000284:	431a      	orrs	r2, r3
 8000286:	68fb      	ldr	r3, [r7, #12]
 8000288:	601a      	str	r2, [r3, #0]
}
 800028a:	bf00      	nop
 800028c:	3724      	adds	r7, #36	; 0x24
 800028e:	46bd      	mov	sp, r7
 8000290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000294:	4770      	bx	lr
	...

08000298 <all_leds_init>:
// Configure the GPIOB_MODE_R register. MODER0, MODER7, and MODER14 will each be set to 2'b01 to configure them as outputs.

#include "led.h"

void all_leds_init(void)
{
 8000298:	b480      	push	{r7}
 800029a:	af00      	add	r7, sp, #0
	// Enable clock access to port B.
	RCC->AHB1ENR |= GPIOB_CLK_EN;
 800029c:	4b0b      	ldr	r3, [pc, #44]	; (80002cc <all_leds_init+0x34>)
 800029e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002a0:	4a0a      	ldr	r2, [pc, #40]	; (80002cc <all_leds_init+0x34>)
 80002a2:	f043 0302 	orr.w	r3, r3, #2
 80002a6:	6313      	str	r3, [r2, #48]	; 0x30

	// Configure GPIOs as outputs to drive LEDs.
	GPIOB->MODER |= USER_LED1_MODER0 | USER_LED2_MODER0 | USER_LED3_MODER0;
 80002a8:	4b09      	ldr	r3, [pc, #36]	; (80002d0 <all_leds_init+0x38>)
 80002aa:	681a      	ldr	r2, [r3, #0]
 80002ac:	4908      	ldr	r1, [pc, #32]	; (80002d0 <all_leds_init+0x38>)
 80002ae:	4b09      	ldr	r3, [pc, #36]	; (80002d4 <all_leds_init+0x3c>)
 80002b0:	4313      	orrs	r3, r2
 80002b2:	600b      	str	r3, [r1, #0]
	GPIOB->MODER &= ~(USER_LED1_MODER1 | USER_LED2_MODER1 | USER_LED3_MODER1);
 80002b4:	4b06      	ldr	r3, [pc, #24]	; (80002d0 <all_leds_init+0x38>)
 80002b6:	681a      	ldr	r2, [r3, #0]
 80002b8:	4905      	ldr	r1, [pc, #20]	; (80002d0 <all_leds_init+0x38>)
 80002ba:	4b07      	ldr	r3, [pc, #28]	; (80002d8 <all_leds_init+0x40>)
 80002bc:	4013      	ands	r3, r2
 80002be:	600b      	str	r3, [r1, #0]

}
 80002c0:	bf00      	nop
 80002c2:	46bd      	mov	sp, r7
 80002c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c8:	4770      	bx	lr
 80002ca:	bf00      	nop
 80002cc:	40023800 	.word	0x40023800
 80002d0:	40020400 	.word	0x40020400
 80002d4:	10004001 	.word	0x10004001
 80002d8:	dfff7ffd 	.word	0xdfff7ffd

080002dc <main>:
#include "led.h"

static void uart_tx_callback(void);

int main()
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	af00      	add	r7, sp, #0


	all_leds_init();
 80002e0:	f7ff ffda 	bl	8000298 <all_leds_init>
	uart3_tx_interrupt_init();
 80002e4:	f000 f8c8 	bl	8000478 <uart3_tx_interrupt_init>


	while(1)
 80002e8:	e7fe      	b.n	80002e8 <main+0xc>
	...

080002ec <uart_tx_callback>:
	}

}

static void uart_tx_callback(void)
{
 80002ec:	b480      	push	{r7}
 80002ee:	af00      	add	r7, sp, #0
	// Write value into transmit data register.
	USART3->TDR = 'A';
 80002f0:	4b03      	ldr	r3, [pc, #12]	; (8000300 <uart_tx_callback+0x14>)
 80002f2:	2241      	movs	r2, #65	; 0x41
 80002f4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80002f6:	bf00      	nop
 80002f8:	46bd      	mov	sp, r7
 80002fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fe:	4770      	bx	lr
 8000300:	40004800 	.word	0x40004800

08000304 <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	af00      	add	r7, sp, #0
	// Check if TXE interrupt occurred.
	if((USART3->ISR & ISR_TXE) == ISR_TXE)
 8000308:	4b04      	ldr	r3, [pc, #16]	; (800031c <USART3_IRQHandler+0x18>)
 800030a:	69db      	ldr	r3, [r3, #28]
 800030c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000310:	2b80      	cmp	r3, #128	; 0x80
 8000312:	d101      	bne.n	8000318 <USART3_IRQHandler+0x14>
	{
		uart_tx_callback();
 8000314:	f7ff ffea 	bl	80002ec <uart_tx_callback>
	}
}
 8000318:	bf00      	nop
 800031a:	bd80      	pop	{r7, pc}
 800031c:	40004800 	.word	0x40004800

08000320 <set_ahb1_periph_clock>:
 */

#include "rcc.h"

void set_ahb1_periph_clock(uint32_t periphs)
{
 8000320:	b480      	push	{r7}
 8000322:	b083      	sub	sp, #12
 8000324:	af00      	add	r7, sp, #0
 8000326:	6078      	str	r0, [r7, #4]
	SET_BIT(RCC->AHB1ENR, periphs);
 8000328:	4b05      	ldr	r3, [pc, #20]	; (8000340 <set_ahb1_periph_clock+0x20>)
 800032a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800032c:	4904      	ldr	r1, [pc, #16]	; (8000340 <set_ahb1_periph_clock+0x20>)
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	4313      	orrs	r3, r2
 8000332:	630b      	str	r3, [r1, #48]	; 0x30
}
 8000334:	bf00      	nop
 8000336:	370c      	adds	r7, #12
 8000338:	46bd      	mov	sp, r7
 800033a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033e:	4770      	bx	lr
 8000340:	40023800 	.word	0x40023800

08000344 <set_apb1_periph_clock>:
{
	SET_BIT(RCC->AHB2ENR, periphs);
}

void set_apb1_periph_clock(uint32_t periphs)
{
 8000344:	b480      	push	{r7}
 8000346:	b083      	sub	sp, #12
 8000348:	af00      	add	r7, sp, #0
 800034a:	6078      	str	r0, [r7, #4]
	SET_BIT(RCC->APB1ENR, periphs);
 800034c:	4b05      	ldr	r3, [pc, #20]	; (8000364 <set_apb1_periph_clock+0x20>)
 800034e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000350:	4904      	ldr	r1, [pc, #16]	; (8000364 <set_apb1_periph_clock+0x20>)
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	4313      	orrs	r3, r2
 8000356:	640b      	str	r3, [r1, #64]	; 0x40
}
 8000358:	bf00      	nop
 800035a:	370c      	adds	r7, #12
 800035c:	46bd      	mov	sp, r7
 800035e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000362:	4770      	bx	lr
 8000364:	40023800 	.word	0x40023800

08000368 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000368:	b480      	push	{r7}
 800036a:	b083      	sub	sp, #12
 800036c:	af00      	add	r7, sp, #0
 800036e:	4603      	mov	r3, r0
 8000370:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000376:	2b00      	cmp	r3, #0
 8000378:	db0b      	blt.n	8000392 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800037a:	79fb      	ldrb	r3, [r7, #7]
 800037c:	f003 021f 	and.w	r2, r3, #31
 8000380:	4907      	ldr	r1, [pc, #28]	; (80003a0 <__NVIC_EnableIRQ+0x38>)
 8000382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000386:	095b      	lsrs	r3, r3, #5
 8000388:	2001      	movs	r0, #1
 800038a:	fa00 f202 	lsl.w	r2, r0, r2
 800038e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000392:	bf00      	nop
 8000394:	370c      	adds	r7, #12
 8000396:	46bd      	mov	sp, r7
 8000398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop
 80003a0:	e000e100 	.word	0xe000e100

080003a4 <uart_enable>:
	uart_write(USART3, ch);
	return ch;
}

static void uart_enable(USART_TypeDef *USARTx)
{
 80003a4:	b480      	push	{r7}
 80003a6:	b083      	sub	sp, #12
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	6078      	str	r0, [r7, #4]
	SET_BIT(USARTx->CR1, USART_CR1_UE);
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	f043 0201 	orr.w	r2, r3, #1
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	601a      	str	r2, [r3, #0]
}
 80003b8:	bf00      	nop
 80003ba:	370c      	adds	r7, #12
 80003bc:	46bd      	mov	sp, r7
 80003be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c2:	4770      	bx	lr

080003c4 <set_uart_transfer_direction>:

static void set_uart_transfer_direction(USART_TypeDef *USARTx, uint32_t TransferDirection)
{
 80003c4:	b480      	push	{r7}
 80003c6:	b083      	sub	sp, #12
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
 80003cc:	6039      	str	r1, [r7, #0]
	MODIFY_REG(USARTx->CR1, (USART_CR1_RE |USART_CR1_TE), TransferDirection);
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	f023 020c 	bic.w	r2, r3, #12
 80003d6:	683b      	ldr	r3, [r7, #0]
 80003d8:	431a      	orrs	r2, r3
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	601a      	str	r2, [r3, #0]
}
 80003de:	bf00      	nop
 80003e0:	370c      	adds	r7, #12
 80003e2:	46bd      	mov	sp, r7
 80003e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e8:	4770      	bx	lr

080003ea <compute_uart_div>:

static uint16_t compute_uart_div(uint32_t PeriphClk, uint32_t BaudRate)
{
 80003ea:	b480      	push	{r7}
 80003ec:	b083      	sub	sp, #12
 80003ee:	af00      	add	r7, sp, #0
 80003f0:	6078      	str	r0, [r7, #4]
 80003f2:	6039      	str	r1, [r7, #0]
	return (PeriphClk + (BaudRate/2U))/BaudRate;
 80003f4:	683b      	ldr	r3, [r7, #0]
 80003f6:	085a      	lsrs	r2, r3, #1
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	441a      	add	r2, r3
 80003fc:	683b      	ldr	r3, [r7, #0]
 80003fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000402:	b29b      	uxth	r3, r3
}
 8000404:	4618      	mov	r0, r3
 8000406:	370c      	adds	r7, #12
 8000408:	46bd      	mov	sp, r7
 800040a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040e:	4770      	bx	lr

08000410 <uart_set_baudrate>:

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b084      	sub	sp, #16
 8000414:	af00      	add	r7, sp, #0
 8000416:	60f8      	str	r0, [r7, #12]
 8000418:	60b9      	str	r1, [r7, #8]
 800041a:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_div(PeriphClk, BaudRate);
 800041c:	6879      	ldr	r1, [r7, #4]
 800041e:	68b8      	ldr	r0, [r7, #8]
 8000420:	f7ff ffe3 	bl	80003ea <compute_uart_div>
 8000424:	4603      	mov	r3, r0
 8000426:	461a      	mov	r2, r3
 8000428:	68fb      	ldr	r3, [r7, #12]
 800042a:	60da      	str	r2, [r3, #12]
}
 800042c:	bf00      	nop
 800042e:	3710      	adds	r7, #16
 8000430:	46bd      	mov	sp, r7
 8000432:	bd80      	pop	{r7, pc}

08000434 <config_uart_parameters>:

static void config_uart_parameters(USART_TypeDef *USARTx, uint32_t DataWidth, uint32_t Parity, uint32_t StopBits)
{
 8000434:	b480      	push	{r7}
 8000436:	b085      	sub	sp, #20
 8000438:	af00      	add	r7, sp, #0
 800043a:	60f8      	str	r0, [r7, #12]
 800043c:	60b9      	str	r1, [r7, #8]
 800043e:	607a      	str	r2, [r7, #4]
 8000440:	603b      	str	r3, [r7, #0]
	MODIFY_REG(USARTx->CR1, (USART_CR1_PS | USART_CR1_PCE | USART_CR1_M), Parity | DataWidth);
 8000442:	68fb      	ldr	r3, [r7, #12]
 8000444:	681a      	ldr	r2, [r3, #0]
 8000446:	4b0b      	ldr	r3, [pc, #44]	; (8000474 <config_uart_parameters+0x40>)
 8000448:	4013      	ands	r3, r2
 800044a:	6879      	ldr	r1, [r7, #4]
 800044c:	68ba      	ldr	r2, [r7, #8]
 800044e:	430a      	orrs	r2, r1
 8000450:	431a      	orrs	r2, r3
 8000452:	68fb      	ldr	r3, [r7, #12]
 8000454:	601a      	str	r2, [r3, #0]
	MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8000456:	68fb      	ldr	r3, [r7, #12]
 8000458:	685b      	ldr	r3, [r3, #4]
 800045a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800045e:	683b      	ldr	r3, [r7, #0]
 8000460:	431a      	orrs	r2, r3
 8000462:	68fb      	ldr	r3, [r7, #12]
 8000464:	605a      	str	r2, [r3, #4]
}
 8000466:	bf00      	nop
 8000468:	3714      	adds	r7, #20
 800046a:	46bd      	mov	sp, r7
 800046c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000470:	4770      	bx	lr
 8000472:	bf00      	nop
 8000474:	efffe9ff 	.word	0xefffe9ff

08000478 <uart3_tx_interrupt_init>:

void uart3_tx_interrupt_init(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	af00      	add	r7, sp, #0
	// To get pin ready as USART pin:
	// 1. Enable clock access to GPIOD
	set_ahb1_periph_clock(GPIODEN);
 800047c:	2008      	movs	r0, #8
 800047e:	f7ff ff4f 	bl	8000320 <set_ahb1_periph_clock>

	// 2. Set PD8 mode to alternate function
	set_pin_mode(GPIOD, UART3_TX, GPIO_ALTERNATE_MODE);
 8000482:	2202      	movs	r2, #2
 8000484:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000488:	481e      	ldr	r0, [pc, #120]	; (8000504 <uart3_tx_interrupt_init+0x8c>)
 800048a:	f7ff fed5 	bl	8000238 <set_pin_mode>

	// 3. Set alternate function type to USART for PD8
	GPIOD->AFR[1] |= (1U<<0);
 800048e:	4b1d      	ldr	r3, [pc, #116]	; (8000504 <uart3_tx_interrupt_init+0x8c>)
 8000490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000492:	4a1c      	ldr	r2, [pc, #112]	; (8000504 <uart3_tx_interrupt_init+0x8c>)
 8000494:	f043 0301 	orr.w	r3, r3, #1
 8000498:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOD->AFR[1] |= (1U<<1);
 800049a:	4b1a      	ldr	r3, [pc, #104]	; (8000504 <uart3_tx_interrupt_init+0x8c>)
 800049c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800049e:	4a19      	ldr	r2, [pc, #100]	; (8000504 <uart3_tx_interrupt_init+0x8c>)
 80004a0:	f043 0302 	orr.w	r3, r3, #2
 80004a4:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOD->AFR[1] |= (1U<<2);
 80004a6:	4b17      	ldr	r3, [pc, #92]	; (8000504 <uart3_tx_interrupt_init+0x8c>)
 80004a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004aa:	4a16      	ldr	r2, [pc, #88]	; (8000504 <uart3_tx_interrupt_init+0x8c>)
 80004ac:	f043 0304 	orr.w	r3, r3, #4
 80004b0:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOD->AFR[1] &= ~(1U<<3);
 80004b2:	4b14      	ldr	r3, [pc, #80]	; (8000504 <uart3_tx_interrupt_init+0x8c>)
 80004b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004b6:	4a13      	ldr	r2, [pc, #76]	; (8000504 <uart3_tx_interrupt_init+0x8c>)
 80004b8:	f023 0308 	bic.w	r3, r3, #8
 80004bc:	6253      	str	r3, [r2, #36]	; 0x24

	// To get USART/UART peripheral ready:
	// Enable clock to USART3 module
	set_apb1_periph_clock(USART3EN);
 80004be:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80004c2:	f7ff ff3f 	bl	8000344 <set_apb1_periph_clock>

	// Configure USART parameters
	config_uart_parameters(USART3, UART_DATAWIDTH_8B, UART_PARITY_NONE, UART_STOPBITS_1);
 80004c6:	2300      	movs	r3, #0
 80004c8:	2200      	movs	r2, #0
 80004ca:	2100      	movs	r1, #0
 80004cc:	480e      	ldr	r0, [pc, #56]	; (8000508 <uart3_tx_interrupt_init+0x90>)
 80004ce:	f7ff ffb1 	bl	8000434 <config_uart_parameters>
	set_uart_transfer_direction(USART3, USART_CR1_TE);
 80004d2:	2108      	movs	r1, #8
 80004d4:	480c      	ldr	r0, [pc, #48]	; (8000508 <uart3_tx_interrupt_init+0x90>)
 80004d6:	f7ff ff75 	bl	80003c4 <set_uart_transfer_direction>

	// Set baudrate
	uart_set_baudrate(USART3, 16000000, 57600);
 80004da:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80004de:	490b      	ldr	r1, [pc, #44]	; (800050c <uart3_tx_interrupt_init+0x94>)
 80004e0:	4809      	ldr	r0, [pc, #36]	; (8000508 <uart3_tx_interrupt_init+0x90>)
 80004e2:	f7ff ff95 	bl	8000410 <uart_set_baudrate>

	// Enable USART
	//USART3->CR1 |= USART_CR1_UE;
	uart_enable(USART3);
 80004e6:	4808      	ldr	r0, [pc, #32]	; (8000508 <uart3_tx_interrupt_init+0x90>)
 80004e8:	f7ff ff5c 	bl	80003a4 <uart_enable>

	// Enable UART TXE Interrupt.
	USART3->CR1 |= CR1_TXEIE;
 80004ec:	4b06      	ldr	r3, [pc, #24]	; (8000508 <uart3_tx_interrupt_init+0x90>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4a05      	ldr	r2, [pc, #20]	; (8000508 <uart3_tx_interrupt_init+0x90>)
 80004f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004f6:	6013      	str	r3, [r2, #0]

	// Enable UART Interrupt in NVIC.
	NVIC_EnableIRQ(USART3_IRQn);
 80004f8:	2027      	movs	r0, #39	; 0x27
 80004fa:	f7ff ff35 	bl	8000368 <__NVIC_EnableIRQ>
}
 80004fe:	bf00      	nop
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	40020c00 	.word	0x40020c00
 8000508:	40004800 	.word	0x40004800
 800050c:	00f42400 	.word	0x00f42400

08000510 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000510:	480d      	ldr	r0, [pc, #52]	; (8000548 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000512:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000514:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000518:	480c      	ldr	r0, [pc, #48]	; (800054c <LoopForever+0x6>)
  ldr r1, =_edata
 800051a:	490d      	ldr	r1, [pc, #52]	; (8000550 <LoopForever+0xa>)
  ldr r2, =_sidata
 800051c:	4a0d      	ldr	r2, [pc, #52]	; (8000554 <LoopForever+0xe>)
  movs r3, #0
 800051e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000520:	e002      	b.n	8000528 <LoopCopyDataInit>

08000522 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000522:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000524:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000526:	3304      	adds	r3, #4

08000528 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000528:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800052a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800052c:	d3f9      	bcc.n	8000522 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800052e:	4a0a      	ldr	r2, [pc, #40]	; (8000558 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000530:	4c0a      	ldr	r4, [pc, #40]	; (800055c <LoopForever+0x16>)
  movs r3, #0
 8000532:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000534:	e001      	b.n	800053a <LoopFillZerobss>

08000536 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000536:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000538:	3204      	adds	r2, #4

0800053a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800053a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800053c:	d3fb      	bcc.n	8000536 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800053e:	f000 f811 	bl	8000564 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000542:	f7ff fecb 	bl	80002dc <main>

08000546 <LoopForever>:

LoopForever:
  b LoopForever
 8000546:	e7fe      	b.n	8000546 <LoopForever>
  ldr   r0, =_estack
 8000548:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800054c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000550:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000554:	080005cc 	.word	0x080005cc
  ldr r2, =_sbss
 8000558:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800055c:	2000001c 	.word	0x2000001c

08000560 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000560:	e7fe      	b.n	8000560 <ADC_IRQHandler>
	...

08000564 <__libc_init_array>:
 8000564:	b570      	push	{r4, r5, r6, lr}
 8000566:	4d0d      	ldr	r5, [pc, #52]	; (800059c <__libc_init_array+0x38>)
 8000568:	4c0d      	ldr	r4, [pc, #52]	; (80005a0 <__libc_init_array+0x3c>)
 800056a:	1b64      	subs	r4, r4, r5
 800056c:	10a4      	asrs	r4, r4, #2
 800056e:	2600      	movs	r6, #0
 8000570:	42a6      	cmp	r6, r4
 8000572:	d109      	bne.n	8000588 <__libc_init_array+0x24>
 8000574:	4d0b      	ldr	r5, [pc, #44]	; (80005a4 <__libc_init_array+0x40>)
 8000576:	4c0c      	ldr	r4, [pc, #48]	; (80005a8 <__libc_init_array+0x44>)
 8000578:	f000 f818 	bl	80005ac <_init>
 800057c:	1b64      	subs	r4, r4, r5
 800057e:	10a4      	asrs	r4, r4, #2
 8000580:	2600      	movs	r6, #0
 8000582:	42a6      	cmp	r6, r4
 8000584:	d105      	bne.n	8000592 <__libc_init_array+0x2e>
 8000586:	bd70      	pop	{r4, r5, r6, pc}
 8000588:	f855 3b04 	ldr.w	r3, [r5], #4
 800058c:	4798      	blx	r3
 800058e:	3601      	adds	r6, #1
 8000590:	e7ee      	b.n	8000570 <__libc_init_array+0xc>
 8000592:	f855 3b04 	ldr.w	r3, [r5], #4
 8000596:	4798      	blx	r3
 8000598:	3601      	adds	r6, #1
 800059a:	e7f2      	b.n	8000582 <__libc_init_array+0x1e>
 800059c:	080005c4 	.word	0x080005c4
 80005a0:	080005c4 	.word	0x080005c4
 80005a4:	080005c4 	.word	0x080005c4
 80005a8:	080005c8 	.word	0x080005c8

080005ac <_init>:
 80005ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005ae:	bf00      	nop
 80005b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005b2:	bc08      	pop	{r3}
 80005b4:	469e      	mov	lr, r3
 80005b6:	4770      	bx	lr

080005b8 <_fini>:
 80005b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005ba:	bf00      	nop
 80005bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005be:	bc08      	pop	{r3}
 80005c0:	469e      	mov	lr, r3
 80005c2:	4770      	bx	lr
