
21_I2C_RxTx_Interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000017cc  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  080019cc  080019cc  000119cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001a24  08001a24  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08001a24  08001a24  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001a24  08001a24  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001a24  08001a24  00011a24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001a28  08001a28  00011a28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08001a2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  20000064  08001a90  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d8  08001a90  000201d8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020092  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002046  00000000  00000000  000200d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000009d9  00000000  00000000  0002211b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000240  00000000  00000000  00022af8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000018e  00000000  00000000  00022d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f113  00000000  00000000  00022ec6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00003088  00000000  00000000  00041fd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a9a80  00000000  00000000  00045061  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000ebc  00000000  00000000  000eeae4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009e  00000000  00000000  000ef9a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000064 	.word	0x20000064
 800021c:	00000000 	.word	0x00000000
 8000220:	080019b4 	.word	0x080019b4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000068 	.word	0x20000068
 800023c:	080019b4 	.word	0x080019b4

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <set_pin_mode>:
 */

#include "gpio.h"

void set_pin_mode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80002e0:	b480      	push	{r7}
 80002e2:	b089      	sub	sp, #36	; 0x24
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	60f8      	str	r0, [r7, #12]
 80002e8:	60b9      	str	r1, [r7, #8]
 80002ea:	607a      	str	r2, [r7, #4]
	// set the relevant bit in the mode register
	// CLEARMASK explanation:
	// 0b 11 << 16 (shift 0b11 to position 16 (LSB occupies bit 16, MSB occupies bit 17))
	MODIFY_REG(GPIOx->MODER, (0x3 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80002ec:	68fb      	ldr	r3, [r7, #12]
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	68ba      	ldr	r2, [r7, #8]
 80002f2:	617a      	str	r2, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80002f4:	697a      	ldr	r2, [r7, #20]
 80002f6:	fa92 f2a2 	rbit	r2, r2
 80002fa:	613a      	str	r2, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80002fc:	693a      	ldr	r2, [r7, #16]
 80002fe:	fab2 f282 	clz	r2, r2
 8000302:	b2d2      	uxtb	r2, r2
 8000304:	0052      	lsls	r2, r2, #1
 8000306:	2103      	movs	r1, #3
 8000308:	fa01 f202 	lsl.w	r2, r1, r2
 800030c:	43d2      	mvns	r2, r2
 800030e:	401a      	ands	r2, r3
 8000310:	68bb      	ldr	r3, [r7, #8]
 8000312:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000314:	69fb      	ldr	r3, [r7, #28]
 8000316:	fa93 f3a3 	rbit	r3, r3
 800031a:	61bb      	str	r3, [r7, #24]
  return result;
 800031c:	69bb      	ldr	r3, [r7, #24]
 800031e:	fab3 f383 	clz	r3, r3
 8000322:	b2db      	uxtb	r3, r3
 8000324:	005b      	lsls	r3, r3, #1
 8000326:	6879      	ldr	r1, [r7, #4]
 8000328:	fa01 f303 	lsl.w	r3, r1, r3
 800032c:	431a      	orrs	r2, r3
 800032e:	68fb      	ldr	r3, [r7, #12]
 8000330:	601a      	str	r2, [r3, #0]
}
 8000332:	bf00      	nop
 8000334:	3724      	adds	r7, #36	; 0x24
 8000336:	46bd      	mov	sp, r7
 8000338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033c:	4770      	bx	lr
	...

08000340 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000340:	b480      	push	{r7}
 8000342:	b083      	sub	sp, #12
 8000344:	af00      	add	r7, sp, #0
 8000346:	4603      	mov	r3, r0
 8000348:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800034a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800034e:	2b00      	cmp	r3, #0
 8000350:	db0b      	blt.n	800036a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000352:	79fb      	ldrb	r3, [r7, #7]
 8000354:	f003 021f 	and.w	r2, r3, #31
 8000358:	4907      	ldr	r1, [pc, #28]	; (8000378 <__NVIC_EnableIRQ+0x38>)
 800035a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800035e:	095b      	lsrs	r3, r3, #5
 8000360:	2001      	movs	r0, #1
 8000362:	fa00 f202 	lsl.w	r2, r0, r2
 8000366:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800036a:	bf00      	nop
 800036c:	370c      	adds	r7, #12
 800036e:	46bd      	mov	sp, r7
 8000370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000374:	4770      	bx	lr
 8000376:	bf00      	nop
 8000378:	e000e100 	.word	0xe000e100

0800037c <i2c2_slave_config>:
#define I2C_TIMING 0x00303D5B

static void i2c2_setOwnAddress1(uint32_t OwnAddress1, uint32_t OwnAddrSize);

void i2c2_slave_config(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	af00      	add	r7, sp, #0
	// Configure GPIO pins.
	// Enable clock access to GPIOB (so that we can use PB10, PB11 pins).
	RCC->AHB1ENR |= GPIOBEN;
 8000380:	4b52      	ldr	r3, [pc, #328]	; (80004cc <i2c2_slave_config+0x150>)
 8000382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000384:	4a51      	ldr	r2, [pc, #324]	; (80004cc <i2c2_slave_config+0x150>)
 8000386:	f043 0302 	orr.w	r3, r3, #2
 800038a:	6313      	str	r3, [r2, #48]	; 0x30

	// Configure PB10, PB11 as alternate function pins.
	// PB10
	GPIOB->MODER &= ~(1U<<20);
 800038c:	4b50      	ldr	r3, [pc, #320]	; (80004d0 <i2c2_slave_config+0x154>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	4a4f      	ldr	r2, [pc, #316]	; (80004d0 <i2c2_slave_config+0x154>)
 8000392:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000396:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (1U<<21);
 8000398:	4b4d      	ldr	r3, [pc, #308]	; (80004d0 <i2c2_slave_config+0x154>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	4a4c      	ldr	r2, [pc, #304]	; (80004d0 <i2c2_slave_config+0x154>)
 800039e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80003a2:	6013      	str	r3, [r2, #0]
	// PB11
	GPIOB->MODER &= ~(1U<<22);
 80003a4:	4b4a      	ldr	r3, [pc, #296]	; (80004d0 <i2c2_slave_config+0x154>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	4a49      	ldr	r2, [pc, #292]	; (80004d0 <i2c2_slave_config+0x154>)
 80003aa:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80003ae:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (1U<<23);
 80003b0:	4b47      	ldr	r3, [pc, #284]	; (80004d0 <i2c2_slave_config+0x154>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	4a46      	ldr	r2, [pc, #280]	; (80004d0 <i2c2_slave_config+0x154>)
 80003b6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80003ba:	6013      	str	r3, [r2, #0]

	// Configure the alternate function type as AF4.
	// PB10
	GPIOB->AFR[1] &= ~(1U<<8);
 80003bc:	4b44      	ldr	r3, [pc, #272]	; (80004d0 <i2c2_slave_config+0x154>)
 80003be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003c0:	4a43      	ldr	r2, [pc, #268]	; (80004d0 <i2c2_slave_config+0x154>)
 80003c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80003c6:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->AFR[1] &= ~(1U<<9);
 80003c8:	4b41      	ldr	r3, [pc, #260]	; (80004d0 <i2c2_slave_config+0x154>)
 80003ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003cc:	4a40      	ldr	r2, [pc, #256]	; (80004d0 <i2c2_slave_config+0x154>)
 80003ce:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80003d2:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->AFR[1] |= (1U<<10);
 80003d4:	4b3e      	ldr	r3, [pc, #248]	; (80004d0 <i2c2_slave_config+0x154>)
 80003d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003d8:	4a3d      	ldr	r2, [pc, #244]	; (80004d0 <i2c2_slave_config+0x154>)
 80003da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80003de:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->AFR[1] &= ~(1U<<11);
 80003e0:	4b3b      	ldr	r3, [pc, #236]	; (80004d0 <i2c2_slave_config+0x154>)
 80003e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003e4:	4a3a      	ldr	r2, [pc, #232]	; (80004d0 <i2c2_slave_config+0x154>)
 80003e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80003ea:	6253      	str	r3, [r2, #36]	; 0x24
	// PB11
	GPIOB->AFR[1] &= ~(1U<<12);
 80003ec:	4b38      	ldr	r3, [pc, #224]	; (80004d0 <i2c2_slave_config+0x154>)
 80003ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003f0:	4a37      	ldr	r2, [pc, #220]	; (80004d0 <i2c2_slave_config+0x154>)
 80003f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80003f6:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->AFR[1] &= ~(1U<<13);
 80003f8:	4b35      	ldr	r3, [pc, #212]	; (80004d0 <i2c2_slave_config+0x154>)
 80003fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003fc:	4a34      	ldr	r2, [pc, #208]	; (80004d0 <i2c2_slave_config+0x154>)
 80003fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000402:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->AFR[1] |= (1U<<14);
 8000404:	4b32      	ldr	r3, [pc, #200]	; (80004d0 <i2c2_slave_config+0x154>)
 8000406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000408:	4a31      	ldr	r2, [pc, #196]	; (80004d0 <i2c2_slave_config+0x154>)
 800040a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800040e:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->AFR[1] &= ~(1U<<15);
 8000410:	4b2f      	ldr	r3, [pc, #188]	; (80004d0 <i2c2_slave_config+0x154>)
 8000412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000414:	4a2e      	ldr	r2, [pc, #184]	; (80004d0 <i2c2_slave_config+0x154>)
 8000416:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800041a:	6253      	str	r3, [r2, #36]	; 0x24

	// Configure pins as open-drain.
	// PB10
	GPIOB->OTYPER |= (1U<<10);
 800041c:	4b2c      	ldr	r3, [pc, #176]	; (80004d0 <i2c2_slave_config+0x154>)
 800041e:	685b      	ldr	r3, [r3, #4]
 8000420:	4a2b      	ldr	r2, [pc, #172]	; (80004d0 <i2c2_slave_config+0x154>)
 8000422:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000426:	6053      	str	r3, [r2, #4]
	// PB11
	GPIOB->OTYPER |= (1U<<11);
 8000428:	4b29      	ldr	r3, [pc, #164]	; (80004d0 <i2c2_slave_config+0x154>)
 800042a:	685b      	ldr	r3, [r3, #4]
 800042c:	4a28      	ldr	r2, [pc, #160]	; (80004d0 <i2c2_slave_config+0x154>)
 800042e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000432:	6053      	str	r3, [r2, #4]

	// Configure pins to have pull-up resistors.
	// PB10
	GPIOB->PUPDR |= (1U<<20);
 8000434:	4b26      	ldr	r3, [pc, #152]	; (80004d0 <i2c2_slave_config+0x154>)
 8000436:	68db      	ldr	r3, [r3, #12]
 8000438:	4a25      	ldr	r2, [pc, #148]	; (80004d0 <i2c2_slave_config+0x154>)
 800043a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800043e:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR &= ~(1U<<21);
 8000440:	4b23      	ldr	r3, [pc, #140]	; (80004d0 <i2c2_slave_config+0x154>)
 8000442:	68db      	ldr	r3, [r3, #12]
 8000444:	4a22      	ldr	r2, [pc, #136]	; (80004d0 <i2c2_slave_config+0x154>)
 8000446:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800044a:	60d3      	str	r3, [r2, #12]
	// PB11
	GPIOB->PUPDR |= (1U<<22);
 800044c:	4b20      	ldr	r3, [pc, #128]	; (80004d0 <i2c2_slave_config+0x154>)
 800044e:	68db      	ldr	r3, [r3, #12]
 8000450:	4a1f      	ldr	r2, [pc, #124]	; (80004d0 <i2c2_slave_config+0x154>)
 8000452:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000456:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR &= ~(1U<<23);
 8000458:	4b1d      	ldr	r3, [pc, #116]	; (80004d0 <i2c2_slave_config+0x154>)
 800045a:	68db      	ldr	r3, [r3, #12]
 800045c:	4a1c      	ldr	r2, [pc, #112]	; (80004d0 <i2c2_slave_config+0x154>)
 800045e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000462:	60d3      	str	r3, [r2, #12]


	// Configure I2C parameters (slave).
	// Enable clock access to I2C2.
	RCC->APB1ENR |= I2C2EN;
 8000464:	4b19      	ldr	r3, [pc, #100]	; (80004cc <i2c2_slave_config+0x150>)
 8000466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000468:	4a18      	ldr	r2, [pc, #96]	; (80004cc <i2c2_slave_config+0x150>)
 800046a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800046e:	6413      	str	r3, [r2, #64]	; 0x40

	// Enable I2C2 interrupts in NVIC.
	NVIC_EnableIRQ(I2C2_EV_IRQn);
 8000470:	2021      	movs	r0, #33	; 0x21
 8000472:	f7ff ff65 	bl	8000340 <__NVIC_EnableIRQ>

	// Disable I2C2 before configuring the module.
	I2C2->CR1 &= ~(1U<<0);
 8000476:	4b17      	ldr	r3, [pc, #92]	; (80004d4 <i2c2_slave_config+0x158>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	4a16      	ldr	r2, [pc, #88]	; (80004d4 <i2c2_slave_config+0x158>)
 800047c:	f023 0301 	bic.w	r3, r3, #1
 8000480:	6013      	str	r3, [r2, #0]

	// Set Own Address since this is the slave I2C module.
	i2c2_setOwnAddress1(SLAVE_OWN_ADDRESS, 0);
 8000482:	2100      	movs	r1, #0
 8000484:	205a      	movs	r0, #90	; 0x5a
 8000486:	f000 f827 	bl	80004d8 <i2c2_setOwnAddress1>

	// Enable Own Address.
	I2C2->OAR1 |= (1U<<15);
 800048a:	4b12      	ldr	r3, [pc, #72]	; (80004d4 <i2c2_slave_config+0x158>)
 800048c:	689b      	ldr	r3, [r3, #8]
 800048e:	4a11      	ldr	r2, [pc, #68]	; (80004d4 <i2c2_slave_config+0x158>)
 8000490:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000494:	6093      	str	r3, [r2, #8]

	// Enable I2C2.
	I2C2->CR1 |= (1U<<0);
 8000496:	4b0f      	ldr	r3, [pc, #60]	; (80004d4 <i2c2_slave_config+0x158>)
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	4a0e      	ldr	r2, [pc, #56]	; (80004d4 <i2c2_slave_config+0x158>)
 800049c:	f043 0301 	orr.w	r3, r3, #1
 80004a0:	6013      	str	r3, [r2, #0]


	// Enable address (ADDR) interrupt.
	I2C2->CR1 |= (1U<<3);
 80004a2:	4b0c      	ldr	r3, [pc, #48]	; (80004d4 <i2c2_slave_config+0x158>)
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	4a0b      	ldr	r2, [pc, #44]	; (80004d4 <i2c2_slave_config+0x158>)
 80004a8:	f043 0308 	orr.w	r3, r3, #8
 80004ac:	6013      	str	r3, [r2, #0]

	// Enable NACK interrupt.
	I2C2->CR1 |= (1U<<4);
 80004ae:	4b09      	ldr	r3, [pc, #36]	; (80004d4 <i2c2_slave_config+0x158>)
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	4a08      	ldr	r2, [pc, #32]	; (80004d4 <i2c2_slave_config+0x158>)
 80004b4:	f043 0310 	orr.w	r3, r3, #16
 80004b8:	6013      	str	r3, [r2, #0]

	// Enable STOP interrupt.
	I2C2->CR1 |= (1U<<5);
 80004ba:	4b06      	ldr	r3, [pc, #24]	; (80004d4 <i2c2_slave_config+0x158>)
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	4a05      	ldr	r2, [pc, #20]	; (80004d4 <i2c2_slave_config+0x158>)
 80004c0:	f043 0320 	orr.w	r3, r3, #32
 80004c4:	6013      	str	r3, [r2, #0]

}
 80004c6:	bf00      	nop
 80004c8:	bd80      	pop	{r7, pc}
 80004ca:	bf00      	nop
 80004cc:	40023800 	.word	0x40023800
 80004d0:	40020400 	.word	0x40020400
 80004d4:	40005800 	.word	0x40005800

080004d8 <i2c2_setOwnAddress1>:

static void i2c2_setOwnAddress1(uint32_t OwnAddress1, uint32_t OwnAddrSize)
{
 80004d8:	b480      	push	{r7}
 80004da:	b083      	sub	sp, #12
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
 80004e0:	6039      	str	r1, [r7, #0]
	// Configure own address mode to be 7-bit addressing and set the own address bits for this example.
	MODIFY_REG(I2C2->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 80004e2:	4b08      	ldr	r3, [pc, #32]	; (8000504 <i2c2_setOwnAddress1+0x2c>)
 80004e4:	689a      	ldr	r2, [r3, #8]
 80004e6:	4b08      	ldr	r3, [pc, #32]	; (8000508 <i2c2_setOwnAddress1+0x30>)
 80004e8:	4013      	ands	r3, r2
 80004ea:	6879      	ldr	r1, [r7, #4]
 80004ec:	683a      	ldr	r2, [r7, #0]
 80004ee:	430a      	orrs	r2, r1
 80004f0:	4904      	ldr	r1, [pc, #16]	; (8000504 <i2c2_setOwnAddress1+0x2c>)
 80004f2:	4313      	orrs	r3, r2
 80004f4:	608b      	str	r3, [r1, #8]
}
 80004f6:	bf00      	nop
 80004f8:	370c      	adds	r7, #12
 80004fa:	46bd      	mov	sp, r7
 80004fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop
 8000504:	40005800 	.word	0x40005800
 8000508:	fffff800 	.word	0xfffff800

0800050c <i2c1_master_config>:

void i2c1_master_config(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
	// Configure GPIO pins.
	// Enable clock access to GPIOB (so that we can use PB8, PB9 pins).
	RCC->AHB1ENR |= GPIOBEN;
 8000510:	4b45      	ldr	r3, [pc, #276]	; (8000628 <i2c1_master_config+0x11c>)
 8000512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000514:	4a44      	ldr	r2, [pc, #272]	; (8000628 <i2c1_master_config+0x11c>)
 8000516:	f043 0302 	orr.w	r3, r3, #2
 800051a:	6313      	str	r3, [r2, #48]	; 0x30

	// Configure PB8, PB9 as alternate function pins.
	// PB8
	GPIOB->MODER &= ~(1U<<16);
 800051c:	4b43      	ldr	r3, [pc, #268]	; (800062c <i2c1_master_config+0x120>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	4a42      	ldr	r2, [pc, #264]	; (800062c <i2c1_master_config+0x120>)
 8000522:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000526:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (1U<<17);
 8000528:	4b40      	ldr	r3, [pc, #256]	; (800062c <i2c1_master_config+0x120>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	4a3f      	ldr	r2, [pc, #252]	; (800062c <i2c1_master_config+0x120>)
 800052e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000532:	6013      	str	r3, [r2, #0]
	// PB9
	GPIOB->MODER &= ~(1U<<18);
 8000534:	4b3d      	ldr	r3, [pc, #244]	; (800062c <i2c1_master_config+0x120>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	4a3c      	ldr	r2, [pc, #240]	; (800062c <i2c1_master_config+0x120>)
 800053a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800053e:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (1U<<19);
 8000540:	4b3a      	ldr	r3, [pc, #232]	; (800062c <i2c1_master_config+0x120>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	4a39      	ldr	r2, [pc, #228]	; (800062c <i2c1_master_config+0x120>)
 8000546:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800054a:	6013      	str	r3, [r2, #0]

	// Configure the alternate function type as AF4.
	// PB8
	GPIOB->AFR[1] &= ~(1U<<0);
 800054c:	4b37      	ldr	r3, [pc, #220]	; (800062c <i2c1_master_config+0x120>)
 800054e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000550:	4a36      	ldr	r2, [pc, #216]	; (800062c <i2c1_master_config+0x120>)
 8000552:	f023 0301 	bic.w	r3, r3, #1
 8000556:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->AFR[1] &= ~(1U<<1);
 8000558:	4b34      	ldr	r3, [pc, #208]	; (800062c <i2c1_master_config+0x120>)
 800055a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800055c:	4a33      	ldr	r2, [pc, #204]	; (800062c <i2c1_master_config+0x120>)
 800055e:	f023 0302 	bic.w	r3, r3, #2
 8000562:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->AFR[1] |= (1U<<2);
 8000564:	4b31      	ldr	r3, [pc, #196]	; (800062c <i2c1_master_config+0x120>)
 8000566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000568:	4a30      	ldr	r2, [pc, #192]	; (800062c <i2c1_master_config+0x120>)
 800056a:	f043 0304 	orr.w	r3, r3, #4
 800056e:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->AFR[1] &= ~(1U<<3);
 8000570:	4b2e      	ldr	r3, [pc, #184]	; (800062c <i2c1_master_config+0x120>)
 8000572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000574:	4a2d      	ldr	r2, [pc, #180]	; (800062c <i2c1_master_config+0x120>)
 8000576:	f023 0308 	bic.w	r3, r3, #8
 800057a:	6253      	str	r3, [r2, #36]	; 0x24
	// PB9
	GPIOB->AFR[1] &= ~(1U<<4);
 800057c:	4b2b      	ldr	r3, [pc, #172]	; (800062c <i2c1_master_config+0x120>)
 800057e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000580:	4a2a      	ldr	r2, [pc, #168]	; (800062c <i2c1_master_config+0x120>)
 8000582:	f023 0310 	bic.w	r3, r3, #16
 8000586:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->AFR[1] &= ~(1U<<5);
 8000588:	4b28      	ldr	r3, [pc, #160]	; (800062c <i2c1_master_config+0x120>)
 800058a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800058c:	4a27      	ldr	r2, [pc, #156]	; (800062c <i2c1_master_config+0x120>)
 800058e:	f023 0320 	bic.w	r3, r3, #32
 8000592:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->AFR[1] |= (1U<<6);
 8000594:	4b25      	ldr	r3, [pc, #148]	; (800062c <i2c1_master_config+0x120>)
 8000596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000598:	4a24      	ldr	r2, [pc, #144]	; (800062c <i2c1_master_config+0x120>)
 800059a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800059e:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->AFR[1] &= ~(1U<<7);
 80005a0:	4b22      	ldr	r3, [pc, #136]	; (800062c <i2c1_master_config+0x120>)
 80005a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005a4:	4a21      	ldr	r2, [pc, #132]	; (800062c <i2c1_master_config+0x120>)
 80005a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80005aa:	6253      	str	r3, [r2, #36]	; 0x24

	// Configure pins as open-drain.
	// PB8
	GPIOB->OTYPER |= (1U<<8);
 80005ac:	4b1f      	ldr	r3, [pc, #124]	; (800062c <i2c1_master_config+0x120>)
 80005ae:	685b      	ldr	r3, [r3, #4]
 80005b0:	4a1e      	ldr	r2, [pc, #120]	; (800062c <i2c1_master_config+0x120>)
 80005b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005b6:	6053      	str	r3, [r2, #4]
	// PB9
	GPIOB->OTYPER |= (1U<<9);
 80005b8:	4b1c      	ldr	r3, [pc, #112]	; (800062c <i2c1_master_config+0x120>)
 80005ba:	685b      	ldr	r3, [r3, #4]
 80005bc:	4a1b      	ldr	r2, [pc, #108]	; (800062c <i2c1_master_config+0x120>)
 80005be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005c2:	6053      	str	r3, [r2, #4]

	// Configure pins to have pull-up resistors.
	// PB8
	GPIOB->PUPDR |= (1U<<16);
 80005c4:	4b19      	ldr	r3, [pc, #100]	; (800062c <i2c1_master_config+0x120>)
 80005c6:	68db      	ldr	r3, [r3, #12]
 80005c8:	4a18      	ldr	r2, [pc, #96]	; (800062c <i2c1_master_config+0x120>)
 80005ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005ce:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR &= ~(1U<<17);
 80005d0:	4b16      	ldr	r3, [pc, #88]	; (800062c <i2c1_master_config+0x120>)
 80005d2:	68db      	ldr	r3, [r3, #12]
 80005d4:	4a15      	ldr	r2, [pc, #84]	; (800062c <i2c1_master_config+0x120>)
 80005d6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80005da:	60d3      	str	r3, [r2, #12]
	// PB9
	GPIOB->PUPDR |= (1U<<18);
 80005dc:	4b13      	ldr	r3, [pc, #76]	; (800062c <i2c1_master_config+0x120>)
 80005de:	68db      	ldr	r3, [r3, #12]
 80005e0:	4a12      	ldr	r2, [pc, #72]	; (800062c <i2c1_master_config+0x120>)
 80005e2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005e6:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR &= ~(1U<<19);
 80005e8:	4b10      	ldr	r3, [pc, #64]	; (800062c <i2c1_master_config+0x120>)
 80005ea:	68db      	ldr	r3, [r3, #12]
 80005ec:	4a0f      	ldr	r2, [pc, #60]	; (800062c <i2c1_master_config+0x120>)
 80005ee:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80005f2:	60d3      	str	r3, [r2, #12]


	// Configure I2C1 parameters (master). Master is configured to be working in polling mode so no interrupts are enabled.
	// Enable clock access to I2C1.
	RCC->APB1ENR |= I2C1EN;
 80005f4:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <i2c1_master_config+0x11c>)
 80005f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f8:	4a0b      	ldr	r2, [pc, #44]	; (8000628 <i2c1_master_config+0x11c>)
 80005fa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80005fe:	6413      	str	r3, [r2, #64]	; 0x40

	// Enable I2C1 interrupts in NVIC.
	NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000600:	201f      	movs	r0, #31
 8000602:	f7ff fe9d 	bl	8000340 <__NVIC_EnableIRQ>

	// Disable I2C1 before configuring the module.
	I2C1->CR1 &= ~(1U<<0);
 8000606:	4b0a      	ldr	r3, [pc, #40]	; (8000630 <i2c1_master_config+0x124>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	4a09      	ldr	r2, [pc, #36]	; (8000630 <i2c1_master_config+0x124>)
 800060c:	f023 0301 	bic.w	r3, r3, #1
 8000610:	6013      	str	r3, [r2, #0]

	// Set the I2C1 Timing register.
	I2C1->TIMINGR = I2C_TIMING;
 8000612:	4b07      	ldr	r3, [pc, #28]	; (8000630 <i2c1_master_config+0x124>)
 8000614:	4a07      	ldr	r2, [pc, #28]	; (8000634 <i2c1_master_config+0x128>)
 8000616:	611a      	str	r2, [r3, #16]

	// Enable I2C1.
	I2C1->CR1 |= (1U<<0);
 8000618:	4b05      	ldr	r3, [pc, #20]	; (8000630 <i2c1_master_config+0x124>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a04      	ldr	r2, [pc, #16]	; (8000630 <i2c1_master_config+0x124>)
 800061e:	f043 0301 	orr.w	r3, r3, #1
 8000622:	6013      	str	r3, [r2, #0]

}
 8000624:	bf00      	nop
 8000626:	bd80      	pop	{r7, pc}
 8000628:	40023800 	.word	0x40023800
 800062c:	40020400 	.word	0x40020400
 8000630:	40005400 	.word	0x40005400
 8000634:	00303d5b 	.word	0x00303d5b

08000638 <i2c2_get_address_matchcode>:

uint32_t i2c2_get_address_matchcode(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
	return (uint32_t) (READ_BIT(I2C2->ISR, I2C_ISR_ADDCODE) >> I2C_ISR_ADDCODE_Pos << 1);
 800063c:	4b05      	ldr	r3, [pc, #20]	; (8000654 <i2c2_get_address_matchcode+0x1c>)
 800063e:	699b      	ldr	r3, [r3, #24]
 8000640:	0c5b      	lsrs	r3, r3, #17
 8000642:	005b      	lsls	r3, r3, #1
 8000644:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
}
 8000648:	4618      	mov	r0, r3
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	40005800 	.word	0x40005800

08000658 <main>:

static void handle_i2c_master(void);


int main()
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
	uart3_tx_init();
 800065c:	f000 fa06 	bl	8000a6c <uart3_tx_init>
	i2c2_slave_config();
 8000660:	f7ff fe8c 	bl	800037c <i2c2_slave_config>
	i2c1_master_config();
 8000664:	f7ff ff52 	bl	800050c <i2c1_master_config>

	handle_i2c_master();
 8000668:	f000 f802 	bl	8000670 <handle_i2c_master>

	while(1)
 800066c:	e7fe      	b.n	800066c <main+0x14>
	...

08000670 <handle_i2c_master>:
}

// This function configures the master with information regarding the slave it
// will be communicating with and how that communication should happen.
static void handle_i2c_master(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
	// Set the slave address that the master will communicate with.
	I2C1->CR2 |= SLAVE_OWN_ADDRESS;
 8000674:	4b20      	ldr	r3, [pc, #128]	; (80006f8 <handle_i2c_master+0x88>)
 8000676:	685b      	ldr	r3, [r3, #4]
 8000678:	4a1f      	ldr	r2, [pc, #124]	; (80006f8 <handle_i2c_master+0x88>)
 800067a:	f043 035a 	orr.w	r3, r3, #90	; 0x5a
 800067e:	6053      	str	r3, [r2, #4]

	// Set the slave address mode to 7-bit mode in master.
	I2C1->CR2 &= ~(1U<<11);
 8000680:	4b1d      	ldr	r3, [pc, #116]	; (80006f8 <handle_i2c_master+0x88>)
 8000682:	685b      	ldr	r3, [r3, #4]
 8000684:	4a1c      	ldr	r2, [pc, #112]	; (80006f8 <handle_i2c_master+0x88>)
 8000686:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800068a:	6053      	str	r3, [r2, #4]

	// Set the transfer size in master.
	I2C1->CR2 |= (tx_size<<16);
 800068c:	4b1a      	ldr	r3, [pc, #104]	; (80006f8 <handle_i2c_master+0x88>)
 800068e:	685b      	ldr	r3, [r3, #4]
 8000690:	4a1a      	ldr	r2, [pc, #104]	; (80006fc <handle_i2c_master+0x8c>)
 8000692:	7812      	ldrb	r2, [r2, #0]
 8000694:	0412      	lsls	r2, r2, #16
 8000696:	4611      	mov	r1, r2
 8000698:	4a17      	ldr	r2, [pc, #92]	; (80006f8 <handle_i2c_master+0x88>)
 800069a:	430b      	orrs	r3, r1
 800069c:	6053      	str	r3, [r2, #4]

	// Enable automatic end mode to send out a stop condition when all bytes are transmitted.
	I2C1->CR2 |= (1U<<25);
 800069e:	4b16      	ldr	r3, [pc, #88]	; (80006f8 <handle_i2c_master+0x88>)
 80006a0:	685b      	ldr	r3, [r3, #4]
 80006a2:	4a15      	ldr	r2, [pc, #84]	; (80006f8 <handle_i2c_master+0x88>)
 80006a4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006a8:	6053      	str	r3, [r2, #4]

	// Generate start condition.
	I2C1->CR2 |= (1U<<13);
 80006aa:	4b13      	ldr	r3, [pc, #76]	; (80006f8 <handle_i2c_master+0x88>)
 80006ac:	685b      	ldr	r3, [r3, #4]
 80006ae:	4a12      	ldr	r2, [pc, #72]	; (80006f8 <handle_i2c_master+0x88>)
 80006b0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80006b4:	6053      	str	r3, [r2, #4]

	// Loop until the stop flag is raised.
	while(!(I2C1->ISR & (1U<<5)))
 80006b6:	e00d      	b.n	80006d4 <handle_i2c_master+0x64>
	{
		// Check TXIS flag value in ISR register.
		if(I2C1->ISR & (1U<<1))
 80006b8:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <handle_i2c_master+0x88>)
 80006ba:	699b      	ldr	r3, [r3, #24]
 80006bc:	f003 0302 	and.w	r3, r3, #2
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d007      	beq.n	80006d4 <handle_i2c_master+0x64>
		{
			// Write data into the Transmit Data Register.
			// TXIS flag is cleared by writing data in TXDR register.
			I2C1->TXDR = (*p_tx_buff++); // Increments through the memory space where our transmit buffer is stored.
 80006c4:	4b0e      	ldr	r3, [pc, #56]	; (8000700 <handle_i2c_master+0x90>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	1c5a      	adds	r2, r3, #1
 80006ca:	490d      	ldr	r1, [pc, #52]	; (8000700 <handle_i2c_master+0x90>)
 80006cc:	600a      	str	r2, [r1, #0]
 80006ce:	781a      	ldrb	r2, [r3, #0]
 80006d0:	4b09      	ldr	r3, [pc, #36]	; (80006f8 <handle_i2c_master+0x88>)
 80006d2:	629a      	str	r2, [r3, #40]	; 0x28
	while(!(I2C1->ISR & (1U<<5)))
 80006d4:	4b08      	ldr	r3, [pc, #32]	; (80006f8 <handle_i2c_master+0x88>)
 80006d6:	699b      	ldr	r3, [r3, #24]
 80006d8:	f003 0320 	and.w	r3, r3, #32
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d0eb      	beq.n	80006b8 <handle_i2c_master+0x48>
		}
	}

	// Clear the stop flag.
	I2C1->ICR |= (1U<<5);
 80006e0:	4b05      	ldr	r3, [pc, #20]	; (80006f8 <handle_i2c_master+0x88>)
 80006e2:	69db      	ldr	r3, [r3, #28]
 80006e4:	4a04      	ldr	r2, [pc, #16]	; (80006f8 <handle_i2c_master+0x88>)
 80006e6:	f043 0320 	orr.w	r3, r3, #32
 80006ea:	61d3      	str	r3, [r2, #28]
}
 80006ec:	bf00      	nop
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	40005400 	.word	0x40005400
 80006fc:	20000004 	.word	0x20000004
 8000700:	20000000 	.word	0x20000000

08000704 <slave_reception_callback>:


void slave_reception_callback(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
	// Read character in Receive Data register. RXNE flag is cleared by reading data in RXDR register.
	// Read first 8 bits.
	rx_buff[rx_idx++] = (I2C2->RXDR & 0xFF);
 8000708:	4b08      	ldr	r3, [pc, #32]	; (800072c <slave_reception_callback+0x28>)
 800070a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800070c:	4b08      	ldr	r3, [pc, #32]	; (8000730 <slave_reception_callback+0x2c>)
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	b2db      	uxtb	r3, r3
 8000712:	1c5a      	adds	r2, r3, #1
 8000714:	b2d0      	uxtb	r0, r2
 8000716:	4a06      	ldr	r2, [pc, #24]	; (8000730 <slave_reception_callback+0x2c>)
 8000718:	7010      	strb	r0, [r2, #0]
 800071a:	461a      	mov	r2, r3
 800071c:	b2c9      	uxtb	r1, r1
 800071e:	4b05      	ldr	r3, [pc, #20]	; (8000734 <slave_reception_callback+0x30>)
 8000720:	5499      	strb	r1, [r3, r2]
}
 8000722:	bf00      	nop
 8000724:	46bd      	mov	sp, r7
 8000726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072a:	4770      	bx	lr
 800072c:	40005800 	.word	0x40005800
 8000730:	20000086 	.word	0x20000086
 8000734:	20000080 	.word	0x20000080

08000738 <slave_complete_callback>:

void slave_complete_callback(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
	printf("Transmission Complete...\n\r");
 800073c:	4802      	ldr	r0, [pc, #8]	; (8000748 <slave_complete_callback+0x10>)
 800073e:	f000 fac3 	bl	8000cc8 <iprintf>
}
 8000742:	bf00      	nop
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	080019cc 	.word	0x080019cc

0800074c <I2C2_EV_IRQHandler>:

void I2C2_EV_IRQHandler(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
	// Check the address (ADDR) flag in the interrupt and status register (ISR).
	if(I2C2->ISR & (1U<<3))
 8000750:	4b18      	ldr	r3, [pc, #96]	; (80007b4 <I2C2_EV_IRQHandler+0x68>)
 8000752:	699b      	ldr	r3, [r3, #24]
 8000754:	f003 0308 	and.w	r3, r3, #8
 8000758:	2b00      	cmp	r3, #0
 800075a:	d011      	beq.n	8000780 <I2C2_EV_IRQHandler+0x34>
	{
		// Verify the address match with OWN Slave address.
		if(i2c2_get_address_matchcode() == SLAVE_OWN_ADDRESS)
 800075c:	f7ff ff6c 	bl	8000638 <i2c2_get_address_matchcode>
 8000760:	4603      	mov	r3, r0
 8000762:	2b5a      	cmp	r3, #90	; 0x5a
 8000764:	d123      	bne.n	80007ae <I2C2_EV_IRQHandler+0x62>
		{
			// Clearn the ADDR flag in interrupt clear register.
			I2C2->ICR |= (1U<<3);
 8000766:	4b13      	ldr	r3, [pc, #76]	; (80007b4 <I2C2_EV_IRQHandler+0x68>)
 8000768:	69db      	ldr	r3, [r3, #28]
 800076a:	4a12      	ldr	r2, [pc, #72]	; (80007b4 <I2C2_EV_IRQHandler+0x68>)
 800076c:	f043 0308 	orr.w	r3, r3, #8
 8000770:	61d3      	str	r3, [r2, #28]

			// Enable receive interrupt.
			I2C2->CR1 |= (1U<<2);
 8000772:	4b10      	ldr	r3, [pc, #64]	; (80007b4 <I2C2_EV_IRQHandler+0x68>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	4a0f      	ldr	r2, [pc, #60]	; (80007b4 <I2C2_EV_IRQHandler+0x68>)
 8000778:	f043 0304 	orr.w	r3, r3, #4
 800077c:	6013      	str	r3, [r2, #0]
	}
	else
	{
		// Implement error code...
	}
}
 800077e:	e016      	b.n	80007ae <I2C2_EV_IRQHandler+0x62>
	else if(I2C2->ISR & (1U<<2))
 8000780:	4b0c      	ldr	r3, [pc, #48]	; (80007b4 <I2C2_EV_IRQHandler+0x68>)
 8000782:	699b      	ldr	r3, [r3, #24]
 8000784:	f003 0304 	and.w	r3, r3, #4
 8000788:	2b00      	cmp	r3, #0
 800078a:	d002      	beq.n	8000792 <I2C2_EV_IRQHandler+0x46>
		slave_reception_callback();
 800078c:	f7ff ffba 	bl	8000704 <slave_reception_callback>
}
 8000790:	e00d      	b.n	80007ae <I2C2_EV_IRQHandler+0x62>
	else if(I2C2->ISR & (1U<<5))
 8000792:	4b08      	ldr	r3, [pc, #32]	; (80007b4 <I2C2_EV_IRQHandler+0x68>)
 8000794:	699b      	ldr	r3, [r3, #24]
 8000796:	f003 0320 	and.w	r3, r3, #32
 800079a:	2b00      	cmp	r3, #0
 800079c:	d007      	beq.n	80007ae <I2C2_EV_IRQHandler+0x62>
		I2C2->ICR |= (1U<<5);
 800079e:	4b05      	ldr	r3, [pc, #20]	; (80007b4 <I2C2_EV_IRQHandler+0x68>)
 80007a0:	69db      	ldr	r3, [r3, #28]
 80007a2:	4a04      	ldr	r2, [pc, #16]	; (80007b4 <I2C2_EV_IRQHandler+0x68>)
 80007a4:	f043 0320 	orr.w	r3, r3, #32
 80007a8:	61d3      	str	r3, [r2, #28]
		slave_complete_callback();
 80007aa:	f7ff ffc5 	bl	8000738 <slave_complete_callback>
}
 80007ae:	bf00      	nop
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	40005800 	.word	0x40005800

080007b8 <set_ahb1_periph_clock>:
 */

#include "rcc.h"

void set_ahb1_periph_clock(uint32_t periphs)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
	SET_BIT(RCC->AHB1ENR, periphs);
 80007c0:	4b05      	ldr	r3, [pc, #20]	; (80007d8 <set_ahb1_periph_clock+0x20>)
 80007c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007c4:	4904      	ldr	r1, [pc, #16]	; (80007d8 <set_ahb1_periph_clock+0x20>)
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	4313      	orrs	r3, r2
 80007ca:	630b      	str	r3, [r1, #48]	; 0x30
}
 80007cc:	bf00      	nop
 80007ce:	370c      	adds	r7, #12
 80007d0:	46bd      	mov	sp, r7
 80007d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d6:	4770      	bx	lr
 80007d8:	40023800 	.word	0x40023800

080007dc <set_apb1_periph_clock>:
{
	SET_BIT(RCC->AHB2ENR, periphs);
}

void set_apb1_periph_clock(uint32_t periphs)
{
 80007dc:	b480      	push	{r7}
 80007de:	b083      	sub	sp, #12
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
	SET_BIT(RCC->APB1ENR, periphs);
 80007e4:	4b05      	ldr	r3, [pc, #20]	; (80007fc <set_apb1_periph_clock+0x20>)
 80007e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80007e8:	4904      	ldr	r1, [pc, #16]	; (80007fc <set_apb1_periph_clock+0x20>)
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	4313      	orrs	r3, r2
 80007ee:	640b      	str	r3, [r1, #64]	; 0x40
}
 80007f0:	bf00      	nop
 80007f2:	370c      	adds	r7, #12
 80007f4:	46bd      	mov	sp, r7
 80007f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fa:	4770      	bx	lr
 80007fc:	40023800 	.word	0x40023800

08000800 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b086      	sub	sp, #24
 8000804:	af00      	add	r7, sp, #0
 8000806:	60f8      	str	r0, [r7, #12]
 8000808:	60b9      	str	r1, [r7, #8]
 800080a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800080c:	2300      	movs	r3, #0
 800080e:	617b      	str	r3, [r7, #20]
 8000810:	e00a      	b.n	8000828 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000812:	f3af 8000 	nop.w
 8000816:	4601      	mov	r1, r0
 8000818:	68bb      	ldr	r3, [r7, #8]
 800081a:	1c5a      	adds	r2, r3, #1
 800081c:	60ba      	str	r2, [r7, #8]
 800081e:	b2ca      	uxtb	r2, r1
 8000820:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000822:	697b      	ldr	r3, [r7, #20]
 8000824:	3301      	adds	r3, #1
 8000826:	617b      	str	r3, [r7, #20]
 8000828:	697a      	ldr	r2, [r7, #20]
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	429a      	cmp	r2, r3
 800082e:	dbf0      	blt.n	8000812 <_read+0x12>
  }

  return len;
 8000830:	687b      	ldr	r3, [r7, #4]
}
 8000832:	4618      	mov	r0, r3
 8000834:	3718      	adds	r7, #24
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}

0800083a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800083a:	b580      	push	{r7, lr}
 800083c:	b086      	sub	sp, #24
 800083e:	af00      	add	r7, sp, #0
 8000840:	60f8      	str	r0, [r7, #12]
 8000842:	60b9      	str	r1, [r7, #8]
 8000844:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000846:	2300      	movs	r3, #0
 8000848:	617b      	str	r3, [r7, #20]
 800084a:	e009      	b.n	8000860 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800084c:	68bb      	ldr	r3, [r7, #8]
 800084e:	1c5a      	adds	r2, r3, #1
 8000850:	60ba      	str	r2, [r7, #8]
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	4618      	mov	r0, r3
 8000856:	f000 f88d 	bl	8000974 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800085a:	697b      	ldr	r3, [r7, #20]
 800085c:	3301      	adds	r3, #1
 800085e:	617b      	str	r3, [r7, #20]
 8000860:	697a      	ldr	r2, [r7, #20]
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	429a      	cmp	r2, r3
 8000866:	dbf1      	blt.n	800084c <_write+0x12>
  }
  return len;
 8000868:	687b      	ldr	r3, [r7, #4]
}
 800086a:	4618      	mov	r0, r3
 800086c:	3718      	adds	r7, #24
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}

08000872 <_close>:

int _close(int file)
{
 8000872:	b480      	push	{r7}
 8000874:	b083      	sub	sp, #12
 8000876:	af00      	add	r7, sp, #0
 8000878:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800087a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800087e:	4618      	mov	r0, r3
 8000880:	370c      	adds	r7, #12
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr

0800088a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800088a:	b480      	push	{r7}
 800088c:	b083      	sub	sp, #12
 800088e:	af00      	add	r7, sp, #0
 8000890:	6078      	str	r0, [r7, #4]
 8000892:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800089a:	605a      	str	r2, [r3, #4]
  return 0;
 800089c:	2300      	movs	r3, #0
}
 800089e:	4618      	mov	r0, r3
 80008a0:	370c      	adds	r7, #12
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr

080008aa <_isatty>:

int _isatty(int file)
{
 80008aa:	b480      	push	{r7}
 80008ac:	b083      	sub	sp, #12
 80008ae:	af00      	add	r7, sp, #0
 80008b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80008b2:	2301      	movs	r3, #1
}
 80008b4:	4618      	mov	r0, r3
 80008b6:	370c      	adds	r7, #12
 80008b8:	46bd      	mov	sp, r7
 80008ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008be:	4770      	bx	lr

080008c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b085      	sub	sp, #20
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	60f8      	str	r0, [r7, #12]
 80008c8:	60b9      	str	r1, [r7, #8]
 80008ca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80008cc:	2300      	movs	r3, #0
}
 80008ce:	4618      	mov	r0, r3
 80008d0:	3714      	adds	r7, #20
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr
	...

080008dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b086      	sub	sp, #24
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008e4:	4a14      	ldr	r2, [pc, #80]	; (8000938 <_sbrk+0x5c>)
 80008e6:	4b15      	ldr	r3, [pc, #84]	; (800093c <_sbrk+0x60>)
 80008e8:	1ad3      	subs	r3, r2, r3
 80008ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008ec:	697b      	ldr	r3, [r7, #20]
 80008ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008f0:	4b13      	ldr	r3, [pc, #76]	; (8000940 <_sbrk+0x64>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d102      	bne.n	80008fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008f8:	4b11      	ldr	r3, [pc, #68]	; (8000940 <_sbrk+0x64>)
 80008fa:	4a12      	ldr	r2, [pc, #72]	; (8000944 <_sbrk+0x68>)
 80008fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008fe:	4b10      	ldr	r3, [pc, #64]	; (8000940 <_sbrk+0x64>)
 8000900:	681a      	ldr	r2, [r3, #0]
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	4413      	add	r3, r2
 8000906:	693a      	ldr	r2, [r7, #16]
 8000908:	429a      	cmp	r2, r3
 800090a:	d207      	bcs.n	800091c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800090c:	f000 fa80 	bl	8000e10 <__errno>
 8000910:	4603      	mov	r3, r0
 8000912:	220c      	movs	r2, #12
 8000914:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000916:	f04f 33ff 	mov.w	r3, #4294967295
 800091a:	e009      	b.n	8000930 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800091c:	4b08      	ldr	r3, [pc, #32]	; (8000940 <_sbrk+0x64>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000922:	4b07      	ldr	r3, [pc, #28]	; (8000940 <_sbrk+0x64>)
 8000924:	681a      	ldr	r2, [r3, #0]
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	4413      	add	r3, r2
 800092a:	4a05      	ldr	r2, [pc, #20]	; (8000940 <_sbrk+0x64>)
 800092c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800092e:	68fb      	ldr	r3, [r7, #12]
}
 8000930:	4618      	mov	r0, r3
 8000932:	3718      	adds	r7, #24
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	20080000 	.word	0x20080000
 800093c:	00000400 	.word	0x00000400
 8000940:	20000088 	.word	0x20000088
 8000944:	200001d8 	.word	0x200001d8

08000948 <uart_write>:
#define		GPIO_ALTERNATE_MODE 	0x2

#define CR1_RXNEIE (1U<<5)

void uart_write(USART_TypeDef *USARTx, uint8_t value)
{
 8000948:	b480      	push	{r7}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
 8000950:	460b      	mov	r3, r1
 8000952:	70fb      	strb	r3, [r7, #3]
	// Make sure transmit data register is empty
	while (!(USARTx->ISR & USART_ISR_TXE)) {}
 8000954:	bf00      	nop
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	69db      	ldr	r3, [r3, #28]
 800095a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800095e:	2b00      	cmp	r3, #0
 8000960:	d0f9      	beq.n	8000956 <uart_write+0xe>

	// Write value into transmit data register
	USARTx->TDR = value;
 8000962:	78fa      	ldrb	r2, [r7, #3]
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	629a      	str	r2, [r3, #40]	; 0x28

}
 8000968:	bf00      	nop
 800096a:	370c      	adds	r7, #12
 800096c:	46bd      	mov	sp, r7
 800096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000972:	4770      	bx	lr

08000974 <__io_putchar>:

	// Read value out of receive data register
	return (READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
}

int __io_putchar(int ch) {
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
	uart_write(USART3, ch);
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	b2db      	uxtb	r3, r3
 8000980:	4619      	mov	r1, r3
 8000982:	4804      	ldr	r0, [pc, #16]	; (8000994 <__io_putchar+0x20>)
 8000984:	f7ff ffe0 	bl	8000948 <uart_write>
	return ch;
 8000988:	687b      	ldr	r3, [r7, #4]
}
 800098a:	4618      	mov	r0, r3
 800098c:	3708      	adds	r7, #8
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	40004800 	.word	0x40004800

08000998 <uart_enable>:

static void uart_enable(USART_TypeDef *USARTx)
{
 8000998:	b480      	push	{r7}
 800099a:	b083      	sub	sp, #12
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
	SET_BIT(USARTx->CR1, USART_CR1_UE);
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	f043 0201 	orr.w	r2, r3, #1
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	601a      	str	r2, [r3, #0]
}
 80009ac:	bf00      	nop
 80009ae:	370c      	adds	r7, #12
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr

080009b8 <set_uart_transfer_direction>:

static void set_uart_transfer_direction(USART_TypeDef *USARTx, uint32_t TransferDirection)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b083      	sub	sp, #12
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
 80009c0:	6039      	str	r1, [r7, #0]
	MODIFY_REG(USARTx->CR1, (USART_CR1_RE |USART_CR1_TE), TransferDirection);
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	f023 020c 	bic.w	r2, r3, #12
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	431a      	orrs	r2, r3
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	601a      	str	r2, [r3, #0]
}
 80009d2:	bf00      	nop
 80009d4:	370c      	adds	r7, #12
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr

080009de <compute_uart_div>:

static uint16_t compute_uart_div(uint32_t PeriphClk, uint32_t BaudRate)
{
 80009de:	b480      	push	{r7}
 80009e0:	b083      	sub	sp, #12
 80009e2:	af00      	add	r7, sp, #0
 80009e4:	6078      	str	r0, [r7, #4]
 80009e6:	6039      	str	r1, [r7, #0]
	return (PeriphClk + (BaudRate/2U))/BaudRate;
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	085a      	lsrs	r2, r3, #1
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	441a      	add	r2, r3
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80009f6:	b29b      	uxth	r3, r3
}
 80009f8:	4618      	mov	r0, r3
 80009fa:	370c      	adds	r7, #12
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr

08000a04 <uart_set_baudrate>:

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b084      	sub	sp, #16
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	60f8      	str	r0, [r7, #12]
 8000a0c:	60b9      	str	r1, [r7, #8]
 8000a0e:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_div(PeriphClk, BaudRate);
 8000a10:	6879      	ldr	r1, [r7, #4]
 8000a12:	68b8      	ldr	r0, [r7, #8]
 8000a14:	f7ff ffe3 	bl	80009de <compute_uart_div>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	461a      	mov	r2, r3
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	60da      	str	r2, [r3, #12]
}
 8000a20:	bf00      	nop
 8000a22:	3710      	adds	r7, #16
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}

08000a28 <config_uart_parameters>:

static void config_uart_parameters(USART_TypeDef *USARTx, uint32_t DataWidth, uint32_t Parity, uint32_t StopBits)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b085      	sub	sp, #20
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	60f8      	str	r0, [r7, #12]
 8000a30:	60b9      	str	r1, [r7, #8]
 8000a32:	607a      	str	r2, [r7, #4]
 8000a34:	603b      	str	r3, [r7, #0]
	MODIFY_REG(USARTx->CR1, (USART_CR1_PS | USART_CR1_PCE | USART_CR1_M), Parity | DataWidth);
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	681a      	ldr	r2, [r3, #0]
 8000a3a:	4b0b      	ldr	r3, [pc, #44]	; (8000a68 <config_uart_parameters+0x40>)
 8000a3c:	4013      	ands	r3, r2
 8000a3e:	6879      	ldr	r1, [r7, #4]
 8000a40:	68ba      	ldr	r2, [r7, #8]
 8000a42:	430a      	orrs	r2, r1
 8000a44:	431a      	orrs	r2, r3
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	601a      	str	r2, [r3, #0]
	MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	685b      	ldr	r3, [r3, #4]
 8000a4e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	431a      	orrs	r2, r3
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	605a      	str	r2, [r3, #4]
}
 8000a5a:	bf00      	nop
 8000a5c:	3714      	adds	r7, #20
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	efffe9ff 	.word	0xefffe9ff

08000a6c <uart3_tx_init>:
	// Enable UART interrupt in NVIC.
	NVIC_EnableIRQ(USART3_IRQn);
}

void uart3_tx_init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
	// To get pin ready as USART pin:
	// 1. Enable clock access to GPIOD
	set_ahb1_periph_clock(GPIODEN);
 8000a70:	2008      	movs	r0, #8
 8000a72:	f7ff fea1 	bl	80007b8 <set_ahb1_periph_clock>

	// 2. Set PD8 mode to alternate function
	set_pin_mode(GPIOD, UART3_TX, GPIO_ALTERNATE_MODE);
 8000a76:	2202      	movs	r2, #2
 8000a78:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a7c:	4819      	ldr	r0, [pc, #100]	; (8000ae4 <uart3_tx_init+0x78>)
 8000a7e:	f7ff fc2f 	bl	80002e0 <set_pin_mode>

	// 3. Set alternate function type to USART for PD8
	GPIOD->AFR[1] |= (1U<<0);
 8000a82:	4b18      	ldr	r3, [pc, #96]	; (8000ae4 <uart3_tx_init+0x78>)
 8000a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a86:	4a17      	ldr	r2, [pc, #92]	; (8000ae4 <uart3_tx_init+0x78>)
 8000a88:	f043 0301 	orr.w	r3, r3, #1
 8000a8c:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOD->AFR[1] |= (1U<<1);
 8000a8e:	4b15      	ldr	r3, [pc, #84]	; (8000ae4 <uart3_tx_init+0x78>)
 8000a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a92:	4a14      	ldr	r2, [pc, #80]	; (8000ae4 <uart3_tx_init+0x78>)
 8000a94:	f043 0302 	orr.w	r3, r3, #2
 8000a98:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOD->AFR[1] |= (1U<<2);
 8000a9a:	4b12      	ldr	r3, [pc, #72]	; (8000ae4 <uart3_tx_init+0x78>)
 8000a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a9e:	4a11      	ldr	r2, [pc, #68]	; (8000ae4 <uart3_tx_init+0x78>)
 8000aa0:	f043 0304 	orr.w	r3, r3, #4
 8000aa4:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOD->AFR[1] &= ~(1U<<3);
 8000aa6:	4b0f      	ldr	r3, [pc, #60]	; (8000ae4 <uart3_tx_init+0x78>)
 8000aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000aaa:	4a0e      	ldr	r2, [pc, #56]	; (8000ae4 <uart3_tx_init+0x78>)
 8000aac:	f023 0308 	bic.w	r3, r3, #8
 8000ab0:	6253      	str	r3, [r2, #36]	; 0x24

	// To get USART/UART peripheral ready:
	// Enable clock to USART3 module
	set_apb1_periph_clock(USART3EN);
 8000ab2:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000ab6:	f7ff fe91 	bl	80007dc <set_apb1_periph_clock>

	// Configure USART parameters
	config_uart_parameters(USART3, UART_DATAWIDTH_8B, UART_PARITY_NONE, UART_STOPBITS_1);
 8000aba:	2300      	movs	r3, #0
 8000abc:	2200      	movs	r2, #0
 8000abe:	2100      	movs	r1, #0
 8000ac0:	4809      	ldr	r0, [pc, #36]	; (8000ae8 <uart3_tx_init+0x7c>)
 8000ac2:	f7ff ffb1 	bl	8000a28 <config_uart_parameters>
	set_uart_transfer_direction(USART3, USART_CR1_TE);
 8000ac6:	2108      	movs	r1, #8
 8000ac8:	4807      	ldr	r0, [pc, #28]	; (8000ae8 <uart3_tx_init+0x7c>)
 8000aca:	f7ff ff75 	bl	80009b8 <set_uart_transfer_direction>

	// Set baudrate
	uart_set_baudrate(USART3, 16000000, 57600);
 8000ace:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000ad2:	4906      	ldr	r1, [pc, #24]	; (8000aec <uart3_tx_init+0x80>)
 8000ad4:	4804      	ldr	r0, [pc, #16]	; (8000ae8 <uart3_tx_init+0x7c>)
 8000ad6:	f7ff ff95 	bl	8000a04 <uart_set_baudrate>

	// Enable USART
	//USART3->CR1 |= USART_CR1_UE;
	uart_enable(USART3);
 8000ada:	4803      	ldr	r0, [pc, #12]	; (8000ae8 <uart3_tx_init+0x7c>)
 8000adc:	f7ff ff5c 	bl	8000998 <uart_enable>
}
 8000ae0:	bf00      	nop
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	40020c00 	.word	0x40020c00
 8000ae8:	40004800 	.word	0x40004800
 8000aec:	00f42400 	.word	0x00f42400

08000af0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000af0:	480d      	ldr	r0, [pc, #52]	; (8000b28 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000af2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000af4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000af8:	480c      	ldr	r0, [pc, #48]	; (8000b2c <LoopForever+0x6>)
  ldr r1, =_edata
 8000afa:	490d      	ldr	r1, [pc, #52]	; (8000b30 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000afc:	4a0d      	ldr	r2, [pc, #52]	; (8000b34 <LoopForever+0xe>)
  movs r3, #0
 8000afe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b00:	e002      	b.n	8000b08 <LoopCopyDataInit>

08000b02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b06:	3304      	adds	r3, #4

08000b08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b0c:	d3f9      	bcc.n	8000b02 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b0e:	4a0a      	ldr	r2, [pc, #40]	; (8000b38 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b10:	4c0a      	ldr	r4, [pc, #40]	; (8000b3c <LoopForever+0x16>)
  movs r3, #0
 8000b12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b14:	e001      	b.n	8000b1a <LoopFillZerobss>

08000b16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b18:	3204      	adds	r2, #4

08000b1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b1c:	d3fb      	bcc.n	8000b16 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b1e:	f000 f97d 	bl	8000e1c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b22:	f7ff fd99 	bl	8000658 <main>

08000b26 <LoopForever>:

LoopForever:
  b LoopForever
 8000b26:	e7fe      	b.n	8000b26 <LoopForever>
  ldr   r0, =_estack
 8000b28:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000b2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b30:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000b34:	08001a2c 	.word	0x08001a2c
  ldr r2, =_sbss
 8000b38:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000b3c:	200001d8 	.word	0x200001d8

08000b40 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b40:	e7fe      	b.n	8000b40 <ADC_IRQHandler>
	...

08000b44 <std>:
 8000b44:	2300      	movs	r3, #0
 8000b46:	b510      	push	{r4, lr}
 8000b48:	4604      	mov	r4, r0
 8000b4a:	e9c0 3300 	strd	r3, r3, [r0]
 8000b4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000b52:	6083      	str	r3, [r0, #8]
 8000b54:	8181      	strh	r1, [r0, #12]
 8000b56:	6643      	str	r3, [r0, #100]	; 0x64
 8000b58:	81c2      	strh	r2, [r0, #14]
 8000b5a:	6183      	str	r3, [r0, #24]
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	2208      	movs	r2, #8
 8000b60:	305c      	adds	r0, #92	; 0x5c
 8000b62:	f000 f906 	bl	8000d72 <memset>
 8000b66:	4b0d      	ldr	r3, [pc, #52]	; (8000b9c <std+0x58>)
 8000b68:	6263      	str	r3, [r4, #36]	; 0x24
 8000b6a:	4b0d      	ldr	r3, [pc, #52]	; (8000ba0 <std+0x5c>)
 8000b6c:	62a3      	str	r3, [r4, #40]	; 0x28
 8000b6e:	4b0d      	ldr	r3, [pc, #52]	; (8000ba4 <std+0x60>)
 8000b70:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000b72:	4b0d      	ldr	r3, [pc, #52]	; (8000ba8 <std+0x64>)
 8000b74:	6323      	str	r3, [r4, #48]	; 0x30
 8000b76:	4b0d      	ldr	r3, [pc, #52]	; (8000bac <std+0x68>)
 8000b78:	6224      	str	r4, [r4, #32]
 8000b7a:	429c      	cmp	r4, r3
 8000b7c:	d006      	beq.n	8000b8c <std+0x48>
 8000b7e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8000b82:	4294      	cmp	r4, r2
 8000b84:	d002      	beq.n	8000b8c <std+0x48>
 8000b86:	33d0      	adds	r3, #208	; 0xd0
 8000b88:	429c      	cmp	r4, r3
 8000b8a:	d105      	bne.n	8000b98 <std+0x54>
 8000b8c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000b90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000b94:	f000 b966 	b.w	8000e64 <__retarget_lock_init_recursive>
 8000b98:	bd10      	pop	{r4, pc}
 8000b9a:	bf00      	nop
 8000b9c:	08000ced 	.word	0x08000ced
 8000ba0:	08000d0f 	.word	0x08000d0f
 8000ba4:	08000d47 	.word	0x08000d47
 8000ba8:	08000d6b 	.word	0x08000d6b
 8000bac:	2000008c 	.word	0x2000008c

08000bb0 <stdio_exit_handler>:
 8000bb0:	4a02      	ldr	r2, [pc, #8]	; (8000bbc <stdio_exit_handler+0xc>)
 8000bb2:	4903      	ldr	r1, [pc, #12]	; (8000bc0 <stdio_exit_handler+0x10>)
 8000bb4:	4803      	ldr	r0, [pc, #12]	; (8000bc4 <stdio_exit_handler+0x14>)
 8000bb6:	f000 b869 	b.w	8000c8c <_fwalk_sglue>
 8000bba:	bf00      	nop
 8000bbc:	20000008 	.word	0x20000008
 8000bc0:	08001711 	.word	0x08001711
 8000bc4:	20000014 	.word	0x20000014

08000bc8 <cleanup_stdio>:
 8000bc8:	6841      	ldr	r1, [r0, #4]
 8000bca:	4b0c      	ldr	r3, [pc, #48]	; (8000bfc <cleanup_stdio+0x34>)
 8000bcc:	4299      	cmp	r1, r3
 8000bce:	b510      	push	{r4, lr}
 8000bd0:	4604      	mov	r4, r0
 8000bd2:	d001      	beq.n	8000bd8 <cleanup_stdio+0x10>
 8000bd4:	f000 fd9c 	bl	8001710 <_fflush_r>
 8000bd8:	68a1      	ldr	r1, [r4, #8]
 8000bda:	4b09      	ldr	r3, [pc, #36]	; (8000c00 <cleanup_stdio+0x38>)
 8000bdc:	4299      	cmp	r1, r3
 8000bde:	d002      	beq.n	8000be6 <cleanup_stdio+0x1e>
 8000be0:	4620      	mov	r0, r4
 8000be2:	f000 fd95 	bl	8001710 <_fflush_r>
 8000be6:	68e1      	ldr	r1, [r4, #12]
 8000be8:	4b06      	ldr	r3, [pc, #24]	; (8000c04 <cleanup_stdio+0x3c>)
 8000bea:	4299      	cmp	r1, r3
 8000bec:	d004      	beq.n	8000bf8 <cleanup_stdio+0x30>
 8000bee:	4620      	mov	r0, r4
 8000bf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000bf4:	f000 bd8c 	b.w	8001710 <_fflush_r>
 8000bf8:	bd10      	pop	{r4, pc}
 8000bfa:	bf00      	nop
 8000bfc:	2000008c 	.word	0x2000008c
 8000c00:	200000f4 	.word	0x200000f4
 8000c04:	2000015c 	.word	0x2000015c

08000c08 <global_stdio_init.part.0>:
 8000c08:	b510      	push	{r4, lr}
 8000c0a:	4b0b      	ldr	r3, [pc, #44]	; (8000c38 <global_stdio_init.part.0+0x30>)
 8000c0c:	4c0b      	ldr	r4, [pc, #44]	; (8000c3c <global_stdio_init.part.0+0x34>)
 8000c0e:	4a0c      	ldr	r2, [pc, #48]	; (8000c40 <global_stdio_init.part.0+0x38>)
 8000c10:	601a      	str	r2, [r3, #0]
 8000c12:	4620      	mov	r0, r4
 8000c14:	2200      	movs	r2, #0
 8000c16:	2104      	movs	r1, #4
 8000c18:	f7ff ff94 	bl	8000b44 <std>
 8000c1c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8000c20:	2201      	movs	r2, #1
 8000c22:	2109      	movs	r1, #9
 8000c24:	f7ff ff8e 	bl	8000b44 <std>
 8000c28:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000c2c:	2202      	movs	r2, #2
 8000c2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000c32:	2112      	movs	r1, #18
 8000c34:	f7ff bf86 	b.w	8000b44 <std>
 8000c38:	200001c4 	.word	0x200001c4
 8000c3c:	2000008c 	.word	0x2000008c
 8000c40:	08000bb1 	.word	0x08000bb1

08000c44 <__sfp_lock_acquire>:
 8000c44:	4801      	ldr	r0, [pc, #4]	; (8000c4c <__sfp_lock_acquire+0x8>)
 8000c46:	f000 b90e 	b.w	8000e66 <__retarget_lock_acquire_recursive>
 8000c4a:	bf00      	nop
 8000c4c:	200001cd 	.word	0x200001cd

08000c50 <__sfp_lock_release>:
 8000c50:	4801      	ldr	r0, [pc, #4]	; (8000c58 <__sfp_lock_release+0x8>)
 8000c52:	f000 b909 	b.w	8000e68 <__retarget_lock_release_recursive>
 8000c56:	bf00      	nop
 8000c58:	200001cd 	.word	0x200001cd

08000c5c <__sinit>:
 8000c5c:	b510      	push	{r4, lr}
 8000c5e:	4604      	mov	r4, r0
 8000c60:	f7ff fff0 	bl	8000c44 <__sfp_lock_acquire>
 8000c64:	6a23      	ldr	r3, [r4, #32]
 8000c66:	b11b      	cbz	r3, 8000c70 <__sinit+0x14>
 8000c68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000c6c:	f7ff bff0 	b.w	8000c50 <__sfp_lock_release>
 8000c70:	4b04      	ldr	r3, [pc, #16]	; (8000c84 <__sinit+0x28>)
 8000c72:	6223      	str	r3, [r4, #32]
 8000c74:	4b04      	ldr	r3, [pc, #16]	; (8000c88 <__sinit+0x2c>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d1f5      	bne.n	8000c68 <__sinit+0xc>
 8000c7c:	f7ff ffc4 	bl	8000c08 <global_stdio_init.part.0>
 8000c80:	e7f2      	b.n	8000c68 <__sinit+0xc>
 8000c82:	bf00      	nop
 8000c84:	08000bc9 	.word	0x08000bc9
 8000c88:	200001c4 	.word	0x200001c4

08000c8c <_fwalk_sglue>:
 8000c8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000c90:	4607      	mov	r7, r0
 8000c92:	4688      	mov	r8, r1
 8000c94:	4614      	mov	r4, r2
 8000c96:	2600      	movs	r6, #0
 8000c98:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000c9c:	f1b9 0901 	subs.w	r9, r9, #1
 8000ca0:	d505      	bpl.n	8000cae <_fwalk_sglue+0x22>
 8000ca2:	6824      	ldr	r4, [r4, #0]
 8000ca4:	2c00      	cmp	r4, #0
 8000ca6:	d1f7      	bne.n	8000c98 <_fwalk_sglue+0xc>
 8000ca8:	4630      	mov	r0, r6
 8000caa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000cae:	89ab      	ldrh	r3, [r5, #12]
 8000cb0:	2b01      	cmp	r3, #1
 8000cb2:	d907      	bls.n	8000cc4 <_fwalk_sglue+0x38>
 8000cb4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000cb8:	3301      	adds	r3, #1
 8000cba:	d003      	beq.n	8000cc4 <_fwalk_sglue+0x38>
 8000cbc:	4629      	mov	r1, r5
 8000cbe:	4638      	mov	r0, r7
 8000cc0:	47c0      	blx	r8
 8000cc2:	4306      	orrs	r6, r0
 8000cc4:	3568      	adds	r5, #104	; 0x68
 8000cc6:	e7e9      	b.n	8000c9c <_fwalk_sglue+0x10>

08000cc8 <iprintf>:
 8000cc8:	b40f      	push	{r0, r1, r2, r3}
 8000cca:	b507      	push	{r0, r1, r2, lr}
 8000ccc:	4906      	ldr	r1, [pc, #24]	; (8000ce8 <iprintf+0x20>)
 8000cce:	ab04      	add	r3, sp, #16
 8000cd0:	6808      	ldr	r0, [r1, #0]
 8000cd2:	f853 2b04 	ldr.w	r2, [r3], #4
 8000cd6:	6881      	ldr	r1, [r0, #8]
 8000cd8:	9301      	str	r3, [sp, #4]
 8000cda:	f000 f9e9 	bl	80010b0 <_vfiprintf_r>
 8000cde:	b003      	add	sp, #12
 8000ce0:	f85d eb04 	ldr.w	lr, [sp], #4
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr
 8000ce8:	20000060 	.word	0x20000060

08000cec <__sread>:
 8000cec:	b510      	push	{r4, lr}
 8000cee:	460c      	mov	r4, r1
 8000cf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000cf4:	f000 f868 	bl	8000dc8 <_read_r>
 8000cf8:	2800      	cmp	r0, #0
 8000cfa:	bfab      	itete	ge
 8000cfc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000cfe:	89a3      	ldrhlt	r3, [r4, #12]
 8000d00:	181b      	addge	r3, r3, r0
 8000d02:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000d06:	bfac      	ite	ge
 8000d08:	6563      	strge	r3, [r4, #84]	; 0x54
 8000d0a:	81a3      	strhlt	r3, [r4, #12]
 8000d0c:	bd10      	pop	{r4, pc}

08000d0e <__swrite>:
 8000d0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d12:	461f      	mov	r7, r3
 8000d14:	898b      	ldrh	r3, [r1, #12]
 8000d16:	05db      	lsls	r3, r3, #23
 8000d18:	4605      	mov	r5, r0
 8000d1a:	460c      	mov	r4, r1
 8000d1c:	4616      	mov	r6, r2
 8000d1e:	d505      	bpl.n	8000d2c <__swrite+0x1e>
 8000d20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000d24:	2302      	movs	r3, #2
 8000d26:	2200      	movs	r2, #0
 8000d28:	f000 f83c 	bl	8000da4 <_lseek_r>
 8000d2c:	89a3      	ldrh	r3, [r4, #12]
 8000d2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000d32:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000d36:	81a3      	strh	r3, [r4, #12]
 8000d38:	4632      	mov	r2, r6
 8000d3a:	463b      	mov	r3, r7
 8000d3c:	4628      	mov	r0, r5
 8000d3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000d42:	f000 b853 	b.w	8000dec <_write_r>

08000d46 <__sseek>:
 8000d46:	b510      	push	{r4, lr}
 8000d48:	460c      	mov	r4, r1
 8000d4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000d4e:	f000 f829 	bl	8000da4 <_lseek_r>
 8000d52:	1c43      	adds	r3, r0, #1
 8000d54:	89a3      	ldrh	r3, [r4, #12]
 8000d56:	bf15      	itete	ne
 8000d58:	6560      	strne	r0, [r4, #84]	; 0x54
 8000d5a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000d5e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000d62:	81a3      	strheq	r3, [r4, #12]
 8000d64:	bf18      	it	ne
 8000d66:	81a3      	strhne	r3, [r4, #12]
 8000d68:	bd10      	pop	{r4, pc}

08000d6a <__sclose>:
 8000d6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000d6e:	f000 b809 	b.w	8000d84 <_close_r>

08000d72 <memset>:
 8000d72:	4402      	add	r2, r0
 8000d74:	4603      	mov	r3, r0
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d100      	bne.n	8000d7c <memset+0xa>
 8000d7a:	4770      	bx	lr
 8000d7c:	f803 1b01 	strb.w	r1, [r3], #1
 8000d80:	e7f9      	b.n	8000d76 <memset+0x4>
	...

08000d84 <_close_r>:
 8000d84:	b538      	push	{r3, r4, r5, lr}
 8000d86:	4d06      	ldr	r5, [pc, #24]	; (8000da0 <_close_r+0x1c>)
 8000d88:	2300      	movs	r3, #0
 8000d8a:	4604      	mov	r4, r0
 8000d8c:	4608      	mov	r0, r1
 8000d8e:	602b      	str	r3, [r5, #0]
 8000d90:	f7ff fd6f 	bl	8000872 <_close>
 8000d94:	1c43      	adds	r3, r0, #1
 8000d96:	d102      	bne.n	8000d9e <_close_r+0x1a>
 8000d98:	682b      	ldr	r3, [r5, #0]
 8000d9a:	b103      	cbz	r3, 8000d9e <_close_r+0x1a>
 8000d9c:	6023      	str	r3, [r4, #0]
 8000d9e:	bd38      	pop	{r3, r4, r5, pc}
 8000da0:	200001c8 	.word	0x200001c8

08000da4 <_lseek_r>:
 8000da4:	b538      	push	{r3, r4, r5, lr}
 8000da6:	4d07      	ldr	r5, [pc, #28]	; (8000dc4 <_lseek_r+0x20>)
 8000da8:	4604      	mov	r4, r0
 8000daa:	4608      	mov	r0, r1
 8000dac:	4611      	mov	r1, r2
 8000dae:	2200      	movs	r2, #0
 8000db0:	602a      	str	r2, [r5, #0]
 8000db2:	461a      	mov	r2, r3
 8000db4:	f7ff fd84 	bl	80008c0 <_lseek>
 8000db8:	1c43      	adds	r3, r0, #1
 8000dba:	d102      	bne.n	8000dc2 <_lseek_r+0x1e>
 8000dbc:	682b      	ldr	r3, [r5, #0]
 8000dbe:	b103      	cbz	r3, 8000dc2 <_lseek_r+0x1e>
 8000dc0:	6023      	str	r3, [r4, #0]
 8000dc2:	bd38      	pop	{r3, r4, r5, pc}
 8000dc4:	200001c8 	.word	0x200001c8

08000dc8 <_read_r>:
 8000dc8:	b538      	push	{r3, r4, r5, lr}
 8000dca:	4d07      	ldr	r5, [pc, #28]	; (8000de8 <_read_r+0x20>)
 8000dcc:	4604      	mov	r4, r0
 8000dce:	4608      	mov	r0, r1
 8000dd0:	4611      	mov	r1, r2
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	602a      	str	r2, [r5, #0]
 8000dd6:	461a      	mov	r2, r3
 8000dd8:	f7ff fd12 	bl	8000800 <_read>
 8000ddc:	1c43      	adds	r3, r0, #1
 8000dde:	d102      	bne.n	8000de6 <_read_r+0x1e>
 8000de0:	682b      	ldr	r3, [r5, #0]
 8000de2:	b103      	cbz	r3, 8000de6 <_read_r+0x1e>
 8000de4:	6023      	str	r3, [r4, #0]
 8000de6:	bd38      	pop	{r3, r4, r5, pc}
 8000de8:	200001c8 	.word	0x200001c8

08000dec <_write_r>:
 8000dec:	b538      	push	{r3, r4, r5, lr}
 8000dee:	4d07      	ldr	r5, [pc, #28]	; (8000e0c <_write_r+0x20>)
 8000df0:	4604      	mov	r4, r0
 8000df2:	4608      	mov	r0, r1
 8000df4:	4611      	mov	r1, r2
 8000df6:	2200      	movs	r2, #0
 8000df8:	602a      	str	r2, [r5, #0]
 8000dfa:	461a      	mov	r2, r3
 8000dfc:	f7ff fd1d 	bl	800083a <_write>
 8000e00:	1c43      	adds	r3, r0, #1
 8000e02:	d102      	bne.n	8000e0a <_write_r+0x1e>
 8000e04:	682b      	ldr	r3, [r5, #0]
 8000e06:	b103      	cbz	r3, 8000e0a <_write_r+0x1e>
 8000e08:	6023      	str	r3, [r4, #0]
 8000e0a:	bd38      	pop	{r3, r4, r5, pc}
 8000e0c:	200001c8 	.word	0x200001c8

08000e10 <__errno>:
 8000e10:	4b01      	ldr	r3, [pc, #4]	; (8000e18 <__errno+0x8>)
 8000e12:	6818      	ldr	r0, [r3, #0]
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	20000060 	.word	0x20000060

08000e1c <__libc_init_array>:
 8000e1c:	b570      	push	{r4, r5, r6, lr}
 8000e1e:	4d0d      	ldr	r5, [pc, #52]	; (8000e54 <__libc_init_array+0x38>)
 8000e20:	4c0d      	ldr	r4, [pc, #52]	; (8000e58 <__libc_init_array+0x3c>)
 8000e22:	1b64      	subs	r4, r4, r5
 8000e24:	10a4      	asrs	r4, r4, #2
 8000e26:	2600      	movs	r6, #0
 8000e28:	42a6      	cmp	r6, r4
 8000e2a:	d109      	bne.n	8000e40 <__libc_init_array+0x24>
 8000e2c:	4d0b      	ldr	r5, [pc, #44]	; (8000e5c <__libc_init_array+0x40>)
 8000e2e:	4c0c      	ldr	r4, [pc, #48]	; (8000e60 <__libc_init_array+0x44>)
 8000e30:	f000 fdc0 	bl	80019b4 <_init>
 8000e34:	1b64      	subs	r4, r4, r5
 8000e36:	10a4      	asrs	r4, r4, #2
 8000e38:	2600      	movs	r6, #0
 8000e3a:	42a6      	cmp	r6, r4
 8000e3c:	d105      	bne.n	8000e4a <__libc_init_array+0x2e>
 8000e3e:	bd70      	pop	{r4, r5, r6, pc}
 8000e40:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e44:	4798      	blx	r3
 8000e46:	3601      	adds	r6, #1
 8000e48:	e7ee      	b.n	8000e28 <__libc_init_array+0xc>
 8000e4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e4e:	4798      	blx	r3
 8000e50:	3601      	adds	r6, #1
 8000e52:	e7f2      	b.n	8000e3a <__libc_init_array+0x1e>
 8000e54:	08001a24 	.word	0x08001a24
 8000e58:	08001a24 	.word	0x08001a24
 8000e5c:	08001a24 	.word	0x08001a24
 8000e60:	08001a28 	.word	0x08001a28

08000e64 <__retarget_lock_init_recursive>:
 8000e64:	4770      	bx	lr

08000e66 <__retarget_lock_acquire_recursive>:
 8000e66:	4770      	bx	lr

08000e68 <__retarget_lock_release_recursive>:
 8000e68:	4770      	bx	lr
	...

08000e6c <_free_r>:
 8000e6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000e6e:	2900      	cmp	r1, #0
 8000e70:	d044      	beq.n	8000efc <_free_r+0x90>
 8000e72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000e76:	9001      	str	r0, [sp, #4]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	f1a1 0404 	sub.w	r4, r1, #4
 8000e7e:	bfb8      	it	lt
 8000e80:	18e4      	addlt	r4, r4, r3
 8000e82:	f000 f8df 	bl	8001044 <__malloc_lock>
 8000e86:	4a1e      	ldr	r2, [pc, #120]	; (8000f00 <_free_r+0x94>)
 8000e88:	9801      	ldr	r0, [sp, #4]
 8000e8a:	6813      	ldr	r3, [r2, #0]
 8000e8c:	b933      	cbnz	r3, 8000e9c <_free_r+0x30>
 8000e8e:	6063      	str	r3, [r4, #4]
 8000e90:	6014      	str	r4, [r2, #0]
 8000e92:	b003      	add	sp, #12
 8000e94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000e98:	f000 b8da 	b.w	8001050 <__malloc_unlock>
 8000e9c:	42a3      	cmp	r3, r4
 8000e9e:	d908      	bls.n	8000eb2 <_free_r+0x46>
 8000ea0:	6825      	ldr	r5, [r4, #0]
 8000ea2:	1961      	adds	r1, r4, r5
 8000ea4:	428b      	cmp	r3, r1
 8000ea6:	bf01      	itttt	eq
 8000ea8:	6819      	ldreq	r1, [r3, #0]
 8000eaa:	685b      	ldreq	r3, [r3, #4]
 8000eac:	1949      	addeq	r1, r1, r5
 8000eae:	6021      	streq	r1, [r4, #0]
 8000eb0:	e7ed      	b.n	8000e8e <_free_r+0x22>
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	b10b      	cbz	r3, 8000ebc <_free_r+0x50>
 8000eb8:	42a3      	cmp	r3, r4
 8000eba:	d9fa      	bls.n	8000eb2 <_free_r+0x46>
 8000ebc:	6811      	ldr	r1, [r2, #0]
 8000ebe:	1855      	adds	r5, r2, r1
 8000ec0:	42a5      	cmp	r5, r4
 8000ec2:	d10b      	bne.n	8000edc <_free_r+0x70>
 8000ec4:	6824      	ldr	r4, [r4, #0]
 8000ec6:	4421      	add	r1, r4
 8000ec8:	1854      	adds	r4, r2, r1
 8000eca:	42a3      	cmp	r3, r4
 8000ecc:	6011      	str	r1, [r2, #0]
 8000ece:	d1e0      	bne.n	8000e92 <_free_r+0x26>
 8000ed0:	681c      	ldr	r4, [r3, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	6053      	str	r3, [r2, #4]
 8000ed6:	440c      	add	r4, r1
 8000ed8:	6014      	str	r4, [r2, #0]
 8000eda:	e7da      	b.n	8000e92 <_free_r+0x26>
 8000edc:	d902      	bls.n	8000ee4 <_free_r+0x78>
 8000ede:	230c      	movs	r3, #12
 8000ee0:	6003      	str	r3, [r0, #0]
 8000ee2:	e7d6      	b.n	8000e92 <_free_r+0x26>
 8000ee4:	6825      	ldr	r5, [r4, #0]
 8000ee6:	1961      	adds	r1, r4, r5
 8000ee8:	428b      	cmp	r3, r1
 8000eea:	bf04      	itt	eq
 8000eec:	6819      	ldreq	r1, [r3, #0]
 8000eee:	685b      	ldreq	r3, [r3, #4]
 8000ef0:	6063      	str	r3, [r4, #4]
 8000ef2:	bf04      	itt	eq
 8000ef4:	1949      	addeq	r1, r1, r5
 8000ef6:	6021      	streq	r1, [r4, #0]
 8000ef8:	6054      	str	r4, [r2, #4]
 8000efa:	e7ca      	b.n	8000e92 <_free_r+0x26>
 8000efc:	b003      	add	sp, #12
 8000efe:	bd30      	pop	{r4, r5, pc}
 8000f00:	200001d0 	.word	0x200001d0

08000f04 <sbrk_aligned>:
 8000f04:	b570      	push	{r4, r5, r6, lr}
 8000f06:	4e0e      	ldr	r6, [pc, #56]	; (8000f40 <sbrk_aligned+0x3c>)
 8000f08:	460c      	mov	r4, r1
 8000f0a:	6831      	ldr	r1, [r6, #0]
 8000f0c:	4605      	mov	r5, r0
 8000f0e:	b911      	cbnz	r1, 8000f16 <sbrk_aligned+0x12>
 8000f10:	f000 fcbc 	bl	800188c <_sbrk_r>
 8000f14:	6030      	str	r0, [r6, #0]
 8000f16:	4621      	mov	r1, r4
 8000f18:	4628      	mov	r0, r5
 8000f1a:	f000 fcb7 	bl	800188c <_sbrk_r>
 8000f1e:	1c43      	adds	r3, r0, #1
 8000f20:	d00a      	beq.n	8000f38 <sbrk_aligned+0x34>
 8000f22:	1cc4      	adds	r4, r0, #3
 8000f24:	f024 0403 	bic.w	r4, r4, #3
 8000f28:	42a0      	cmp	r0, r4
 8000f2a:	d007      	beq.n	8000f3c <sbrk_aligned+0x38>
 8000f2c:	1a21      	subs	r1, r4, r0
 8000f2e:	4628      	mov	r0, r5
 8000f30:	f000 fcac 	bl	800188c <_sbrk_r>
 8000f34:	3001      	adds	r0, #1
 8000f36:	d101      	bne.n	8000f3c <sbrk_aligned+0x38>
 8000f38:	f04f 34ff 	mov.w	r4, #4294967295
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	bd70      	pop	{r4, r5, r6, pc}
 8000f40:	200001d4 	.word	0x200001d4

08000f44 <_malloc_r>:
 8000f44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000f48:	1ccd      	adds	r5, r1, #3
 8000f4a:	f025 0503 	bic.w	r5, r5, #3
 8000f4e:	3508      	adds	r5, #8
 8000f50:	2d0c      	cmp	r5, #12
 8000f52:	bf38      	it	cc
 8000f54:	250c      	movcc	r5, #12
 8000f56:	2d00      	cmp	r5, #0
 8000f58:	4607      	mov	r7, r0
 8000f5a:	db01      	blt.n	8000f60 <_malloc_r+0x1c>
 8000f5c:	42a9      	cmp	r1, r5
 8000f5e:	d905      	bls.n	8000f6c <_malloc_r+0x28>
 8000f60:	230c      	movs	r3, #12
 8000f62:	603b      	str	r3, [r7, #0]
 8000f64:	2600      	movs	r6, #0
 8000f66:	4630      	mov	r0, r6
 8000f68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000f6c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8001040 <_malloc_r+0xfc>
 8000f70:	f000 f868 	bl	8001044 <__malloc_lock>
 8000f74:	f8d8 3000 	ldr.w	r3, [r8]
 8000f78:	461c      	mov	r4, r3
 8000f7a:	bb5c      	cbnz	r4, 8000fd4 <_malloc_r+0x90>
 8000f7c:	4629      	mov	r1, r5
 8000f7e:	4638      	mov	r0, r7
 8000f80:	f7ff ffc0 	bl	8000f04 <sbrk_aligned>
 8000f84:	1c43      	adds	r3, r0, #1
 8000f86:	4604      	mov	r4, r0
 8000f88:	d155      	bne.n	8001036 <_malloc_r+0xf2>
 8000f8a:	f8d8 4000 	ldr.w	r4, [r8]
 8000f8e:	4626      	mov	r6, r4
 8000f90:	2e00      	cmp	r6, #0
 8000f92:	d145      	bne.n	8001020 <_malloc_r+0xdc>
 8000f94:	2c00      	cmp	r4, #0
 8000f96:	d048      	beq.n	800102a <_malloc_r+0xe6>
 8000f98:	6823      	ldr	r3, [r4, #0]
 8000f9a:	4631      	mov	r1, r6
 8000f9c:	4638      	mov	r0, r7
 8000f9e:	eb04 0903 	add.w	r9, r4, r3
 8000fa2:	f000 fc73 	bl	800188c <_sbrk_r>
 8000fa6:	4581      	cmp	r9, r0
 8000fa8:	d13f      	bne.n	800102a <_malloc_r+0xe6>
 8000faa:	6821      	ldr	r1, [r4, #0]
 8000fac:	1a6d      	subs	r5, r5, r1
 8000fae:	4629      	mov	r1, r5
 8000fb0:	4638      	mov	r0, r7
 8000fb2:	f7ff ffa7 	bl	8000f04 <sbrk_aligned>
 8000fb6:	3001      	adds	r0, #1
 8000fb8:	d037      	beq.n	800102a <_malloc_r+0xe6>
 8000fba:	6823      	ldr	r3, [r4, #0]
 8000fbc:	442b      	add	r3, r5
 8000fbe:	6023      	str	r3, [r4, #0]
 8000fc0:	f8d8 3000 	ldr.w	r3, [r8]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d038      	beq.n	800103a <_malloc_r+0xf6>
 8000fc8:	685a      	ldr	r2, [r3, #4]
 8000fca:	42a2      	cmp	r2, r4
 8000fcc:	d12b      	bne.n	8001026 <_malloc_r+0xe2>
 8000fce:	2200      	movs	r2, #0
 8000fd0:	605a      	str	r2, [r3, #4]
 8000fd2:	e00f      	b.n	8000ff4 <_malloc_r+0xb0>
 8000fd4:	6822      	ldr	r2, [r4, #0]
 8000fd6:	1b52      	subs	r2, r2, r5
 8000fd8:	d41f      	bmi.n	800101a <_malloc_r+0xd6>
 8000fda:	2a0b      	cmp	r2, #11
 8000fdc:	d917      	bls.n	800100e <_malloc_r+0xca>
 8000fde:	1961      	adds	r1, r4, r5
 8000fe0:	42a3      	cmp	r3, r4
 8000fe2:	6025      	str	r5, [r4, #0]
 8000fe4:	bf18      	it	ne
 8000fe6:	6059      	strne	r1, [r3, #4]
 8000fe8:	6863      	ldr	r3, [r4, #4]
 8000fea:	bf08      	it	eq
 8000fec:	f8c8 1000 	streq.w	r1, [r8]
 8000ff0:	5162      	str	r2, [r4, r5]
 8000ff2:	604b      	str	r3, [r1, #4]
 8000ff4:	4638      	mov	r0, r7
 8000ff6:	f104 060b 	add.w	r6, r4, #11
 8000ffa:	f000 f829 	bl	8001050 <__malloc_unlock>
 8000ffe:	f026 0607 	bic.w	r6, r6, #7
 8001002:	1d23      	adds	r3, r4, #4
 8001004:	1af2      	subs	r2, r6, r3
 8001006:	d0ae      	beq.n	8000f66 <_malloc_r+0x22>
 8001008:	1b9b      	subs	r3, r3, r6
 800100a:	50a3      	str	r3, [r4, r2]
 800100c:	e7ab      	b.n	8000f66 <_malloc_r+0x22>
 800100e:	42a3      	cmp	r3, r4
 8001010:	6862      	ldr	r2, [r4, #4]
 8001012:	d1dd      	bne.n	8000fd0 <_malloc_r+0x8c>
 8001014:	f8c8 2000 	str.w	r2, [r8]
 8001018:	e7ec      	b.n	8000ff4 <_malloc_r+0xb0>
 800101a:	4623      	mov	r3, r4
 800101c:	6864      	ldr	r4, [r4, #4]
 800101e:	e7ac      	b.n	8000f7a <_malloc_r+0x36>
 8001020:	4634      	mov	r4, r6
 8001022:	6876      	ldr	r6, [r6, #4]
 8001024:	e7b4      	b.n	8000f90 <_malloc_r+0x4c>
 8001026:	4613      	mov	r3, r2
 8001028:	e7cc      	b.n	8000fc4 <_malloc_r+0x80>
 800102a:	230c      	movs	r3, #12
 800102c:	603b      	str	r3, [r7, #0]
 800102e:	4638      	mov	r0, r7
 8001030:	f000 f80e 	bl	8001050 <__malloc_unlock>
 8001034:	e797      	b.n	8000f66 <_malloc_r+0x22>
 8001036:	6025      	str	r5, [r4, #0]
 8001038:	e7dc      	b.n	8000ff4 <_malloc_r+0xb0>
 800103a:	605b      	str	r3, [r3, #4]
 800103c:	deff      	udf	#255	; 0xff
 800103e:	bf00      	nop
 8001040:	200001d0 	.word	0x200001d0

08001044 <__malloc_lock>:
 8001044:	4801      	ldr	r0, [pc, #4]	; (800104c <__malloc_lock+0x8>)
 8001046:	f7ff bf0e 	b.w	8000e66 <__retarget_lock_acquire_recursive>
 800104a:	bf00      	nop
 800104c:	200001cc 	.word	0x200001cc

08001050 <__malloc_unlock>:
 8001050:	4801      	ldr	r0, [pc, #4]	; (8001058 <__malloc_unlock+0x8>)
 8001052:	f7ff bf09 	b.w	8000e68 <__retarget_lock_release_recursive>
 8001056:	bf00      	nop
 8001058:	200001cc 	.word	0x200001cc

0800105c <__sfputc_r>:
 800105c:	6893      	ldr	r3, [r2, #8]
 800105e:	3b01      	subs	r3, #1
 8001060:	2b00      	cmp	r3, #0
 8001062:	b410      	push	{r4}
 8001064:	6093      	str	r3, [r2, #8]
 8001066:	da08      	bge.n	800107a <__sfputc_r+0x1e>
 8001068:	6994      	ldr	r4, [r2, #24]
 800106a:	42a3      	cmp	r3, r4
 800106c:	db01      	blt.n	8001072 <__sfputc_r+0x16>
 800106e:	290a      	cmp	r1, #10
 8001070:	d103      	bne.n	800107a <__sfputc_r+0x1e>
 8001072:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001076:	f000 bb73 	b.w	8001760 <__swbuf_r>
 800107a:	6813      	ldr	r3, [r2, #0]
 800107c:	1c58      	adds	r0, r3, #1
 800107e:	6010      	str	r0, [r2, #0]
 8001080:	7019      	strb	r1, [r3, #0]
 8001082:	4608      	mov	r0, r1
 8001084:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001088:	4770      	bx	lr

0800108a <__sfputs_r>:
 800108a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800108c:	4606      	mov	r6, r0
 800108e:	460f      	mov	r7, r1
 8001090:	4614      	mov	r4, r2
 8001092:	18d5      	adds	r5, r2, r3
 8001094:	42ac      	cmp	r4, r5
 8001096:	d101      	bne.n	800109c <__sfputs_r+0x12>
 8001098:	2000      	movs	r0, #0
 800109a:	e007      	b.n	80010ac <__sfputs_r+0x22>
 800109c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80010a0:	463a      	mov	r2, r7
 80010a2:	4630      	mov	r0, r6
 80010a4:	f7ff ffda 	bl	800105c <__sfputc_r>
 80010a8:	1c43      	adds	r3, r0, #1
 80010aa:	d1f3      	bne.n	8001094 <__sfputs_r+0xa>
 80010ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080010b0 <_vfiprintf_r>:
 80010b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80010b4:	460d      	mov	r5, r1
 80010b6:	b09d      	sub	sp, #116	; 0x74
 80010b8:	4614      	mov	r4, r2
 80010ba:	4698      	mov	r8, r3
 80010bc:	4606      	mov	r6, r0
 80010be:	b118      	cbz	r0, 80010c8 <_vfiprintf_r+0x18>
 80010c0:	6a03      	ldr	r3, [r0, #32]
 80010c2:	b90b      	cbnz	r3, 80010c8 <_vfiprintf_r+0x18>
 80010c4:	f7ff fdca 	bl	8000c5c <__sinit>
 80010c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80010ca:	07d9      	lsls	r1, r3, #31
 80010cc:	d405      	bmi.n	80010da <_vfiprintf_r+0x2a>
 80010ce:	89ab      	ldrh	r3, [r5, #12]
 80010d0:	059a      	lsls	r2, r3, #22
 80010d2:	d402      	bmi.n	80010da <_vfiprintf_r+0x2a>
 80010d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80010d6:	f7ff fec6 	bl	8000e66 <__retarget_lock_acquire_recursive>
 80010da:	89ab      	ldrh	r3, [r5, #12]
 80010dc:	071b      	lsls	r3, r3, #28
 80010de:	d501      	bpl.n	80010e4 <_vfiprintf_r+0x34>
 80010e0:	692b      	ldr	r3, [r5, #16]
 80010e2:	b99b      	cbnz	r3, 800110c <_vfiprintf_r+0x5c>
 80010e4:	4629      	mov	r1, r5
 80010e6:	4630      	mov	r0, r6
 80010e8:	f000 fb78 	bl	80017dc <__swsetup_r>
 80010ec:	b170      	cbz	r0, 800110c <_vfiprintf_r+0x5c>
 80010ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80010f0:	07dc      	lsls	r4, r3, #31
 80010f2:	d504      	bpl.n	80010fe <_vfiprintf_r+0x4e>
 80010f4:	f04f 30ff 	mov.w	r0, #4294967295
 80010f8:	b01d      	add	sp, #116	; 0x74
 80010fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80010fe:	89ab      	ldrh	r3, [r5, #12]
 8001100:	0598      	lsls	r0, r3, #22
 8001102:	d4f7      	bmi.n	80010f4 <_vfiprintf_r+0x44>
 8001104:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001106:	f7ff feaf 	bl	8000e68 <__retarget_lock_release_recursive>
 800110a:	e7f3      	b.n	80010f4 <_vfiprintf_r+0x44>
 800110c:	2300      	movs	r3, #0
 800110e:	9309      	str	r3, [sp, #36]	; 0x24
 8001110:	2320      	movs	r3, #32
 8001112:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001116:	f8cd 800c 	str.w	r8, [sp, #12]
 800111a:	2330      	movs	r3, #48	; 0x30
 800111c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80012d0 <_vfiprintf_r+0x220>
 8001120:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001124:	f04f 0901 	mov.w	r9, #1
 8001128:	4623      	mov	r3, r4
 800112a:	469a      	mov	sl, r3
 800112c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001130:	b10a      	cbz	r2, 8001136 <_vfiprintf_r+0x86>
 8001132:	2a25      	cmp	r2, #37	; 0x25
 8001134:	d1f9      	bne.n	800112a <_vfiprintf_r+0x7a>
 8001136:	ebba 0b04 	subs.w	fp, sl, r4
 800113a:	d00b      	beq.n	8001154 <_vfiprintf_r+0xa4>
 800113c:	465b      	mov	r3, fp
 800113e:	4622      	mov	r2, r4
 8001140:	4629      	mov	r1, r5
 8001142:	4630      	mov	r0, r6
 8001144:	f7ff ffa1 	bl	800108a <__sfputs_r>
 8001148:	3001      	adds	r0, #1
 800114a:	f000 80a9 	beq.w	80012a0 <_vfiprintf_r+0x1f0>
 800114e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001150:	445a      	add	r2, fp
 8001152:	9209      	str	r2, [sp, #36]	; 0x24
 8001154:	f89a 3000 	ldrb.w	r3, [sl]
 8001158:	2b00      	cmp	r3, #0
 800115a:	f000 80a1 	beq.w	80012a0 <_vfiprintf_r+0x1f0>
 800115e:	2300      	movs	r3, #0
 8001160:	f04f 32ff 	mov.w	r2, #4294967295
 8001164:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001168:	f10a 0a01 	add.w	sl, sl, #1
 800116c:	9304      	str	r3, [sp, #16]
 800116e:	9307      	str	r3, [sp, #28]
 8001170:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001174:	931a      	str	r3, [sp, #104]	; 0x68
 8001176:	4654      	mov	r4, sl
 8001178:	2205      	movs	r2, #5
 800117a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800117e:	4854      	ldr	r0, [pc, #336]	; (80012d0 <_vfiprintf_r+0x220>)
 8001180:	f7ff f85e 	bl	8000240 <memchr>
 8001184:	9a04      	ldr	r2, [sp, #16]
 8001186:	b9d8      	cbnz	r0, 80011c0 <_vfiprintf_r+0x110>
 8001188:	06d1      	lsls	r1, r2, #27
 800118a:	bf44      	itt	mi
 800118c:	2320      	movmi	r3, #32
 800118e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001192:	0713      	lsls	r3, r2, #28
 8001194:	bf44      	itt	mi
 8001196:	232b      	movmi	r3, #43	; 0x2b
 8001198:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800119c:	f89a 3000 	ldrb.w	r3, [sl]
 80011a0:	2b2a      	cmp	r3, #42	; 0x2a
 80011a2:	d015      	beq.n	80011d0 <_vfiprintf_r+0x120>
 80011a4:	9a07      	ldr	r2, [sp, #28]
 80011a6:	4654      	mov	r4, sl
 80011a8:	2000      	movs	r0, #0
 80011aa:	f04f 0c0a 	mov.w	ip, #10
 80011ae:	4621      	mov	r1, r4
 80011b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80011b4:	3b30      	subs	r3, #48	; 0x30
 80011b6:	2b09      	cmp	r3, #9
 80011b8:	d94d      	bls.n	8001256 <_vfiprintf_r+0x1a6>
 80011ba:	b1b0      	cbz	r0, 80011ea <_vfiprintf_r+0x13a>
 80011bc:	9207      	str	r2, [sp, #28]
 80011be:	e014      	b.n	80011ea <_vfiprintf_r+0x13a>
 80011c0:	eba0 0308 	sub.w	r3, r0, r8
 80011c4:	fa09 f303 	lsl.w	r3, r9, r3
 80011c8:	4313      	orrs	r3, r2
 80011ca:	9304      	str	r3, [sp, #16]
 80011cc:	46a2      	mov	sl, r4
 80011ce:	e7d2      	b.n	8001176 <_vfiprintf_r+0xc6>
 80011d0:	9b03      	ldr	r3, [sp, #12]
 80011d2:	1d19      	adds	r1, r3, #4
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	9103      	str	r1, [sp, #12]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	bfbb      	ittet	lt
 80011dc:	425b      	neglt	r3, r3
 80011de:	f042 0202 	orrlt.w	r2, r2, #2
 80011e2:	9307      	strge	r3, [sp, #28]
 80011e4:	9307      	strlt	r3, [sp, #28]
 80011e6:	bfb8      	it	lt
 80011e8:	9204      	strlt	r2, [sp, #16]
 80011ea:	7823      	ldrb	r3, [r4, #0]
 80011ec:	2b2e      	cmp	r3, #46	; 0x2e
 80011ee:	d10c      	bne.n	800120a <_vfiprintf_r+0x15a>
 80011f0:	7863      	ldrb	r3, [r4, #1]
 80011f2:	2b2a      	cmp	r3, #42	; 0x2a
 80011f4:	d134      	bne.n	8001260 <_vfiprintf_r+0x1b0>
 80011f6:	9b03      	ldr	r3, [sp, #12]
 80011f8:	1d1a      	adds	r2, r3, #4
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	9203      	str	r2, [sp, #12]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	bfb8      	it	lt
 8001202:	f04f 33ff 	movlt.w	r3, #4294967295
 8001206:	3402      	adds	r4, #2
 8001208:	9305      	str	r3, [sp, #20]
 800120a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80012e0 <_vfiprintf_r+0x230>
 800120e:	7821      	ldrb	r1, [r4, #0]
 8001210:	2203      	movs	r2, #3
 8001212:	4650      	mov	r0, sl
 8001214:	f7ff f814 	bl	8000240 <memchr>
 8001218:	b138      	cbz	r0, 800122a <_vfiprintf_r+0x17a>
 800121a:	9b04      	ldr	r3, [sp, #16]
 800121c:	eba0 000a 	sub.w	r0, r0, sl
 8001220:	2240      	movs	r2, #64	; 0x40
 8001222:	4082      	lsls	r2, r0
 8001224:	4313      	orrs	r3, r2
 8001226:	3401      	adds	r4, #1
 8001228:	9304      	str	r3, [sp, #16]
 800122a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800122e:	4829      	ldr	r0, [pc, #164]	; (80012d4 <_vfiprintf_r+0x224>)
 8001230:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001234:	2206      	movs	r2, #6
 8001236:	f7ff f803 	bl	8000240 <memchr>
 800123a:	2800      	cmp	r0, #0
 800123c:	d03f      	beq.n	80012be <_vfiprintf_r+0x20e>
 800123e:	4b26      	ldr	r3, [pc, #152]	; (80012d8 <_vfiprintf_r+0x228>)
 8001240:	bb1b      	cbnz	r3, 800128a <_vfiprintf_r+0x1da>
 8001242:	9b03      	ldr	r3, [sp, #12]
 8001244:	3307      	adds	r3, #7
 8001246:	f023 0307 	bic.w	r3, r3, #7
 800124a:	3308      	adds	r3, #8
 800124c:	9303      	str	r3, [sp, #12]
 800124e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001250:	443b      	add	r3, r7
 8001252:	9309      	str	r3, [sp, #36]	; 0x24
 8001254:	e768      	b.n	8001128 <_vfiprintf_r+0x78>
 8001256:	fb0c 3202 	mla	r2, ip, r2, r3
 800125a:	460c      	mov	r4, r1
 800125c:	2001      	movs	r0, #1
 800125e:	e7a6      	b.n	80011ae <_vfiprintf_r+0xfe>
 8001260:	2300      	movs	r3, #0
 8001262:	3401      	adds	r4, #1
 8001264:	9305      	str	r3, [sp, #20]
 8001266:	4619      	mov	r1, r3
 8001268:	f04f 0c0a 	mov.w	ip, #10
 800126c:	4620      	mov	r0, r4
 800126e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001272:	3a30      	subs	r2, #48	; 0x30
 8001274:	2a09      	cmp	r2, #9
 8001276:	d903      	bls.n	8001280 <_vfiprintf_r+0x1d0>
 8001278:	2b00      	cmp	r3, #0
 800127a:	d0c6      	beq.n	800120a <_vfiprintf_r+0x15a>
 800127c:	9105      	str	r1, [sp, #20]
 800127e:	e7c4      	b.n	800120a <_vfiprintf_r+0x15a>
 8001280:	fb0c 2101 	mla	r1, ip, r1, r2
 8001284:	4604      	mov	r4, r0
 8001286:	2301      	movs	r3, #1
 8001288:	e7f0      	b.n	800126c <_vfiprintf_r+0x1bc>
 800128a:	ab03      	add	r3, sp, #12
 800128c:	9300      	str	r3, [sp, #0]
 800128e:	462a      	mov	r2, r5
 8001290:	4b12      	ldr	r3, [pc, #72]	; (80012dc <_vfiprintf_r+0x22c>)
 8001292:	a904      	add	r1, sp, #16
 8001294:	4630      	mov	r0, r6
 8001296:	f3af 8000 	nop.w
 800129a:	4607      	mov	r7, r0
 800129c:	1c78      	adds	r0, r7, #1
 800129e:	d1d6      	bne.n	800124e <_vfiprintf_r+0x19e>
 80012a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80012a2:	07d9      	lsls	r1, r3, #31
 80012a4:	d405      	bmi.n	80012b2 <_vfiprintf_r+0x202>
 80012a6:	89ab      	ldrh	r3, [r5, #12]
 80012a8:	059a      	lsls	r2, r3, #22
 80012aa:	d402      	bmi.n	80012b2 <_vfiprintf_r+0x202>
 80012ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80012ae:	f7ff fddb 	bl	8000e68 <__retarget_lock_release_recursive>
 80012b2:	89ab      	ldrh	r3, [r5, #12]
 80012b4:	065b      	lsls	r3, r3, #25
 80012b6:	f53f af1d 	bmi.w	80010f4 <_vfiprintf_r+0x44>
 80012ba:	9809      	ldr	r0, [sp, #36]	; 0x24
 80012bc:	e71c      	b.n	80010f8 <_vfiprintf_r+0x48>
 80012be:	ab03      	add	r3, sp, #12
 80012c0:	9300      	str	r3, [sp, #0]
 80012c2:	462a      	mov	r2, r5
 80012c4:	4b05      	ldr	r3, [pc, #20]	; (80012dc <_vfiprintf_r+0x22c>)
 80012c6:	a904      	add	r1, sp, #16
 80012c8:	4630      	mov	r0, r6
 80012ca:	f000 f879 	bl	80013c0 <_printf_i>
 80012ce:	e7e4      	b.n	800129a <_vfiprintf_r+0x1ea>
 80012d0:	080019ee 	.word	0x080019ee
 80012d4:	080019f8 	.word	0x080019f8
 80012d8:	00000000 	.word	0x00000000
 80012dc:	0800108b 	.word	0x0800108b
 80012e0:	080019f4 	.word	0x080019f4

080012e4 <_printf_common>:
 80012e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80012e8:	4616      	mov	r6, r2
 80012ea:	4699      	mov	r9, r3
 80012ec:	688a      	ldr	r2, [r1, #8]
 80012ee:	690b      	ldr	r3, [r1, #16]
 80012f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80012f4:	4293      	cmp	r3, r2
 80012f6:	bfb8      	it	lt
 80012f8:	4613      	movlt	r3, r2
 80012fa:	6033      	str	r3, [r6, #0]
 80012fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001300:	4607      	mov	r7, r0
 8001302:	460c      	mov	r4, r1
 8001304:	b10a      	cbz	r2, 800130a <_printf_common+0x26>
 8001306:	3301      	adds	r3, #1
 8001308:	6033      	str	r3, [r6, #0]
 800130a:	6823      	ldr	r3, [r4, #0]
 800130c:	0699      	lsls	r1, r3, #26
 800130e:	bf42      	ittt	mi
 8001310:	6833      	ldrmi	r3, [r6, #0]
 8001312:	3302      	addmi	r3, #2
 8001314:	6033      	strmi	r3, [r6, #0]
 8001316:	6825      	ldr	r5, [r4, #0]
 8001318:	f015 0506 	ands.w	r5, r5, #6
 800131c:	d106      	bne.n	800132c <_printf_common+0x48>
 800131e:	f104 0a19 	add.w	sl, r4, #25
 8001322:	68e3      	ldr	r3, [r4, #12]
 8001324:	6832      	ldr	r2, [r6, #0]
 8001326:	1a9b      	subs	r3, r3, r2
 8001328:	42ab      	cmp	r3, r5
 800132a:	dc26      	bgt.n	800137a <_printf_common+0x96>
 800132c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001330:	1e13      	subs	r3, r2, #0
 8001332:	6822      	ldr	r2, [r4, #0]
 8001334:	bf18      	it	ne
 8001336:	2301      	movne	r3, #1
 8001338:	0692      	lsls	r2, r2, #26
 800133a:	d42b      	bmi.n	8001394 <_printf_common+0xb0>
 800133c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001340:	4649      	mov	r1, r9
 8001342:	4638      	mov	r0, r7
 8001344:	47c0      	blx	r8
 8001346:	3001      	adds	r0, #1
 8001348:	d01e      	beq.n	8001388 <_printf_common+0xa4>
 800134a:	6823      	ldr	r3, [r4, #0]
 800134c:	6922      	ldr	r2, [r4, #16]
 800134e:	f003 0306 	and.w	r3, r3, #6
 8001352:	2b04      	cmp	r3, #4
 8001354:	bf02      	ittt	eq
 8001356:	68e5      	ldreq	r5, [r4, #12]
 8001358:	6833      	ldreq	r3, [r6, #0]
 800135a:	1aed      	subeq	r5, r5, r3
 800135c:	68a3      	ldr	r3, [r4, #8]
 800135e:	bf0c      	ite	eq
 8001360:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001364:	2500      	movne	r5, #0
 8001366:	4293      	cmp	r3, r2
 8001368:	bfc4      	itt	gt
 800136a:	1a9b      	subgt	r3, r3, r2
 800136c:	18ed      	addgt	r5, r5, r3
 800136e:	2600      	movs	r6, #0
 8001370:	341a      	adds	r4, #26
 8001372:	42b5      	cmp	r5, r6
 8001374:	d11a      	bne.n	80013ac <_printf_common+0xc8>
 8001376:	2000      	movs	r0, #0
 8001378:	e008      	b.n	800138c <_printf_common+0xa8>
 800137a:	2301      	movs	r3, #1
 800137c:	4652      	mov	r2, sl
 800137e:	4649      	mov	r1, r9
 8001380:	4638      	mov	r0, r7
 8001382:	47c0      	blx	r8
 8001384:	3001      	adds	r0, #1
 8001386:	d103      	bne.n	8001390 <_printf_common+0xac>
 8001388:	f04f 30ff 	mov.w	r0, #4294967295
 800138c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001390:	3501      	adds	r5, #1
 8001392:	e7c6      	b.n	8001322 <_printf_common+0x3e>
 8001394:	18e1      	adds	r1, r4, r3
 8001396:	1c5a      	adds	r2, r3, #1
 8001398:	2030      	movs	r0, #48	; 0x30
 800139a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800139e:	4422      	add	r2, r4
 80013a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80013a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80013a8:	3302      	adds	r3, #2
 80013aa:	e7c7      	b.n	800133c <_printf_common+0x58>
 80013ac:	2301      	movs	r3, #1
 80013ae:	4622      	mov	r2, r4
 80013b0:	4649      	mov	r1, r9
 80013b2:	4638      	mov	r0, r7
 80013b4:	47c0      	blx	r8
 80013b6:	3001      	adds	r0, #1
 80013b8:	d0e6      	beq.n	8001388 <_printf_common+0xa4>
 80013ba:	3601      	adds	r6, #1
 80013bc:	e7d9      	b.n	8001372 <_printf_common+0x8e>
	...

080013c0 <_printf_i>:
 80013c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80013c4:	7e0f      	ldrb	r7, [r1, #24]
 80013c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80013c8:	2f78      	cmp	r7, #120	; 0x78
 80013ca:	4691      	mov	r9, r2
 80013cc:	4680      	mov	r8, r0
 80013ce:	460c      	mov	r4, r1
 80013d0:	469a      	mov	sl, r3
 80013d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80013d6:	d807      	bhi.n	80013e8 <_printf_i+0x28>
 80013d8:	2f62      	cmp	r7, #98	; 0x62
 80013da:	d80a      	bhi.n	80013f2 <_printf_i+0x32>
 80013dc:	2f00      	cmp	r7, #0
 80013de:	f000 80d4 	beq.w	800158a <_printf_i+0x1ca>
 80013e2:	2f58      	cmp	r7, #88	; 0x58
 80013e4:	f000 80c0 	beq.w	8001568 <_printf_i+0x1a8>
 80013e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80013ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80013f0:	e03a      	b.n	8001468 <_printf_i+0xa8>
 80013f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80013f6:	2b15      	cmp	r3, #21
 80013f8:	d8f6      	bhi.n	80013e8 <_printf_i+0x28>
 80013fa:	a101      	add	r1, pc, #4	; (adr r1, 8001400 <_printf_i+0x40>)
 80013fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001400:	08001459 	.word	0x08001459
 8001404:	0800146d 	.word	0x0800146d
 8001408:	080013e9 	.word	0x080013e9
 800140c:	080013e9 	.word	0x080013e9
 8001410:	080013e9 	.word	0x080013e9
 8001414:	080013e9 	.word	0x080013e9
 8001418:	0800146d 	.word	0x0800146d
 800141c:	080013e9 	.word	0x080013e9
 8001420:	080013e9 	.word	0x080013e9
 8001424:	080013e9 	.word	0x080013e9
 8001428:	080013e9 	.word	0x080013e9
 800142c:	08001571 	.word	0x08001571
 8001430:	08001499 	.word	0x08001499
 8001434:	0800152b 	.word	0x0800152b
 8001438:	080013e9 	.word	0x080013e9
 800143c:	080013e9 	.word	0x080013e9
 8001440:	08001593 	.word	0x08001593
 8001444:	080013e9 	.word	0x080013e9
 8001448:	08001499 	.word	0x08001499
 800144c:	080013e9 	.word	0x080013e9
 8001450:	080013e9 	.word	0x080013e9
 8001454:	08001533 	.word	0x08001533
 8001458:	682b      	ldr	r3, [r5, #0]
 800145a:	1d1a      	adds	r2, r3, #4
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	602a      	str	r2, [r5, #0]
 8001460:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001464:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001468:	2301      	movs	r3, #1
 800146a:	e09f      	b.n	80015ac <_printf_i+0x1ec>
 800146c:	6820      	ldr	r0, [r4, #0]
 800146e:	682b      	ldr	r3, [r5, #0]
 8001470:	0607      	lsls	r7, r0, #24
 8001472:	f103 0104 	add.w	r1, r3, #4
 8001476:	6029      	str	r1, [r5, #0]
 8001478:	d501      	bpl.n	800147e <_printf_i+0xbe>
 800147a:	681e      	ldr	r6, [r3, #0]
 800147c:	e003      	b.n	8001486 <_printf_i+0xc6>
 800147e:	0646      	lsls	r6, r0, #25
 8001480:	d5fb      	bpl.n	800147a <_printf_i+0xba>
 8001482:	f9b3 6000 	ldrsh.w	r6, [r3]
 8001486:	2e00      	cmp	r6, #0
 8001488:	da03      	bge.n	8001492 <_printf_i+0xd2>
 800148a:	232d      	movs	r3, #45	; 0x2d
 800148c:	4276      	negs	r6, r6
 800148e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001492:	485a      	ldr	r0, [pc, #360]	; (80015fc <_printf_i+0x23c>)
 8001494:	230a      	movs	r3, #10
 8001496:	e012      	b.n	80014be <_printf_i+0xfe>
 8001498:	682b      	ldr	r3, [r5, #0]
 800149a:	6820      	ldr	r0, [r4, #0]
 800149c:	1d19      	adds	r1, r3, #4
 800149e:	6029      	str	r1, [r5, #0]
 80014a0:	0605      	lsls	r5, r0, #24
 80014a2:	d501      	bpl.n	80014a8 <_printf_i+0xe8>
 80014a4:	681e      	ldr	r6, [r3, #0]
 80014a6:	e002      	b.n	80014ae <_printf_i+0xee>
 80014a8:	0641      	lsls	r1, r0, #25
 80014aa:	d5fb      	bpl.n	80014a4 <_printf_i+0xe4>
 80014ac:	881e      	ldrh	r6, [r3, #0]
 80014ae:	4853      	ldr	r0, [pc, #332]	; (80015fc <_printf_i+0x23c>)
 80014b0:	2f6f      	cmp	r7, #111	; 0x6f
 80014b2:	bf0c      	ite	eq
 80014b4:	2308      	moveq	r3, #8
 80014b6:	230a      	movne	r3, #10
 80014b8:	2100      	movs	r1, #0
 80014ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80014be:	6865      	ldr	r5, [r4, #4]
 80014c0:	60a5      	str	r5, [r4, #8]
 80014c2:	2d00      	cmp	r5, #0
 80014c4:	bfa2      	ittt	ge
 80014c6:	6821      	ldrge	r1, [r4, #0]
 80014c8:	f021 0104 	bicge.w	r1, r1, #4
 80014cc:	6021      	strge	r1, [r4, #0]
 80014ce:	b90e      	cbnz	r6, 80014d4 <_printf_i+0x114>
 80014d0:	2d00      	cmp	r5, #0
 80014d2:	d04b      	beq.n	800156c <_printf_i+0x1ac>
 80014d4:	4615      	mov	r5, r2
 80014d6:	fbb6 f1f3 	udiv	r1, r6, r3
 80014da:	fb03 6711 	mls	r7, r3, r1, r6
 80014de:	5dc7      	ldrb	r7, [r0, r7]
 80014e0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80014e4:	4637      	mov	r7, r6
 80014e6:	42bb      	cmp	r3, r7
 80014e8:	460e      	mov	r6, r1
 80014ea:	d9f4      	bls.n	80014d6 <_printf_i+0x116>
 80014ec:	2b08      	cmp	r3, #8
 80014ee:	d10b      	bne.n	8001508 <_printf_i+0x148>
 80014f0:	6823      	ldr	r3, [r4, #0]
 80014f2:	07de      	lsls	r6, r3, #31
 80014f4:	d508      	bpl.n	8001508 <_printf_i+0x148>
 80014f6:	6923      	ldr	r3, [r4, #16]
 80014f8:	6861      	ldr	r1, [r4, #4]
 80014fa:	4299      	cmp	r1, r3
 80014fc:	bfde      	ittt	le
 80014fe:	2330      	movle	r3, #48	; 0x30
 8001500:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001504:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001508:	1b52      	subs	r2, r2, r5
 800150a:	6122      	str	r2, [r4, #16]
 800150c:	f8cd a000 	str.w	sl, [sp]
 8001510:	464b      	mov	r3, r9
 8001512:	aa03      	add	r2, sp, #12
 8001514:	4621      	mov	r1, r4
 8001516:	4640      	mov	r0, r8
 8001518:	f7ff fee4 	bl	80012e4 <_printf_common>
 800151c:	3001      	adds	r0, #1
 800151e:	d14a      	bne.n	80015b6 <_printf_i+0x1f6>
 8001520:	f04f 30ff 	mov.w	r0, #4294967295
 8001524:	b004      	add	sp, #16
 8001526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800152a:	6823      	ldr	r3, [r4, #0]
 800152c:	f043 0320 	orr.w	r3, r3, #32
 8001530:	6023      	str	r3, [r4, #0]
 8001532:	4833      	ldr	r0, [pc, #204]	; (8001600 <_printf_i+0x240>)
 8001534:	2778      	movs	r7, #120	; 0x78
 8001536:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800153a:	6823      	ldr	r3, [r4, #0]
 800153c:	6829      	ldr	r1, [r5, #0]
 800153e:	061f      	lsls	r7, r3, #24
 8001540:	f851 6b04 	ldr.w	r6, [r1], #4
 8001544:	d402      	bmi.n	800154c <_printf_i+0x18c>
 8001546:	065f      	lsls	r7, r3, #25
 8001548:	bf48      	it	mi
 800154a:	b2b6      	uxthmi	r6, r6
 800154c:	07df      	lsls	r7, r3, #31
 800154e:	bf48      	it	mi
 8001550:	f043 0320 	orrmi.w	r3, r3, #32
 8001554:	6029      	str	r1, [r5, #0]
 8001556:	bf48      	it	mi
 8001558:	6023      	strmi	r3, [r4, #0]
 800155a:	b91e      	cbnz	r6, 8001564 <_printf_i+0x1a4>
 800155c:	6823      	ldr	r3, [r4, #0]
 800155e:	f023 0320 	bic.w	r3, r3, #32
 8001562:	6023      	str	r3, [r4, #0]
 8001564:	2310      	movs	r3, #16
 8001566:	e7a7      	b.n	80014b8 <_printf_i+0xf8>
 8001568:	4824      	ldr	r0, [pc, #144]	; (80015fc <_printf_i+0x23c>)
 800156a:	e7e4      	b.n	8001536 <_printf_i+0x176>
 800156c:	4615      	mov	r5, r2
 800156e:	e7bd      	b.n	80014ec <_printf_i+0x12c>
 8001570:	682b      	ldr	r3, [r5, #0]
 8001572:	6826      	ldr	r6, [r4, #0]
 8001574:	6961      	ldr	r1, [r4, #20]
 8001576:	1d18      	adds	r0, r3, #4
 8001578:	6028      	str	r0, [r5, #0]
 800157a:	0635      	lsls	r5, r6, #24
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	d501      	bpl.n	8001584 <_printf_i+0x1c4>
 8001580:	6019      	str	r1, [r3, #0]
 8001582:	e002      	b.n	800158a <_printf_i+0x1ca>
 8001584:	0670      	lsls	r0, r6, #25
 8001586:	d5fb      	bpl.n	8001580 <_printf_i+0x1c0>
 8001588:	8019      	strh	r1, [r3, #0]
 800158a:	2300      	movs	r3, #0
 800158c:	6123      	str	r3, [r4, #16]
 800158e:	4615      	mov	r5, r2
 8001590:	e7bc      	b.n	800150c <_printf_i+0x14c>
 8001592:	682b      	ldr	r3, [r5, #0]
 8001594:	1d1a      	adds	r2, r3, #4
 8001596:	602a      	str	r2, [r5, #0]
 8001598:	681d      	ldr	r5, [r3, #0]
 800159a:	6862      	ldr	r2, [r4, #4]
 800159c:	2100      	movs	r1, #0
 800159e:	4628      	mov	r0, r5
 80015a0:	f7fe fe4e 	bl	8000240 <memchr>
 80015a4:	b108      	cbz	r0, 80015aa <_printf_i+0x1ea>
 80015a6:	1b40      	subs	r0, r0, r5
 80015a8:	6060      	str	r0, [r4, #4]
 80015aa:	6863      	ldr	r3, [r4, #4]
 80015ac:	6123      	str	r3, [r4, #16]
 80015ae:	2300      	movs	r3, #0
 80015b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80015b4:	e7aa      	b.n	800150c <_printf_i+0x14c>
 80015b6:	6923      	ldr	r3, [r4, #16]
 80015b8:	462a      	mov	r2, r5
 80015ba:	4649      	mov	r1, r9
 80015bc:	4640      	mov	r0, r8
 80015be:	47d0      	blx	sl
 80015c0:	3001      	adds	r0, #1
 80015c2:	d0ad      	beq.n	8001520 <_printf_i+0x160>
 80015c4:	6823      	ldr	r3, [r4, #0]
 80015c6:	079b      	lsls	r3, r3, #30
 80015c8:	d413      	bmi.n	80015f2 <_printf_i+0x232>
 80015ca:	68e0      	ldr	r0, [r4, #12]
 80015cc:	9b03      	ldr	r3, [sp, #12]
 80015ce:	4298      	cmp	r0, r3
 80015d0:	bfb8      	it	lt
 80015d2:	4618      	movlt	r0, r3
 80015d4:	e7a6      	b.n	8001524 <_printf_i+0x164>
 80015d6:	2301      	movs	r3, #1
 80015d8:	4632      	mov	r2, r6
 80015da:	4649      	mov	r1, r9
 80015dc:	4640      	mov	r0, r8
 80015de:	47d0      	blx	sl
 80015e0:	3001      	adds	r0, #1
 80015e2:	d09d      	beq.n	8001520 <_printf_i+0x160>
 80015e4:	3501      	adds	r5, #1
 80015e6:	68e3      	ldr	r3, [r4, #12]
 80015e8:	9903      	ldr	r1, [sp, #12]
 80015ea:	1a5b      	subs	r3, r3, r1
 80015ec:	42ab      	cmp	r3, r5
 80015ee:	dcf2      	bgt.n	80015d6 <_printf_i+0x216>
 80015f0:	e7eb      	b.n	80015ca <_printf_i+0x20a>
 80015f2:	2500      	movs	r5, #0
 80015f4:	f104 0619 	add.w	r6, r4, #25
 80015f8:	e7f5      	b.n	80015e6 <_printf_i+0x226>
 80015fa:	bf00      	nop
 80015fc:	080019ff 	.word	0x080019ff
 8001600:	08001a10 	.word	0x08001a10

08001604 <__sflush_r>:
 8001604:	898a      	ldrh	r2, [r1, #12]
 8001606:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800160a:	4605      	mov	r5, r0
 800160c:	0710      	lsls	r0, r2, #28
 800160e:	460c      	mov	r4, r1
 8001610:	d458      	bmi.n	80016c4 <__sflush_r+0xc0>
 8001612:	684b      	ldr	r3, [r1, #4]
 8001614:	2b00      	cmp	r3, #0
 8001616:	dc05      	bgt.n	8001624 <__sflush_r+0x20>
 8001618:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800161a:	2b00      	cmp	r3, #0
 800161c:	dc02      	bgt.n	8001624 <__sflush_r+0x20>
 800161e:	2000      	movs	r0, #0
 8001620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001624:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001626:	2e00      	cmp	r6, #0
 8001628:	d0f9      	beq.n	800161e <__sflush_r+0x1a>
 800162a:	2300      	movs	r3, #0
 800162c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001630:	682f      	ldr	r7, [r5, #0]
 8001632:	6a21      	ldr	r1, [r4, #32]
 8001634:	602b      	str	r3, [r5, #0]
 8001636:	d032      	beq.n	800169e <__sflush_r+0x9a>
 8001638:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800163a:	89a3      	ldrh	r3, [r4, #12]
 800163c:	075a      	lsls	r2, r3, #29
 800163e:	d505      	bpl.n	800164c <__sflush_r+0x48>
 8001640:	6863      	ldr	r3, [r4, #4]
 8001642:	1ac0      	subs	r0, r0, r3
 8001644:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001646:	b10b      	cbz	r3, 800164c <__sflush_r+0x48>
 8001648:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800164a:	1ac0      	subs	r0, r0, r3
 800164c:	2300      	movs	r3, #0
 800164e:	4602      	mov	r2, r0
 8001650:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001652:	6a21      	ldr	r1, [r4, #32]
 8001654:	4628      	mov	r0, r5
 8001656:	47b0      	blx	r6
 8001658:	1c43      	adds	r3, r0, #1
 800165a:	89a3      	ldrh	r3, [r4, #12]
 800165c:	d106      	bne.n	800166c <__sflush_r+0x68>
 800165e:	6829      	ldr	r1, [r5, #0]
 8001660:	291d      	cmp	r1, #29
 8001662:	d82b      	bhi.n	80016bc <__sflush_r+0xb8>
 8001664:	4a29      	ldr	r2, [pc, #164]	; (800170c <__sflush_r+0x108>)
 8001666:	410a      	asrs	r2, r1
 8001668:	07d6      	lsls	r6, r2, #31
 800166a:	d427      	bmi.n	80016bc <__sflush_r+0xb8>
 800166c:	2200      	movs	r2, #0
 800166e:	6062      	str	r2, [r4, #4]
 8001670:	04d9      	lsls	r1, r3, #19
 8001672:	6922      	ldr	r2, [r4, #16]
 8001674:	6022      	str	r2, [r4, #0]
 8001676:	d504      	bpl.n	8001682 <__sflush_r+0x7e>
 8001678:	1c42      	adds	r2, r0, #1
 800167a:	d101      	bne.n	8001680 <__sflush_r+0x7c>
 800167c:	682b      	ldr	r3, [r5, #0]
 800167e:	b903      	cbnz	r3, 8001682 <__sflush_r+0x7e>
 8001680:	6560      	str	r0, [r4, #84]	; 0x54
 8001682:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001684:	602f      	str	r7, [r5, #0]
 8001686:	2900      	cmp	r1, #0
 8001688:	d0c9      	beq.n	800161e <__sflush_r+0x1a>
 800168a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800168e:	4299      	cmp	r1, r3
 8001690:	d002      	beq.n	8001698 <__sflush_r+0x94>
 8001692:	4628      	mov	r0, r5
 8001694:	f7ff fbea 	bl	8000e6c <_free_r>
 8001698:	2000      	movs	r0, #0
 800169a:	6360      	str	r0, [r4, #52]	; 0x34
 800169c:	e7c0      	b.n	8001620 <__sflush_r+0x1c>
 800169e:	2301      	movs	r3, #1
 80016a0:	4628      	mov	r0, r5
 80016a2:	47b0      	blx	r6
 80016a4:	1c41      	adds	r1, r0, #1
 80016a6:	d1c8      	bne.n	800163a <__sflush_r+0x36>
 80016a8:	682b      	ldr	r3, [r5, #0]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d0c5      	beq.n	800163a <__sflush_r+0x36>
 80016ae:	2b1d      	cmp	r3, #29
 80016b0:	d001      	beq.n	80016b6 <__sflush_r+0xb2>
 80016b2:	2b16      	cmp	r3, #22
 80016b4:	d101      	bne.n	80016ba <__sflush_r+0xb6>
 80016b6:	602f      	str	r7, [r5, #0]
 80016b8:	e7b1      	b.n	800161e <__sflush_r+0x1a>
 80016ba:	89a3      	ldrh	r3, [r4, #12]
 80016bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016c0:	81a3      	strh	r3, [r4, #12]
 80016c2:	e7ad      	b.n	8001620 <__sflush_r+0x1c>
 80016c4:	690f      	ldr	r7, [r1, #16]
 80016c6:	2f00      	cmp	r7, #0
 80016c8:	d0a9      	beq.n	800161e <__sflush_r+0x1a>
 80016ca:	0793      	lsls	r3, r2, #30
 80016cc:	680e      	ldr	r6, [r1, #0]
 80016ce:	bf08      	it	eq
 80016d0:	694b      	ldreq	r3, [r1, #20]
 80016d2:	600f      	str	r7, [r1, #0]
 80016d4:	bf18      	it	ne
 80016d6:	2300      	movne	r3, #0
 80016d8:	eba6 0807 	sub.w	r8, r6, r7
 80016dc:	608b      	str	r3, [r1, #8]
 80016de:	f1b8 0f00 	cmp.w	r8, #0
 80016e2:	dd9c      	ble.n	800161e <__sflush_r+0x1a>
 80016e4:	6a21      	ldr	r1, [r4, #32]
 80016e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80016e8:	4643      	mov	r3, r8
 80016ea:	463a      	mov	r2, r7
 80016ec:	4628      	mov	r0, r5
 80016ee:	47b0      	blx	r6
 80016f0:	2800      	cmp	r0, #0
 80016f2:	dc06      	bgt.n	8001702 <__sflush_r+0xfe>
 80016f4:	89a3      	ldrh	r3, [r4, #12]
 80016f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016fa:	81a3      	strh	r3, [r4, #12]
 80016fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001700:	e78e      	b.n	8001620 <__sflush_r+0x1c>
 8001702:	4407      	add	r7, r0
 8001704:	eba8 0800 	sub.w	r8, r8, r0
 8001708:	e7e9      	b.n	80016de <__sflush_r+0xda>
 800170a:	bf00      	nop
 800170c:	dfbffffe 	.word	0xdfbffffe

08001710 <_fflush_r>:
 8001710:	b538      	push	{r3, r4, r5, lr}
 8001712:	690b      	ldr	r3, [r1, #16]
 8001714:	4605      	mov	r5, r0
 8001716:	460c      	mov	r4, r1
 8001718:	b913      	cbnz	r3, 8001720 <_fflush_r+0x10>
 800171a:	2500      	movs	r5, #0
 800171c:	4628      	mov	r0, r5
 800171e:	bd38      	pop	{r3, r4, r5, pc}
 8001720:	b118      	cbz	r0, 800172a <_fflush_r+0x1a>
 8001722:	6a03      	ldr	r3, [r0, #32]
 8001724:	b90b      	cbnz	r3, 800172a <_fflush_r+0x1a>
 8001726:	f7ff fa99 	bl	8000c5c <__sinit>
 800172a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d0f3      	beq.n	800171a <_fflush_r+0xa>
 8001732:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001734:	07d0      	lsls	r0, r2, #31
 8001736:	d404      	bmi.n	8001742 <_fflush_r+0x32>
 8001738:	0599      	lsls	r1, r3, #22
 800173a:	d402      	bmi.n	8001742 <_fflush_r+0x32>
 800173c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800173e:	f7ff fb92 	bl	8000e66 <__retarget_lock_acquire_recursive>
 8001742:	4628      	mov	r0, r5
 8001744:	4621      	mov	r1, r4
 8001746:	f7ff ff5d 	bl	8001604 <__sflush_r>
 800174a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800174c:	07da      	lsls	r2, r3, #31
 800174e:	4605      	mov	r5, r0
 8001750:	d4e4      	bmi.n	800171c <_fflush_r+0xc>
 8001752:	89a3      	ldrh	r3, [r4, #12]
 8001754:	059b      	lsls	r3, r3, #22
 8001756:	d4e1      	bmi.n	800171c <_fflush_r+0xc>
 8001758:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800175a:	f7ff fb85 	bl	8000e68 <__retarget_lock_release_recursive>
 800175e:	e7dd      	b.n	800171c <_fflush_r+0xc>

08001760 <__swbuf_r>:
 8001760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001762:	460e      	mov	r6, r1
 8001764:	4614      	mov	r4, r2
 8001766:	4605      	mov	r5, r0
 8001768:	b118      	cbz	r0, 8001772 <__swbuf_r+0x12>
 800176a:	6a03      	ldr	r3, [r0, #32]
 800176c:	b90b      	cbnz	r3, 8001772 <__swbuf_r+0x12>
 800176e:	f7ff fa75 	bl	8000c5c <__sinit>
 8001772:	69a3      	ldr	r3, [r4, #24]
 8001774:	60a3      	str	r3, [r4, #8]
 8001776:	89a3      	ldrh	r3, [r4, #12]
 8001778:	071a      	lsls	r2, r3, #28
 800177a:	d525      	bpl.n	80017c8 <__swbuf_r+0x68>
 800177c:	6923      	ldr	r3, [r4, #16]
 800177e:	b31b      	cbz	r3, 80017c8 <__swbuf_r+0x68>
 8001780:	6823      	ldr	r3, [r4, #0]
 8001782:	6922      	ldr	r2, [r4, #16]
 8001784:	1a98      	subs	r0, r3, r2
 8001786:	6963      	ldr	r3, [r4, #20]
 8001788:	b2f6      	uxtb	r6, r6
 800178a:	4283      	cmp	r3, r0
 800178c:	4637      	mov	r7, r6
 800178e:	dc04      	bgt.n	800179a <__swbuf_r+0x3a>
 8001790:	4621      	mov	r1, r4
 8001792:	4628      	mov	r0, r5
 8001794:	f7ff ffbc 	bl	8001710 <_fflush_r>
 8001798:	b9e0      	cbnz	r0, 80017d4 <__swbuf_r+0x74>
 800179a:	68a3      	ldr	r3, [r4, #8]
 800179c:	3b01      	subs	r3, #1
 800179e:	60a3      	str	r3, [r4, #8]
 80017a0:	6823      	ldr	r3, [r4, #0]
 80017a2:	1c5a      	adds	r2, r3, #1
 80017a4:	6022      	str	r2, [r4, #0]
 80017a6:	701e      	strb	r6, [r3, #0]
 80017a8:	6962      	ldr	r2, [r4, #20]
 80017aa:	1c43      	adds	r3, r0, #1
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d004      	beq.n	80017ba <__swbuf_r+0x5a>
 80017b0:	89a3      	ldrh	r3, [r4, #12]
 80017b2:	07db      	lsls	r3, r3, #31
 80017b4:	d506      	bpl.n	80017c4 <__swbuf_r+0x64>
 80017b6:	2e0a      	cmp	r6, #10
 80017b8:	d104      	bne.n	80017c4 <__swbuf_r+0x64>
 80017ba:	4621      	mov	r1, r4
 80017bc:	4628      	mov	r0, r5
 80017be:	f7ff ffa7 	bl	8001710 <_fflush_r>
 80017c2:	b938      	cbnz	r0, 80017d4 <__swbuf_r+0x74>
 80017c4:	4638      	mov	r0, r7
 80017c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80017c8:	4621      	mov	r1, r4
 80017ca:	4628      	mov	r0, r5
 80017cc:	f000 f806 	bl	80017dc <__swsetup_r>
 80017d0:	2800      	cmp	r0, #0
 80017d2:	d0d5      	beq.n	8001780 <__swbuf_r+0x20>
 80017d4:	f04f 37ff 	mov.w	r7, #4294967295
 80017d8:	e7f4      	b.n	80017c4 <__swbuf_r+0x64>
	...

080017dc <__swsetup_r>:
 80017dc:	b538      	push	{r3, r4, r5, lr}
 80017de:	4b2a      	ldr	r3, [pc, #168]	; (8001888 <__swsetup_r+0xac>)
 80017e0:	4605      	mov	r5, r0
 80017e2:	6818      	ldr	r0, [r3, #0]
 80017e4:	460c      	mov	r4, r1
 80017e6:	b118      	cbz	r0, 80017f0 <__swsetup_r+0x14>
 80017e8:	6a03      	ldr	r3, [r0, #32]
 80017ea:	b90b      	cbnz	r3, 80017f0 <__swsetup_r+0x14>
 80017ec:	f7ff fa36 	bl	8000c5c <__sinit>
 80017f0:	89a3      	ldrh	r3, [r4, #12]
 80017f2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80017f6:	0718      	lsls	r0, r3, #28
 80017f8:	d422      	bmi.n	8001840 <__swsetup_r+0x64>
 80017fa:	06d9      	lsls	r1, r3, #27
 80017fc:	d407      	bmi.n	800180e <__swsetup_r+0x32>
 80017fe:	2309      	movs	r3, #9
 8001800:	602b      	str	r3, [r5, #0]
 8001802:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001806:	81a3      	strh	r3, [r4, #12]
 8001808:	f04f 30ff 	mov.w	r0, #4294967295
 800180c:	e034      	b.n	8001878 <__swsetup_r+0x9c>
 800180e:	0758      	lsls	r0, r3, #29
 8001810:	d512      	bpl.n	8001838 <__swsetup_r+0x5c>
 8001812:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001814:	b141      	cbz	r1, 8001828 <__swsetup_r+0x4c>
 8001816:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800181a:	4299      	cmp	r1, r3
 800181c:	d002      	beq.n	8001824 <__swsetup_r+0x48>
 800181e:	4628      	mov	r0, r5
 8001820:	f7ff fb24 	bl	8000e6c <_free_r>
 8001824:	2300      	movs	r3, #0
 8001826:	6363      	str	r3, [r4, #52]	; 0x34
 8001828:	89a3      	ldrh	r3, [r4, #12]
 800182a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800182e:	81a3      	strh	r3, [r4, #12]
 8001830:	2300      	movs	r3, #0
 8001832:	6063      	str	r3, [r4, #4]
 8001834:	6923      	ldr	r3, [r4, #16]
 8001836:	6023      	str	r3, [r4, #0]
 8001838:	89a3      	ldrh	r3, [r4, #12]
 800183a:	f043 0308 	orr.w	r3, r3, #8
 800183e:	81a3      	strh	r3, [r4, #12]
 8001840:	6923      	ldr	r3, [r4, #16]
 8001842:	b94b      	cbnz	r3, 8001858 <__swsetup_r+0x7c>
 8001844:	89a3      	ldrh	r3, [r4, #12]
 8001846:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800184a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800184e:	d003      	beq.n	8001858 <__swsetup_r+0x7c>
 8001850:	4621      	mov	r1, r4
 8001852:	4628      	mov	r0, r5
 8001854:	f000 f850 	bl	80018f8 <__smakebuf_r>
 8001858:	89a0      	ldrh	r0, [r4, #12]
 800185a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800185e:	f010 0301 	ands.w	r3, r0, #1
 8001862:	d00a      	beq.n	800187a <__swsetup_r+0x9e>
 8001864:	2300      	movs	r3, #0
 8001866:	60a3      	str	r3, [r4, #8]
 8001868:	6963      	ldr	r3, [r4, #20]
 800186a:	425b      	negs	r3, r3
 800186c:	61a3      	str	r3, [r4, #24]
 800186e:	6923      	ldr	r3, [r4, #16]
 8001870:	b943      	cbnz	r3, 8001884 <__swsetup_r+0xa8>
 8001872:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001876:	d1c4      	bne.n	8001802 <__swsetup_r+0x26>
 8001878:	bd38      	pop	{r3, r4, r5, pc}
 800187a:	0781      	lsls	r1, r0, #30
 800187c:	bf58      	it	pl
 800187e:	6963      	ldrpl	r3, [r4, #20]
 8001880:	60a3      	str	r3, [r4, #8]
 8001882:	e7f4      	b.n	800186e <__swsetup_r+0x92>
 8001884:	2000      	movs	r0, #0
 8001886:	e7f7      	b.n	8001878 <__swsetup_r+0x9c>
 8001888:	20000060 	.word	0x20000060

0800188c <_sbrk_r>:
 800188c:	b538      	push	{r3, r4, r5, lr}
 800188e:	4d06      	ldr	r5, [pc, #24]	; (80018a8 <_sbrk_r+0x1c>)
 8001890:	2300      	movs	r3, #0
 8001892:	4604      	mov	r4, r0
 8001894:	4608      	mov	r0, r1
 8001896:	602b      	str	r3, [r5, #0]
 8001898:	f7ff f820 	bl	80008dc <_sbrk>
 800189c:	1c43      	adds	r3, r0, #1
 800189e:	d102      	bne.n	80018a6 <_sbrk_r+0x1a>
 80018a0:	682b      	ldr	r3, [r5, #0]
 80018a2:	b103      	cbz	r3, 80018a6 <_sbrk_r+0x1a>
 80018a4:	6023      	str	r3, [r4, #0]
 80018a6:	bd38      	pop	{r3, r4, r5, pc}
 80018a8:	200001c8 	.word	0x200001c8

080018ac <__swhatbuf_r>:
 80018ac:	b570      	push	{r4, r5, r6, lr}
 80018ae:	460c      	mov	r4, r1
 80018b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80018b4:	2900      	cmp	r1, #0
 80018b6:	b096      	sub	sp, #88	; 0x58
 80018b8:	4615      	mov	r5, r2
 80018ba:	461e      	mov	r6, r3
 80018bc:	da0d      	bge.n	80018da <__swhatbuf_r+0x2e>
 80018be:	89a3      	ldrh	r3, [r4, #12]
 80018c0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80018c4:	f04f 0100 	mov.w	r1, #0
 80018c8:	bf0c      	ite	eq
 80018ca:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80018ce:	2340      	movne	r3, #64	; 0x40
 80018d0:	2000      	movs	r0, #0
 80018d2:	6031      	str	r1, [r6, #0]
 80018d4:	602b      	str	r3, [r5, #0]
 80018d6:	b016      	add	sp, #88	; 0x58
 80018d8:	bd70      	pop	{r4, r5, r6, pc}
 80018da:	466a      	mov	r2, sp
 80018dc:	f000 f848 	bl	8001970 <_fstat_r>
 80018e0:	2800      	cmp	r0, #0
 80018e2:	dbec      	blt.n	80018be <__swhatbuf_r+0x12>
 80018e4:	9901      	ldr	r1, [sp, #4]
 80018e6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80018ea:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80018ee:	4259      	negs	r1, r3
 80018f0:	4159      	adcs	r1, r3
 80018f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018f6:	e7eb      	b.n	80018d0 <__swhatbuf_r+0x24>

080018f8 <__smakebuf_r>:
 80018f8:	898b      	ldrh	r3, [r1, #12]
 80018fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80018fc:	079d      	lsls	r5, r3, #30
 80018fe:	4606      	mov	r6, r0
 8001900:	460c      	mov	r4, r1
 8001902:	d507      	bpl.n	8001914 <__smakebuf_r+0x1c>
 8001904:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001908:	6023      	str	r3, [r4, #0]
 800190a:	6123      	str	r3, [r4, #16]
 800190c:	2301      	movs	r3, #1
 800190e:	6163      	str	r3, [r4, #20]
 8001910:	b002      	add	sp, #8
 8001912:	bd70      	pop	{r4, r5, r6, pc}
 8001914:	ab01      	add	r3, sp, #4
 8001916:	466a      	mov	r2, sp
 8001918:	f7ff ffc8 	bl	80018ac <__swhatbuf_r>
 800191c:	9900      	ldr	r1, [sp, #0]
 800191e:	4605      	mov	r5, r0
 8001920:	4630      	mov	r0, r6
 8001922:	f7ff fb0f 	bl	8000f44 <_malloc_r>
 8001926:	b948      	cbnz	r0, 800193c <__smakebuf_r+0x44>
 8001928:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800192c:	059a      	lsls	r2, r3, #22
 800192e:	d4ef      	bmi.n	8001910 <__smakebuf_r+0x18>
 8001930:	f023 0303 	bic.w	r3, r3, #3
 8001934:	f043 0302 	orr.w	r3, r3, #2
 8001938:	81a3      	strh	r3, [r4, #12]
 800193a:	e7e3      	b.n	8001904 <__smakebuf_r+0xc>
 800193c:	89a3      	ldrh	r3, [r4, #12]
 800193e:	6020      	str	r0, [r4, #0]
 8001940:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001944:	81a3      	strh	r3, [r4, #12]
 8001946:	9b00      	ldr	r3, [sp, #0]
 8001948:	6163      	str	r3, [r4, #20]
 800194a:	9b01      	ldr	r3, [sp, #4]
 800194c:	6120      	str	r0, [r4, #16]
 800194e:	b15b      	cbz	r3, 8001968 <__smakebuf_r+0x70>
 8001950:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001954:	4630      	mov	r0, r6
 8001956:	f000 f81d 	bl	8001994 <_isatty_r>
 800195a:	b128      	cbz	r0, 8001968 <__smakebuf_r+0x70>
 800195c:	89a3      	ldrh	r3, [r4, #12]
 800195e:	f023 0303 	bic.w	r3, r3, #3
 8001962:	f043 0301 	orr.w	r3, r3, #1
 8001966:	81a3      	strh	r3, [r4, #12]
 8001968:	89a3      	ldrh	r3, [r4, #12]
 800196a:	431d      	orrs	r5, r3
 800196c:	81a5      	strh	r5, [r4, #12]
 800196e:	e7cf      	b.n	8001910 <__smakebuf_r+0x18>

08001970 <_fstat_r>:
 8001970:	b538      	push	{r3, r4, r5, lr}
 8001972:	4d07      	ldr	r5, [pc, #28]	; (8001990 <_fstat_r+0x20>)
 8001974:	2300      	movs	r3, #0
 8001976:	4604      	mov	r4, r0
 8001978:	4608      	mov	r0, r1
 800197a:	4611      	mov	r1, r2
 800197c:	602b      	str	r3, [r5, #0]
 800197e:	f7fe ff84 	bl	800088a <_fstat>
 8001982:	1c43      	adds	r3, r0, #1
 8001984:	d102      	bne.n	800198c <_fstat_r+0x1c>
 8001986:	682b      	ldr	r3, [r5, #0]
 8001988:	b103      	cbz	r3, 800198c <_fstat_r+0x1c>
 800198a:	6023      	str	r3, [r4, #0]
 800198c:	bd38      	pop	{r3, r4, r5, pc}
 800198e:	bf00      	nop
 8001990:	200001c8 	.word	0x200001c8

08001994 <_isatty_r>:
 8001994:	b538      	push	{r3, r4, r5, lr}
 8001996:	4d06      	ldr	r5, [pc, #24]	; (80019b0 <_isatty_r+0x1c>)
 8001998:	2300      	movs	r3, #0
 800199a:	4604      	mov	r4, r0
 800199c:	4608      	mov	r0, r1
 800199e:	602b      	str	r3, [r5, #0]
 80019a0:	f7fe ff83 	bl	80008aa <_isatty>
 80019a4:	1c43      	adds	r3, r0, #1
 80019a6:	d102      	bne.n	80019ae <_isatty_r+0x1a>
 80019a8:	682b      	ldr	r3, [r5, #0]
 80019aa:	b103      	cbz	r3, 80019ae <_isatty_r+0x1a>
 80019ac:	6023      	str	r3, [r4, #0]
 80019ae:	bd38      	pop	{r3, r4, r5, pc}
 80019b0:	200001c8 	.word	0x200001c8

080019b4 <_init>:
 80019b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019b6:	bf00      	nop
 80019b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019ba:	bc08      	pop	{r3}
 80019bc:	469e      	mov	lr, r3
 80019be:	4770      	bx	lr

080019c0 <_fini>:
 80019c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019c2:	bf00      	nop
 80019c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019c6:	bc08      	pop	{r3}
 80019c8:	469e      	mov	lr, r3
 80019ca:	4770      	bx	lr
